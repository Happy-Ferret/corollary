// Original file: "Parser.hs"
// File auto-generated using Corollary.

#[macro_use] use corollary_support::*;

// NOTE: These imports are advisory. You probably need to change them to support Rust.
// use Control::Monad;
// use mplus;
// use Data::List;
// use Language::C::Parser::Builtin;
// use builtinTypeNames;
// use Language::C::Parser::Lexer;
// use lexC;
// use Language::C::Parser::ParserMonad;
// use P;
// use Language::C::Parser::Tokens;
// use CToken;
// use Prelude;
// use Control::Applicative;
// use Applicative;
// use Control::Monad;
// use ap;
// use Language::C::Data::Ident;
// use Language::C::Data::InputStream;
// use Language::C::Data::Name;
// use Language::C::Data::Node;
// use Language::C::Data::Position;
// use Language::C::Data::RList;
// use Language::C::Syntax;

pub enum HappyAbsSyn {
    HappyTerminal(CToken),
    HappyErrorToken(isize),
    HappyAbsSyn7(CTranslUnit),
    HappyAbsSyn8(Reversed<Vec<CExtDecl>>),
    HappyAbsSyn9(CExtDecl),
    HappyAbsSyn10(CFunDef),
    HappyAbsSyn11(CDeclr),
    HappyAbsSyn12(CStat),
    HappyAbsSyn15(()),
    HappyAbsSyn17(Reversed<Vec<CBlockItem>>),
    HappyAbsSyn18(CBlockItem),
    HappyAbsSyn21(Reversed<Vec<Ident>>),
    HappyAbsSyn26(CAsmStmt),
    HappyAbsSyn27(Option<CTypeQual>),
    HappyAbsSyn28(Vec<CAsmOperand>),
    HappyAbsSyn29(Reversed<Vec<CAsmOperand>>),
    HappyAbsSyn30(CAsmOperand),
    HappyAbsSyn31(Reversed<Vec<CStrLit>>),
    HappyAbsSyn32(CDecl),
    HappyAbsSyn33(Reversed<Vec<CDecl>>),
    HappyAbsSyn35((Option<CStrLit>, Vec<CAttr>)),
    HappyAbsSyn37(Vec<CDeclSpec>),
    HappyAbsSyn38(Reversed<Vec<CDeclSpec>>),
    HappyAbsSyn39(CDeclSpec),
    HappyAbsSyn41(CStorageSpec),
    HappyAbsSyn42(CFunSpec),
    HappyAbsSyn43(CAlignSpec),
    HappyAbsSyn45(CTypeSpec),
    HappyAbsSyn53(CStructUnion),
    HappyAbsSyn54(Located<CStructTag>),
    HappyAbsSyn59((Option<CDeclr>, Option<CExpr>)),
    HappyAbsSyn61(CEnum),
    HappyAbsSyn62(Reversed<Vec<(Ident, Option<CExpr>)>>),
    HappyAbsSyn63((Ident, Option<CExpr>)),
    HappyAbsSyn64(CTypeQual),
    HappyAbsSyn65(Reversed<Vec<CTypeQual>>),
    HappyAbsSyn66(CDeclrR),
    HappyAbsSyn67(Option<CStrLit>),
    HappyAbsSyn82((Vec<CDecl>, bool)),
    HappyAbsSyn88(fn(CDeclrR) -> CDeclrR),
    HappyAbsSyn93(CInit),
    HappyAbsSyn94(Option<CInit>),
    HappyAbsSyn95(Reversed<CInitList>),
    HappyAbsSyn96(Vec<CDesignator>),
    HappyAbsSyn97(Reversed<Vec<CDesignator>>),
    HappyAbsSyn98(CDesignator),
    HappyAbsSyn100(CExpr),
    HappyAbsSyn101(Reversed<Vec<(Option<CDecl>, CExpr)>>),
    HappyAbsSyn102((Option<CDecl>, CExpr)),
    HappyAbsSyn105(Reversed<Vec<CExpr>>),
    HappyAbsSyn107(Located<CUnaryOp>),
    HappyAbsSyn121(Located<CAssignOp>),
    HappyAbsSyn124(Option<CExpr>),
    HappyAbsSyn127(CConst),
    HappyAbsSyn128(CStrLit),
    HappyAbsSyn129(Reversed<Vec<CString>>),
    HappyAbsSyn130(ClangCVersion),
    HappyAbsSyn131(Ident),
    HappyAbsSyn132(Vec<CAttr>),
    HappyAbsSyn135(Reversed<Vec<CAttr>>),
    HappyAbsSyn136(Option<CAttr>)
}
pub use self::HappyAbsSyn::*;

pub fn action_0(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        7 => {
            happyGoto(action_144)
        },
        8 => {
            happyGoto(action_144)
        },
        _ => {
            happyGoto(action_144)
        },
    }
}

pub fn action_1(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_111)
        },
        150 => {
            happyShift(action_111)
        },
        185 => {
            happyShift(action_111)
        },
        187 => {
            happyShift(action_111)
        },
        188 => {
            happyShift(action_111)
        },
        190 => {
            happyShift(action_111)
        },
        192 => {
            happyShift(action_111)
        },
        195 => {
            happyShift(action_111)
        },
        198 => {
            happyShift(action_111)
        },
        200 => {
            happyShift(action_111)
        },
        201 => {
            happyShift(action_111)
        },
        202 => {
            happyShift(action_111)
        },
        207 => {
            happyShift(action_111)
        },
        208 => {
            happyShift(action_111)
        },
        209 => {
            happyShift(action_111)
        },
        210 => {
            happyShift(action_111)
        },
        212 => {
            happyShift(action_111)
        },
        215 => {
            happyShift(action_111)
        },
        218 => {
            happyShift(action_111)
        },
        219 => {
            happyShift(action_111)
        },
        221 => {
            happyShift(action_111)
        },
        222 => {
            happyShift(action_111)
        },
        223 => {
            happyShift(action_111)
        },
        225 => {
            happyShift(action_111)
        },
        226 => {
            happyShift(action_111)
        },
        227 => {
            happyShift(action_111)
        },
        228 => {
            happyShift(action_111)
        },
        229 => {
            happyShift(action_111)
        },
        230 => {
            happyShift(action_111)
        },
        237 => {
            happyShift(action_111)
        },
        238 => {
            happyShift(action_111)
        },
        239 => {
            happyShift(action_111)
        },
        240 => {
            happyShift(action_111)
        },
        9 => {
            happyShift(action_111)
        },
        10 => {
            happyShift(action_111)
        },
        11 => {
            happyShift(action_111)
        },
        32 => {
            happyShift(action_111)
        },
        34 => {
            happyShift(action_111)
        },
        36 => {
            happyShift(action_111)
        },
        37 => {
            happyShift(action_111)
        },
        38 => {
            happyShift(action_111)
        },
        40 => {
            happyShift(action_111)
        },
        41 => {
            happyShift(action_111)
        },
        42 => {
            happyShift(action_111)
        },
        43 => {
            happyShift(action_111)
        },
        44 => {
            happyShift(action_111)
        },
        45 => {
            happyShift(action_111)
        },
        46 => {
            happyShift(action_111)
        },
        47 => {
            happyShift(action_111)
        },
        48 => {
            happyShift(action_111)
        },
        49 => {
            happyShift(action_111)
        },
        50 => {
            happyShift(action_111)
        },
        51 => {
            happyShift(action_111)
        },
        52 => {
            happyShift(action_111)
        },
        53 => {
            happyShift(action_111)
        },
        54 => {
            happyShift(action_111)
        },
        61 => {
            happyShift(action_111)
        },
        65 => {
            happyShift(action_111)
        },
        75 => {
            happyShift(action_111)
        },
        76 => {
            happyShift(action_111)
        },
        77 => {
            happyShift(action_111)
        },
        78 => {
            happyShift(action_111)
        },
        79 => {
            happyShift(action_111)
        },
        80 => {
            happyShift(action_111)
        },
        81 => {
            happyShift(action_111)
        },
        132 => {
            happyShift(action_111)
        },
        133 => {
            happyShift(action_111)
        },
        134 => {
            happyShift(action_111)
        },
        _ => {
            happyShift(action_111)
        },
    }
}

pub fn action_2(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        180 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        187 => {
            happyShift(action_26)
        },
        189 => {
            happyShift(action_26)
        },
        191 => {
            happyShift(action_26)
        },
        194 => {
            happyShift(action_26)
        },
        196 => {
            happyShift(action_26)
        },
        197 => {
            happyShift(action_26)
        },
        203 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        205 => {
            happyShift(action_26)
        },
        206 => {
            happyShift(action_26)
        },
        217 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        224 => {
            happyShift(action_26)
        },
        232 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        12 => {
            happyShift(action_26)
        },
        13 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        22 => {
            happyShift(action_26)
        },
        23 => {
            happyShift(action_26)
        },
        24 => {
            happyShift(action_26)
        },
        25 => {
            happyShift(action_26)
        },
        26 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_3(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_4(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        8 => {
            happyGoto(action_5)
        },
        _ => {
            happyGoto(action_5)
        },
    }
}

pub fn action_5(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_111)
        },
        150 => {
            happyShift(action_111)
        },
        180 => {
            happyShift(action_111)
        },
        185 => {
            happyShift(action_111)
        },
        187 => {
            happyShift(action_111)
        },
        188 => {
            happyShift(action_111)
        },
        190 => {
            happyShift(action_111)
        },
        192 => {
            happyShift(action_111)
        },
        195 => {
            happyShift(action_111)
        },
        198 => {
            happyShift(action_111)
        },
        200 => {
            happyShift(action_111)
        },
        201 => {
            happyShift(action_111)
        },
        202 => {
            happyShift(action_111)
        },
        207 => {
            happyShift(action_111)
        },
        208 => {
            happyShift(action_111)
        },
        209 => {
            happyShift(action_111)
        },
        210 => {
            happyShift(action_111)
        },
        212 => {
            happyShift(action_111)
        },
        215 => {
            happyShift(action_111)
        },
        218 => {
            happyShift(action_111)
        },
        219 => {
            happyShift(action_111)
        },
        221 => {
            happyShift(action_111)
        },
        222 => {
            happyShift(action_111)
        },
        223 => {
            happyShift(action_111)
        },
        225 => {
            happyShift(action_111)
        },
        226 => {
            happyShift(action_111)
        },
        227 => {
            happyShift(action_111)
        },
        228 => {
            happyShift(action_111)
        },
        229 => {
            happyShift(action_111)
        },
        230 => {
            happyShift(action_111)
        },
        237 => {
            happyShift(action_111)
        },
        238 => {
            happyShift(action_111)
        },
        239 => {
            happyShift(action_111)
        },
        240 => {
            happyShift(action_111)
        },
        247 => {
            happyShift(action_111)
        },
        9 => {
            happyShift(action_111)
        },
        10 => {
            happyShift(action_111)
        },
        11 => {
            happyShift(action_111)
        },
        32 => {
            happyShift(action_111)
        },
        34 => {
            happyShift(action_111)
        },
        36 => {
            happyShift(action_111)
        },
        37 => {
            happyShift(action_111)
        },
        38 => {
            happyShift(action_111)
        },
        40 => {
            happyShift(action_111)
        },
        41 => {
            happyShift(action_111)
        },
        42 => {
            happyShift(action_111)
        },
        43 => {
            happyShift(action_111)
        },
        44 => {
            happyShift(action_111)
        },
        45 => {
            happyShift(action_111)
        },
        46 => {
            happyShift(action_111)
        },
        47 => {
            happyShift(action_111)
        },
        48 => {
            happyShift(action_111)
        },
        49 => {
            happyShift(action_111)
        },
        50 => {
            happyShift(action_111)
        },
        51 => {
            happyShift(action_111)
        },
        52 => {
            happyShift(action_111)
        },
        53 => {
            happyShift(action_111)
        },
        54 => {
            happyShift(action_111)
        },
        61 => {
            happyShift(action_111)
        },
        65 => {
            happyShift(action_111)
        },
        75 => {
            happyShift(action_111)
        },
        76 => {
            happyShift(action_111)
        },
        77 => {
            happyShift(action_111)
        },
        78 => {
            happyShift(action_111)
        },
        79 => {
            happyShift(action_111)
        },
        80 => {
            happyShift(action_111)
        },
        81 => {
            happyShift(action_111)
        },
        132 => {
            happyShift(action_111)
        },
        133 => {
            happyShift(action_111)
        },
        134 => {
            happyShift(action_111)
        },
        _ => {
            happyShift(action_111)
        },
    }
}

pub fn action_6(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_376
}

pub fn action_7(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_327)
        },
        140 => {
            happyShift(action_327)
        },
        142 => {
            happyShift(action_327)
        },
        143 => {
            happyShift(action_327)
        },
        146 => {
            happyShift(action_327)
        },
        147 => {
            happyShift(action_327)
        },
        _ => {
            happyShift(action_327)
        },
    }
}

pub fn action_8(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        168 => {
            happyShift(action_316)
        },
        169 => {
            happyShift(action_316)
        },
        170 => {
            happyShift(action_316)
        },
        171 => {
            happyShift(action_316)
        },
        172 => {
            happyShift(action_316)
        },
        173 => {
            happyShift(action_316)
        },
        174 => {
            happyShift(action_316)
        },
        175 => {
            happyShift(action_316)
        },
        176 => {
            happyShift(action_316)
        },
        177 => {
            happyShift(action_316)
        },
        178 => {
            happyShift(action_316)
        },
        121 => {
            happyShift(action_316)
        },
        _ => {
            happyShift(action_316)
        },
    }
}

pub fn action_9(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_10(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_408
}

pub fn action_11(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        150 => {
            happyShift(action_311)
        },
        151 => {
            happyShift(action_311)
        },
        152 => {
            happyShift(action_311)
        },
        _ => {
            happyShift(action_311)
        },
    }
}

pub fn action_12(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        148 => {
            happyShift(action_309)
        },
        149 => {
            happyShift(action_309)
        },
        _ => {
            happyShift(action_309)
        },
    }
}

pub fn action_13(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        154 => {
            happyShift(action_307)
        },
        155 => {
            happyShift(action_307)
        },
        _ => {
            happyShift(action_307)
        },
    }
}

pub fn action_14(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        156 => {
            happyShift(action_303)
        },
        157 => {
            happyShift(action_303)
        },
        158 => {
            happyShift(action_303)
        },
        159 => {
            happyShift(action_303)
        },
        _ => {
            happyShift(action_303)
        },
    }
}

pub fn action_15(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        160 => {
            happyShift(action_301)
        },
        161 => {
            happyShift(action_301)
        },
        _ => {
            happyShift(action_301)
        },
    }
}

pub fn action_16(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        153 => {
            happyShift(action_300)
        },
        _ => {
            happyShift(action_300)
        },
    }
}

pub fn action_17(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        162 => {
            happyShift(action_299)
        },
        _ => {
            happyShift(action_299)
        },
    }
}

pub fn action_18(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        163 => {
            happyShift(action_298)
        },
        _ => {
            happyShift(action_298)
        },
    }
}

pub fn action_19(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        164 => {
            happyShift(action_297)
        },
        _ => {
            happyShift(action_297)
        },
    }
}

pub fn action_20(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        165 => {
            happyShift(action_295)
        },
        166 => {
            happyShift(action_295)
        },
        _ => {
            happyShift(action_295)
        },
    }
}

pub fn action_21(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_439
}

pub fn action_22(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_294)
        },
        _ => {
            happyShift(action_294)
        },
    }
}

pub fn action_23(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        247 => {
            happyAccept
        },
        _ => {
            happyAccept
        },
    }
}

pub fn action_24(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_361
}

pub fn action_25(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_362
}

pub fn action_26(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        190 => {
            happyShift(action_26)
        },
        192 => {
            happyShift(action_26)
        },
        195 => {
            happyShift(action_26)
        },
        198 => {
            happyShift(action_26)
        },
        200 => {
            happyShift(action_26)
        },
        202 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        208 => {
            happyShift(action_26)
        },
        209 => {
            happyShift(action_26)
        },
        210 => {
            happyShift(action_26)
        },
        218 => {
            happyShift(action_26)
        },
        219 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        223 => {
            happyShift(action_26)
        },
        226 => {
            happyShift(action_26)
        },
        228 => {
            happyShift(action_26)
        },
        229 => {
            happyShift(action_26)
        },
        230 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        44 => {
            happyShift(action_26)
        },
        45 => {
            happyShift(action_26)
        },
        47 => {
            happyShift(action_26)
        },
        49 => {
            happyShift(action_26)
        },
        51 => {
            happyShift(action_26)
        },
        52 => {
            happyShift(action_26)
        },
        53 => {
            happyShift(action_26)
        },
        54 => {
            happyShift(action_26)
        },
        61 => {
            happyShift(action_26)
        },
        65 => {
            happyShift(action_26)
        },
        86 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_27(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_405
}

pub fn action_28(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_404
}

pub fn action_29(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_272)
        },
        144 => {
            happyShift(action_272)
        },
        145 => {
            happyShift(action_272)
        },
        146 => {
            happyShift(action_272)
        },
        147 => {
            happyShift(action_272)
        },
        148 => {
            happyShift(action_272)
        },
        149 => {
            happyShift(action_272)
        },
        150 => {
            happyShift(action_272)
        },
        153 => {
            happyShift(action_272)
        },
        164 => {
            happyShift(action_272)
        },
        184 => {
            happyShift(action_272)
        },
        204 => {
            happyShift(action_272)
        },
        220 => {
            happyShift(action_272)
        },
        233 => {
            happyShift(action_272)
        },
        234 => {
            happyShift(action_272)
        },
        235 => {
            happyShift(action_272)
        },
        236 => {
            happyShift(action_272)
        },
        237 => {
            happyShift(action_272)
        },
        240 => {
            happyShift(action_272)
        },
        241 => {
            happyShift(action_272)
        },
        242 => {
            happyShift(action_272)
        },
        243 => {
            happyShift(action_272)
        },
        244 => {
            happyShift(action_272)
        },
        245 => {
            happyShift(action_272)
        },
        100 => {
            happyShift(action_272)
        },
        104 => {
            happyShift(action_272)
        },
        106 => {
            happyShift(action_272)
        },
        107 => {
            happyShift(action_272)
        },
        127 => {
            happyShift(action_272)
        },
        128 => {
            happyShift(action_272)
        },
        _ => {
            happyShift(action_272)
        },
    }
}

pub fn action_30(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_272)
        },
        144 => {
            happyShift(action_272)
        },
        145 => {
            happyShift(action_272)
        },
        146 => {
            happyShift(action_272)
        },
        147 => {
            happyShift(action_272)
        },
        148 => {
            happyShift(action_272)
        },
        149 => {
            happyShift(action_272)
        },
        150 => {
            happyShift(action_272)
        },
        153 => {
            happyShift(action_272)
        },
        164 => {
            happyShift(action_272)
        },
        184 => {
            happyShift(action_272)
        },
        204 => {
            happyShift(action_272)
        },
        220 => {
            happyShift(action_272)
        },
        233 => {
            happyShift(action_272)
        },
        234 => {
            happyShift(action_272)
        },
        235 => {
            happyShift(action_272)
        },
        236 => {
            happyShift(action_272)
        },
        237 => {
            happyShift(action_272)
        },
        240 => {
            happyShift(action_272)
        },
        241 => {
            happyShift(action_272)
        },
        242 => {
            happyShift(action_272)
        },
        243 => {
            happyShift(action_272)
        },
        244 => {
            happyShift(action_272)
        },
        245 => {
            happyShift(action_272)
        },
        100 => {
            happyShift(action_272)
        },
        104 => {
            happyShift(action_272)
        },
        106 => {
            happyShift(action_272)
        },
        107 => {
            happyShift(action_272)
        },
        127 => {
            happyShift(action_272)
        },
        128 => {
            happyShift(action_272)
        },
        _ => {
            happyShift(action_272)
        },
    }
}

pub fn action_31(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_402
}

pub fn action_32(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_403
}

pub fn action_33(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_401
}

pub fn action_34(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_400
}

pub fn action_35(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        237 => {
            happyShift(action_254)
        },
        238 => {
            happyShift(action_254)
        },
        131 => {
            happyShift(action_254)
        },
        _ => {
            happyShift(action_254)
        },
    }
}

pub fn action_36(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_281)
        },
        144 => {
            happyShift(action_281)
        },
        145 => {
            happyShift(action_281)
        },
        146 => {
            happyShift(action_281)
        },
        147 => {
            happyShift(action_281)
        },
        148 => {
            happyShift(action_281)
        },
        149 => {
            happyShift(action_281)
        },
        150 => {
            happyShift(action_281)
        },
        153 => {
            happyShift(action_281)
        },
        164 => {
            happyShift(action_281)
        },
        184 => {
            happyShift(action_281)
        },
        204 => {
            happyShift(action_281)
        },
        220 => {
            happyShift(action_281)
        },
        233 => {
            happyShift(action_281)
        },
        234 => {
            happyShift(action_281)
        },
        235 => {
            happyShift(action_281)
        },
        236 => {
            happyShift(action_281)
        },
        237 => {
            happyShift(action_281)
        },
        240 => {
            happyShift(action_281)
        },
        241 => {
            happyShift(action_281)
        },
        242 => {
            happyShift(action_281)
        },
        243 => {
            happyShift(action_281)
        },
        244 => {
            happyShift(action_281)
        },
        245 => {
            happyShift(action_281)
        },
        100 => {
            happyShift(action_281)
        },
        104 => {
            happyShift(action_281)
        },
        106 => {
            happyShift(action_281)
        },
        107 => {
            happyShift(action_281)
        },
        127 => {
            happyShift(action_281)
        },
        128 => {
            happyShift(action_281)
        },
        _ => {
            happyShift(action_281)
        },
    }
}

pub fn action_37(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_279)
        },
        _ => {
            happyShift(action_279)
        },
    }
}

pub fn action_38(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_278)
        },
        144 => {
            happyShift(action_278)
        },
        145 => {
            happyShift(action_278)
        },
        146 => {
            happyShift(action_278)
        },
        147 => {
            happyShift(action_278)
        },
        148 => {
            happyShift(action_278)
        },
        149 => {
            happyShift(action_278)
        },
        150 => {
            happyShift(action_278)
        },
        153 => {
            happyShift(action_278)
        },
        164 => {
            happyShift(action_278)
        },
        184 => {
            happyShift(action_278)
        },
        204 => {
            happyShift(action_278)
        },
        220 => {
            happyShift(action_278)
        },
        233 => {
            happyShift(action_278)
        },
        234 => {
            happyShift(action_278)
        },
        235 => {
            happyShift(action_278)
        },
        236 => {
            happyShift(action_278)
        },
        237 => {
            happyShift(action_278)
        },
        240 => {
            happyShift(action_278)
        },
        241 => {
            happyShift(action_278)
        },
        242 => {
            happyShift(action_278)
        },
        243 => {
            happyShift(action_278)
        },
        244 => {
            happyShift(action_278)
        },
        245 => {
            happyShift(action_278)
        },
        100 => {
            happyShift(action_278)
        },
        104 => {
            happyShift(action_278)
        },
        106 => {
            happyShift(action_278)
        },
        107 => {
            happyShift(action_278)
        },
        127 => {
            happyShift(action_278)
        },
        128 => {
            happyShift(action_278)
        },
        _ => {
            happyShift(action_278)
        },
    }
}

pub fn action_39(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_462
}

pub fn action_40(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_461
}

pub fn action_41(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_463
}

pub fn action_42(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        236 => {
            happyShift(action_276)
        },
        129 => {
            happyShift(action_276)
        },
        _ => {
            happyShift(action_276)
        },
    }
}

pub fn action_43(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_360
}

pub fn action_44(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_45(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_272)
        },
        144 => {
            happyShift(action_272)
        },
        145 => {
            happyShift(action_272)
        },
        146 => {
            happyShift(action_272)
        },
        147 => {
            happyShift(action_272)
        },
        148 => {
            happyShift(action_272)
        },
        149 => {
            happyShift(action_272)
        },
        150 => {
            happyShift(action_272)
        },
        153 => {
            happyShift(action_272)
        },
        164 => {
            happyShift(action_272)
        },
        184 => {
            happyShift(action_272)
        },
        204 => {
            happyShift(action_272)
        },
        220 => {
            happyShift(action_272)
        },
        233 => {
            happyShift(action_272)
        },
        234 => {
            happyShift(action_272)
        },
        235 => {
            happyShift(action_272)
        },
        236 => {
            happyShift(action_272)
        },
        237 => {
            happyShift(action_272)
        },
        240 => {
            happyShift(action_272)
        },
        241 => {
            happyShift(action_272)
        },
        242 => {
            happyShift(action_272)
        },
        243 => {
            happyShift(action_272)
        },
        244 => {
            happyShift(action_272)
        },
        245 => {
            happyShift(action_272)
        },
        100 => {
            happyShift(action_272)
        },
        104 => {
            happyShift(action_272)
        },
        106 => {
            happyShift(action_272)
        },
        107 => {
            happyShift(action_272)
        },
        127 => {
            happyShift(action_272)
        },
        128 => {
            happyShift(action_272)
        },
        _ => {
            happyShift(action_272)
        },
    }
}

pub fn action_46(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_272)
        },
        144 => {
            happyShift(action_272)
        },
        145 => {
            happyShift(action_272)
        },
        146 => {
            happyShift(action_272)
        },
        147 => {
            happyShift(action_272)
        },
        148 => {
            happyShift(action_272)
        },
        149 => {
            happyShift(action_272)
        },
        150 => {
            happyShift(action_272)
        },
        153 => {
            happyShift(action_272)
        },
        164 => {
            happyShift(action_272)
        },
        184 => {
            happyShift(action_272)
        },
        204 => {
            happyShift(action_272)
        },
        220 => {
            happyShift(action_272)
        },
        233 => {
            happyShift(action_272)
        },
        234 => {
            happyShift(action_272)
        },
        235 => {
            happyShift(action_272)
        },
        236 => {
            happyShift(action_272)
        },
        237 => {
            happyShift(action_272)
        },
        240 => {
            happyShift(action_272)
        },
        241 => {
            happyShift(action_272)
        },
        242 => {
            happyShift(action_272)
        },
        243 => {
            happyShift(action_272)
        },
        244 => {
            happyShift(action_272)
        },
        245 => {
            happyShift(action_272)
        },
        100 => {
            happyShift(action_272)
        },
        104 => {
            happyShift(action_272)
        },
        106 => {
            happyShift(action_272)
        },
        107 => {
            happyShift(action_272)
        },
        127 => {
            happyShift(action_272)
        },
        128 => {
            happyShift(action_272)
        },
        _ => {
            happyShift(action_272)
        },
    }
}

pub fn action_47(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_270)
        },
        _ => {
            happyShift(action_270)
        },
    }
}

pub fn action_48(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_269)
        },
        _ => {
            happyShift(action_269)
        },
    }
}

pub fn action_49(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_268)
        },
        _ => {
            happyShift(action_268)
        },
    }
}

pub fn action_50(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        247 => {
            happyAccept
        },
        _ => {
            happyAccept
        },
    }
}

pub fn action_51(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_27
}

pub fn action_52(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_28
}

pub fn action_53(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_29
}

pub fn action_54(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_30
}

pub fn action_55(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_31
}

pub fn action_56(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_32
}

pub fn action_57(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_33
}

pub fn action_58(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_267)
        },
        _ => {
            happyShift(action_267)
        },
    }
}

pub fn action_59(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        167 => {
            happyShift(action_266)
        },
        _ => {
            happyShift(action_266)
        },
    }
}

pub fn action_60(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_56
}

pub fn action_61(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        15 => {
            happyGoto(action_265)
        },
        _ => {
            happyGoto(action_265)
        },
    }
}

pub fn action_62(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        186 => {
            happyShift(action_171)
        },
        193 => {
            happyShift(action_171)
        },
        213 => {
            happyShift(action_171)
        },
        214 => {
            happyShift(action_171)
        },
        216 => {
            happyShift(action_171)
        },
        231 => {
            happyShift(action_171)
        },
        27 => {
            happyShift(action_171)
        },
        64 => {
            happyShift(action_171)
        },
        _ => {
            happyShift(action_171)
        },
    }
}

pub fn action_63(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_262)
        },
        _ => {
            happyShift(action_262)
        },
    }
}

pub fn action_64(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        126 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_65(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_258)
        },
        _ => {
            happyShift(action_258)
        },
    }
}

pub fn action_66(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        167 => {
            happyShift(action_257)
        },
        _ => {
            happyShift(action_257)
        },
    }
}

pub fn action_67(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        180 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        187 => {
            happyShift(action_26)
        },
        189 => {
            happyShift(action_26)
        },
        191 => {
            happyShift(action_26)
        },
        194 => {
            happyShift(action_26)
        },
        196 => {
            happyShift(action_26)
        },
        197 => {
            happyShift(action_26)
        },
        203 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        205 => {
            happyShift(action_26)
        },
        206 => {
            happyShift(action_26)
        },
        217 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        224 => {
            happyShift(action_26)
        },
        232 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        12 => {
            happyShift(action_26)
        },
        13 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        22 => {
            happyShift(action_26)
        },
        23 => {
            happyShift(action_26)
        },
        24 => {
            happyShift(action_26)
        },
        25 => {
            happyShift(action_26)
        },
        26 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_68(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_255)
        },
        _ => {
            happyShift(action_255)
        },
    }
}

pub fn action_69(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        150 => {
            happyShift(action_253)
        },
        237 => {
            happyShift(action_253)
        },
        238 => {
            happyShift(action_253)
        },
        131 => {
            happyShift(action_253)
        },
        _ => {
            happyShift(action_253)
        },
    }
}

pub fn action_70(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_251)
        },
        _ => {
            happyShift(action_251)
        },
    }
}

pub fn action_71(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        124 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_72(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_248)
        },
        _ => {
            happyShift(action_248)
        },
    }
}

pub fn action_73(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_247)
        },
        _ => {
            happyShift(action_247)
        },
    }
}

pub fn action_74(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        167 => {
            happyReduce_469
        },
        _ => {
            happyReduce_469
        },
    }
}

pub fn action_75(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_470
}

pub fn action_76(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        247 => {
            happyAccept
        },
        _ => {
            happyAccept
        },
    }
}

pub fn action_77(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_8
}

pub fn action_78(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_79(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_9
}

pub fn action_80(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_244)
        },
        180 => {
            happyShift(action_244)
        },
        _ => {
            happyShift(action_244)
        },
    }
}

pub fn action_81(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_242)
        },
        180 => {
            happyShift(action_242)
        },
        _ => {
            happyShift(action_242)
        },
    }
}

pub fn action_82(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_227)
        },
        150 => {
            happyShift(action_227)
        },
        237 => {
            happyShift(action_227)
        },
        238 => {
            happyShift(action_227)
        },
        11 => {
            happyShift(action_227)
        },
        66 => {
            happyShift(action_227)
        },
        68 => {
            happyShift(action_227)
        },
        69 => {
            happyShift(action_227)
        },
        70 => {
            happyShift(action_227)
        },
        71 => {
            happyShift(action_227)
        },
        72 => {
            happyShift(action_227)
        },
        73 => {
            happyShift(action_227)
        },
        75 => {
            happyShift(action_227)
        },
        76 => {
            happyShift(action_227)
        },
        77 => {
            happyShift(action_227)
        },
        78 => {
            happyShift(action_227)
        },
        79 => {
            happyShift(action_227)
        },
        80 => {
            happyShift(action_227)
        },
        81 => {
            happyShift(action_227)
        },
        _ => {
            happyShift(action_227)
        },
    }
}

pub fn action_83(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_111)
        },
        150 => {
            happyShift(action_111)
        },
        185 => {
            happyShift(action_111)
        },
        186 => {
            happyShift(action_111)
        },
        188 => {
            happyShift(action_111)
        },
        190 => {
            happyShift(action_111)
        },
        192 => {
            happyShift(action_111)
        },
        193 => {
            happyShift(action_111)
        },
        195 => {
            happyShift(action_111)
        },
        198 => {
            happyShift(action_111)
        },
        200 => {
            happyShift(action_111)
        },
        201 => {
            happyShift(action_111)
        },
        202 => {
            happyShift(action_111)
        },
        207 => {
            happyShift(action_111)
        },
        208 => {
            happyShift(action_111)
        },
        209 => {
            happyShift(action_111)
        },
        210 => {
            happyShift(action_111)
        },
        212 => {
            happyShift(action_111)
        },
        213 => {
            happyShift(action_111)
        },
        214 => {
            happyShift(action_111)
        },
        215 => {
            happyShift(action_111)
        },
        216 => {
            happyShift(action_111)
        },
        218 => {
            happyShift(action_111)
        },
        219 => {
            happyShift(action_111)
        },
        221 => {
            happyShift(action_111)
        },
        223 => {
            happyShift(action_111)
        },
        225 => {
            happyShift(action_111)
        },
        226 => {
            happyShift(action_111)
        },
        227 => {
            happyShift(action_111)
        },
        228 => {
            happyShift(action_111)
        },
        229 => {
            happyShift(action_111)
        },
        230 => {
            happyShift(action_111)
        },
        231 => {
            happyShift(action_111)
        },
        237 => {
            happyShift(action_111)
        },
        238 => {
            happyShift(action_111)
        },
        239 => {
            happyShift(action_111)
        },
        11 => {
            happyShift(action_111)
        },
        39 => {
            happyShift(action_111)
        },
        41 => {
            happyShift(action_111)
        },
        42 => {
            happyShift(action_111)
        },
        43 => {
            happyShift(action_111)
        },
        45 => {
            happyShift(action_111)
        },
        52 => {
            happyShift(action_111)
        },
        53 => {
            happyShift(action_111)
        },
        54 => {
            happyShift(action_111)
        },
        61 => {
            happyShift(action_111)
        },
        64 => {
            happyShift(action_111)
        },
        75 => {
            happyShift(action_111)
        },
        76 => {
            happyShift(action_111)
        },
        77 => {
            happyShift(action_111)
        },
        78 => {
            happyShift(action_111)
        },
        79 => {
            happyShift(action_111)
        },
        80 => {
            happyShift(action_111)
        },
        81 => {
            happyShift(action_111)
        },
        134 => {
            happyShift(action_111)
        },
        _ => {
            happyShift(action_111)
        },
    }
}

pub fn action_84(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_104
}

pub fn action_85(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_114
}

pub fn action_86(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_115
}

pub fn action_87(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_116
}

pub fn action_88(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_227)
        },
        150 => {
            happyShift(action_227)
        },
        237 => {
            happyShift(action_227)
        },
        238 => {
            happyShift(action_227)
        },
        11 => {
            happyShift(action_227)
        },
        66 => {
            happyShift(action_227)
        },
        68 => {
            happyShift(action_227)
        },
        69 => {
            happyShift(action_227)
        },
        70 => {
            happyShift(action_227)
        },
        71 => {
            happyShift(action_227)
        },
        72 => {
            happyShift(action_227)
        },
        73 => {
            happyShift(action_227)
        },
        75 => {
            happyShift(action_227)
        },
        76 => {
            happyShift(action_227)
        },
        77 => {
            happyShift(action_227)
        },
        78 => {
            happyShift(action_227)
        },
        79 => {
            happyShift(action_227)
        },
        80 => {
            happyShift(action_227)
        },
        81 => {
            happyShift(action_227)
        },
        _ => {
            happyShift(action_227)
        },
    }
}

pub fn action_89(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_147
}

pub fn action_90(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        185 => {
            happyShift(action_113)
        },
        186 => {
            happyShift(action_113)
        },
        188 => {
            happyShift(action_113)
        },
        190 => {
            happyShift(action_113)
        },
        192 => {
            happyShift(action_113)
        },
        193 => {
            happyShift(action_113)
        },
        195 => {
            happyShift(action_113)
        },
        198 => {
            happyShift(action_113)
        },
        201 => {
            happyShift(action_113)
        },
        202 => {
            happyShift(action_113)
        },
        207 => {
            happyShift(action_113)
        },
        208 => {
            happyShift(action_113)
        },
        209 => {
            happyShift(action_113)
        },
        210 => {
            happyShift(action_113)
        },
        212 => {
            happyShift(action_113)
        },
        213 => {
            happyShift(action_113)
        },
        214 => {
            happyShift(action_113)
        },
        215 => {
            happyShift(action_113)
        },
        216 => {
            happyShift(action_113)
        },
        218 => {
            happyShift(action_113)
        },
        219 => {
            happyShift(action_113)
        },
        221 => {
            happyShift(action_113)
        },
        225 => {
            happyShift(action_113)
        },
        227 => {
            happyShift(action_113)
        },
        229 => {
            happyShift(action_113)
        },
        230 => {
            happyShift(action_113)
        },
        231 => {
            happyShift(action_113)
        },
        239 => {
            happyShift(action_113)
        },
        39 => {
            happyShift(action_113)
        },
        41 => {
            happyShift(action_113)
        },
        42 => {
            happyShift(action_113)
        },
        43 => {
            happyShift(action_113)
        },
        45 => {
            happyShift(action_113)
        },
        64 => {
            happyShift(action_113)
        },
        134 => {
            happyShift(action_113)
        },
        _ => {
            happyShift(action_113)
        },
    }
}

pub fn action_91(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        186 => {
            happyShift(action_171)
        },
        188 => {
            happyShift(action_171)
        },
        190 => {
            happyShift(action_171)
        },
        192 => {
            happyShift(action_171)
        },
        193 => {
            happyShift(action_171)
        },
        195 => {
            happyShift(action_171)
        },
        198 => {
            happyShift(action_171)
        },
        201 => {
            happyShift(action_171)
        },
        202 => {
            happyShift(action_171)
        },
        208 => {
            happyShift(action_171)
        },
        209 => {
            happyShift(action_171)
        },
        210 => {
            happyShift(action_171)
        },
        213 => {
            happyShift(action_171)
        },
        214 => {
            happyShift(action_171)
        },
        215 => {
            happyShift(action_171)
        },
        216 => {
            happyShift(action_171)
        },
        218 => {
            happyShift(action_171)
        },
        219 => {
            happyShift(action_171)
        },
        221 => {
            happyShift(action_171)
        },
        225 => {
            happyShift(action_171)
        },
        227 => {
            happyShift(action_171)
        },
        229 => {
            happyShift(action_171)
        },
        230 => {
            happyShift(action_171)
        },
        231 => {
            happyShift(action_171)
        },
        239 => {
            happyShift(action_171)
        },
        41 => {
            happyShift(action_171)
        },
        45 => {
            happyShift(action_171)
        },
        64 => {
            happyShift(action_171)
        },
        134 => {
            happyShift(action_171)
        },
        _ => {
            happyShift(action_171)
        },
    }
}

pub fn action_92(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_209)
        },
        185 => {
            happyShift(action_209)
        },
        186 => {
            happyShift(action_209)
        },
        188 => {
            happyShift(action_209)
        },
        193 => {
            happyShift(action_209)
        },
        201 => {
            happyShift(action_209)
        },
        207 => {
            happyShift(action_209)
        },
        212 => {
            happyShift(action_209)
        },
        213 => {
            happyShift(action_209)
        },
        214 => {
            happyShift(action_209)
        },
        215 => {
            happyShift(action_209)
        },
        216 => {
            happyShift(action_209)
        },
        221 => {
            happyShift(action_209)
        },
        225 => {
            happyShift(action_209)
        },
        227 => {
            happyShift(action_209)
        },
        231 => {
            happyShift(action_209)
        },
        239 => {
            happyShift(action_209)
        },
        39 => {
            happyShift(action_209)
        },
        41 => {
            happyShift(action_209)
        },
        42 => {
            happyShift(action_209)
        },
        43 => {
            happyShift(action_209)
        },
        64 => {
            happyShift(action_209)
        },
        134 => {
            happyShift(action_209)
        },
        _ => {
            happyShift(action_209)
        },
    }
}

pub fn action_93(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_206)
        },
        186 => {
            happyShift(action_206)
        },
        188 => {
            happyShift(action_206)
        },
        193 => {
            happyShift(action_206)
        },
        201 => {
            happyShift(action_206)
        },
        213 => {
            happyShift(action_206)
        },
        214 => {
            happyShift(action_206)
        },
        215 => {
            happyShift(action_206)
        },
        216 => {
            happyShift(action_206)
        },
        221 => {
            happyShift(action_206)
        },
        225 => {
            happyShift(action_206)
        },
        227 => {
            happyShift(action_206)
        },
        231 => {
            happyShift(action_206)
        },
        239 => {
            happyShift(action_206)
        },
        41 => {
            happyShift(action_206)
        },
        64 => {
            happyShift(action_206)
        },
        134 => {
            happyShift(action_206)
        },
        _ => {
            happyShift(action_206)
        },
    }
}

pub fn action_94(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        185 => {
            happyShift(action_113)
        },
        186 => {
            happyShift(action_113)
        },
        188 => {
            happyShift(action_113)
        },
        193 => {
            happyShift(action_113)
        },
        201 => {
            happyShift(action_113)
        },
        207 => {
            happyShift(action_113)
        },
        212 => {
            happyShift(action_113)
        },
        213 => {
            happyShift(action_113)
        },
        214 => {
            happyShift(action_113)
        },
        215 => {
            happyShift(action_113)
        },
        216 => {
            happyShift(action_113)
        },
        221 => {
            happyShift(action_113)
        },
        225 => {
            happyShift(action_113)
        },
        227 => {
            happyShift(action_113)
        },
        231 => {
            happyShift(action_113)
        },
        239 => {
            happyShift(action_113)
        },
        39 => {
            happyShift(action_113)
        },
        41 => {
            happyShift(action_113)
        },
        42 => {
            happyShift(action_113)
        },
        43 => {
            happyShift(action_113)
        },
        64 => {
            happyShift(action_113)
        },
        134 => {
            happyShift(action_113)
        },
        _ => {
            happyShift(action_113)
        },
    }
}

pub fn action_95(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        186 => {
            happyShift(action_171)
        },
        188 => {
            happyShift(action_171)
        },
        193 => {
            happyShift(action_171)
        },
        201 => {
            happyShift(action_171)
        },
        213 => {
            happyShift(action_171)
        },
        214 => {
            happyShift(action_171)
        },
        215 => {
            happyShift(action_171)
        },
        216 => {
            happyShift(action_171)
        },
        221 => {
            happyShift(action_171)
        },
        225 => {
            happyShift(action_171)
        },
        227 => {
            happyShift(action_171)
        },
        231 => {
            happyShift(action_171)
        },
        239 => {
            happyShift(action_171)
        },
        41 => {
            happyShift(action_171)
        },
        64 => {
            happyShift(action_171)
        },
        134 => {
            happyShift(action_171)
        },
        _ => {
            happyShift(action_171)
        },
    }
}

pub fn action_96(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_158
}

pub fn action_97(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_184
}

pub fn action_98(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_99(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_185
}

pub fn action_100(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_111)
        },
        150 => {
            happyShift(action_111)
        },
        185 => {
            happyShift(action_111)
        },
        186 => {
            happyShift(action_111)
        },
        188 => {
            happyShift(action_111)
        },
        190 => {
            happyShift(action_111)
        },
        192 => {
            happyShift(action_111)
        },
        193 => {
            happyShift(action_111)
        },
        195 => {
            happyShift(action_111)
        },
        198 => {
            happyShift(action_111)
        },
        200 => {
            happyShift(action_111)
        },
        201 => {
            happyShift(action_111)
        },
        202 => {
            happyShift(action_111)
        },
        207 => {
            happyShift(action_111)
        },
        208 => {
            happyShift(action_111)
        },
        209 => {
            happyShift(action_111)
        },
        210 => {
            happyShift(action_111)
        },
        212 => {
            happyShift(action_111)
        },
        213 => {
            happyShift(action_111)
        },
        214 => {
            happyShift(action_111)
        },
        215 => {
            happyShift(action_111)
        },
        216 => {
            happyShift(action_111)
        },
        218 => {
            happyShift(action_111)
        },
        219 => {
            happyShift(action_111)
        },
        221 => {
            happyShift(action_111)
        },
        223 => {
            happyShift(action_111)
        },
        225 => {
            happyShift(action_111)
        },
        226 => {
            happyShift(action_111)
        },
        227 => {
            happyShift(action_111)
        },
        228 => {
            happyShift(action_111)
        },
        229 => {
            happyShift(action_111)
        },
        230 => {
            happyShift(action_111)
        },
        231 => {
            happyShift(action_111)
        },
        237 => {
            happyShift(action_111)
        },
        238 => {
            happyShift(action_111)
        },
        239 => {
            happyShift(action_111)
        },
        11 => {
            happyShift(action_111)
        },
        40 => {
            happyShift(action_111)
        },
        41 => {
            happyShift(action_111)
        },
        42 => {
            happyShift(action_111)
        },
        43 => {
            happyShift(action_111)
        },
        45 => {
            happyShift(action_111)
        },
        52 => {
            happyShift(action_111)
        },
        53 => {
            happyShift(action_111)
        },
        54 => {
            happyShift(action_111)
        },
        61 => {
            happyShift(action_111)
        },
        64 => {
            happyShift(action_111)
        },
        75 => {
            happyShift(action_111)
        },
        76 => {
            happyShift(action_111)
        },
        77 => {
            happyShift(action_111)
        },
        78 => {
            happyShift(action_111)
        },
        79 => {
            happyShift(action_111)
        },
        80 => {
            happyShift(action_111)
        },
        81 => {
            happyShift(action_111)
        },
        133 => {
            happyShift(action_111)
        },
        134 => {
            happyShift(action_111)
        },
        _ => {
            happyShift(action_111)
        },
    }
}

pub fn action_101(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_26
}

pub fn action_102(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_260
}

pub fn action_103(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_262
}

pub fn action_104(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_181)
        },
        140 => {
            happyShift(action_181)
        },
        88 => {
            happyShift(action_181)
        },
        89 => {
            happyShift(action_181)
        },
        90 => {
            happyShift(action_181)
        },
        _ => {
            happyShift(action_181)
        },
    }
}

pub fn action_105(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        33 => {
            happyGoto(action_177)
        },
        _ => {
            happyGoto(action_177)
        },
    }
}

pub fn action_106(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_275
}

pub fn action_107(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_276
}

pub fn action_108(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        186 => {
            happyShift(action_171)
        },
        193 => {
            happyShift(action_171)
        },
        213 => {
            happyShift(action_171)
        },
        214 => {
            happyShift(action_171)
        },
        216 => {
            happyShift(action_171)
        },
        231 => {
            happyShift(action_171)
        },
        64 => {
            happyShift(action_171)
        },
        _ => {
            happyShift(action_171)
        },
    }
}

pub fn action_109(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_111)
        },
        150 => {
            happyShift(action_111)
        },
        185 => {
            happyShift(action_111)
        },
        188 => {
            happyShift(action_111)
        },
        190 => {
            happyShift(action_111)
        },
        192 => {
            happyShift(action_111)
        },
        195 => {
            happyShift(action_111)
        },
        198 => {
            happyShift(action_111)
        },
        200 => {
            happyShift(action_111)
        },
        201 => {
            happyShift(action_111)
        },
        202 => {
            happyShift(action_111)
        },
        207 => {
            happyShift(action_111)
        },
        208 => {
            happyShift(action_111)
        },
        209 => {
            happyShift(action_111)
        },
        210 => {
            happyShift(action_111)
        },
        212 => {
            happyShift(action_111)
        },
        215 => {
            happyShift(action_111)
        },
        218 => {
            happyShift(action_111)
        },
        219 => {
            happyShift(action_111)
        },
        221 => {
            happyShift(action_111)
        },
        223 => {
            happyShift(action_111)
        },
        225 => {
            happyShift(action_111)
        },
        226 => {
            happyShift(action_111)
        },
        227 => {
            happyShift(action_111)
        },
        228 => {
            happyShift(action_111)
        },
        229 => {
            happyShift(action_111)
        },
        230 => {
            happyShift(action_111)
        },
        237 => {
            happyShift(action_111)
        },
        238 => {
            happyShift(action_111)
        },
        239 => {
            happyShift(action_111)
        },
        11 => {
            happyShift(action_111)
        },
        40 => {
            happyShift(action_111)
        },
        41 => {
            happyShift(action_111)
        },
        42 => {
            happyShift(action_111)
        },
        43 => {
            happyShift(action_111)
        },
        45 => {
            happyShift(action_111)
        },
        52 => {
            happyShift(action_111)
        },
        53 => {
            happyShift(action_111)
        },
        54 => {
            happyShift(action_111)
        },
        61 => {
            happyShift(action_111)
        },
        75 => {
            happyShift(action_111)
        },
        76 => {
            happyShift(action_111)
        },
        77 => {
            happyShift(action_111)
        },
        78 => {
            happyShift(action_111)
        },
        79 => {
            happyShift(action_111)
        },
        80 => {
            happyShift(action_111)
        },
        81 => {
            happyShift(action_111)
        },
        134 => {
            happyShift(action_111)
        },
        _ => {
            happyShift(action_111)
        },
    }
}

pub fn action_110(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_473
}

pub fn action_111(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_111)
        },
        150 => {
            happyShift(action_111)
        },
        237 => {
            happyShift(action_111)
        },
        239 => {
            happyShift(action_111)
        },
        76 => {
            happyShift(action_111)
        },
        77 => {
            happyShift(action_111)
        },
        78 => {
            happyShift(action_111)
        },
        80 => {
            happyShift(action_111)
        },
        81 => {
            happyShift(action_111)
        },
        133 => {
            happyShift(action_111)
        },
        134 => {
            happyShift(action_111)
        },
        _ => {
            happyShift(action_111)
        },
    }
}

pub fn action_112(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_111)
        },
        150 => {
            happyShift(action_111)
        },
        237 => {
            happyShift(action_111)
        },
        239 => {
            happyShift(action_111)
        },
        65 => {
            happyShift(action_111)
        },
        75 => {
            happyShift(action_111)
        },
        76 => {
            happyShift(action_111)
        },
        77 => {
            happyShift(action_111)
        },
        78 => {
            happyShift(action_111)
        },
        80 => {
            happyShift(action_111)
        },
        81 => {
            happyShift(action_111)
        },
        132 => {
            happyShift(action_111)
        },
        133 => {
            happyShift(action_111)
        },
        134 => {
            happyShift(action_111)
        },
        _ => {
            happyShift(action_111)
        },
    }
}

pub fn action_113(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_152)
        },
        _ => {
            happyShift(action_152)
        },
    }
}

pub fn action_114(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_151)
        },
        _ => {
            happyShift(action_151)
        },
    }
}

pub fn action_115(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_120
}

pub fn action_116(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_139
}

pub fn action_117(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_131
}

pub fn action_118(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_140
}

pub fn action_119(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_136
}

pub fn action_120(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_121(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_118
}

pub fn action_122(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_135
}

pub fn action_123(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_123
}

pub fn action_124(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_133
}

pub fn action_125(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_141
}

pub fn action_126(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_134
}

pub fn action_127(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_124
}

pub fn action_128(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_121
}

pub fn action_129(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_132
}

pub fn action_130(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_137
}

pub fn action_131(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_119
}

pub fn action_132(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_148)
        },
        _ => {
            happyShift(action_148)
        },
    }
}

pub fn action_133(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_189
}

pub fn action_134(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_117
}

pub fn action_135(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_147)
        },
        _ => {
            happyShift(action_147)
        },
    }
}

pub fn action_136(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_122
}

pub fn action_137(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_190
}

pub fn action_138(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_138
}

pub fn action_139(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_130
}

pub fn action_140(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_272
}

pub fn action_141(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_170
}

pub fn action_142(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_146)
        },
        _ => {
            happyShift(action_146)
        },
    }
}

pub fn action_143(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_111)
        },
        150 => {
            happyShift(action_111)
        },
        185 => {
            happyShift(action_111)
        },
        187 => {
            happyShift(action_111)
        },
        188 => {
            happyShift(action_111)
        },
        190 => {
            happyShift(action_111)
        },
        192 => {
            happyShift(action_111)
        },
        195 => {
            happyShift(action_111)
        },
        198 => {
            happyShift(action_111)
        },
        200 => {
            happyShift(action_111)
        },
        201 => {
            happyShift(action_111)
        },
        202 => {
            happyShift(action_111)
        },
        207 => {
            happyShift(action_111)
        },
        208 => {
            happyShift(action_111)
        },
        209 => {
            happyShift(action_111)
        },
        210 => {
            happyShift(action_111)
        },
        212 => {
            happyShift(action_111)
        },
        215 => {
            happyShift(action_111)
        },
        218 => {
            happyShift(action_111)
        },
        219 => {
            happyShift(action_111)
        },
        221 => {
            happyShift(action_111)
        },
        222 => {
            happyShift(action_111)
        },
        223 => {
            happyShift(action_111)
        },
        225 => {
            happyShift(action_111)
        },
        226 => {
            happyShift(action_111)
        },
        227 => {
            happyShift(action_111)
        },
        228 => {
            happyShift(action_111)
        },
        229 => {
            happyShift(action_111)
        },
        230 => {
            happyShift(action_111)
        },
        237 => {
            happyShift(action_111)
        },
        238 => {
            happyShift(action_111)
        },
        239 => {
            happyShift(action_111)
        },
        240 => {
            happyShift(action_111)
        },
        9 => {
            happyShift(action_111)
        },
        10 => {
            happyShift(action_111)
        },
        11 => {
            happyShift(action_111)
        },
        32 => {
            happyShift(action_111)
        },
        34 => {
            happyShift(action_111)
        },
        36 => {
            happyShift(action_111)
        },
        37 => {
            happyShift(action_111)
        },
        38 => {
            happyShift(action_111)
        },
        40 => {
            happyShift(action_111)
        },
        41 => {
            happyShift(action_111)
        },
        42 => {
            happyShift(action_111)
        },
        43 => {
            happyShift(action_111)
        },
        44 => {
            happyShift(action_111)
        },
        45 => {
            happyShift(action_111)
        },
        46 => {
            happyShift(action_111)
        },
        47 => {
            happyShift(action_111)
        },
        48 => {
            happyShift(action_111)
        },
        49 => {
            happyShift(action_111)
        },
        50 => {
            happyShift(action_111)
        },
        51 => {
            happyShift(action_111)
        },
        52 => {
            happyShift(action_111)
        },
        53 => {
            happyShift(action_111)
        },
        54 => {
            happyShift(action_111)
        },
        61 => {
            happyShift(action_111)
        },
        65 => {
            happyShift(action_111)
        },
        75 => {
            happyShift(action_111)
        },
        76 => {
            happyShift(action_111)
        },
        77 => {
            happyShift(action_111)
        },
        78 => {
            happyShift(action_111)
        },
        79 => {
            happyShift(action_111)
        },
        80 => {
            happyShift(action_111)
        },
        81 => {
            happyShift(action_111)
        },
        132 => {
            happyShift(action_111)
        },
        133 => {
            happyShift(action_111)
        },
        134 => {
            happyShift(action_111)
        },
        _ => {
            happyShift(action_111)
        },
    }
}

pub fn action_144(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        247 => {
            happyAccept
        },
        _ => {
            happyAccept
        },
    }
}

pub fn action_145(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_10
}

pub fn action_146(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_493)
        },
        _ => {
            happyShift(action_493)
        },
    }
}

pub fn action_147(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        190 => {
            happyShift(action_26)
        },
        192 => {
            happyShift(action_26)
        },
        195 => {
            happyShift(action_26)
        },
        198 => {
            happyShift(action_26)
        },
        200 => {
            happyShift(action_26)
        },
        202 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        208 => {
            happyShift(action_26)
        },
        209 => {
            happyShift(action_26)
        },
        210 => {
            happyShift(action_26)
        },
        218 => {
            happyShift(action_26)
        },
        219 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        223 => {
            happyShift(action_26)
        },
        226 => {
            happyShift(action_26)
        },
        228 => {
            happyShift(action_26)
        },
        229 => {
            happyShift(action_26)
        },
        230 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        44 => {
            happyShift(action_26)
        },
        45 => {
            happyShift(action_26)
        },
        47 => {
            happyShift(action_26)
        },
        49 => {
            happyShift(action_26)
        },
        51 => {
            happyShift(action_26)
        },
        52 => {
            happyShift(action_26)
        },
        53 => {
            happyShift(action_26)
        },
        54 => {
            happyShift(action_26)
        },
        61 => {
            happyShift(action_26)
        },
        65 => {
            happyShift(action_26)
        },
        86 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_148(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        126 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_149(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_489)
        },
        237 => {
            happyShift(action_489)
        },
        238 => {
            happyShift(action_489)
        },
        131 => {
            happyShift(action_489)
        },
        _ => {
            happyShift(action_489)
        },
    }
}

pub fn action_150(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_151(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        236 => {
            happyShift(action_42)
        },
        128 => {
            happyShift(action_42)
        },
        _ => {
            happyShift(action_42)
        },
    }
}

pub fn action_152(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        190 => {
            happyShift(action_26)
        },
        192 => {
            happyShift(action_26)
        },
        195 => {
            happyShift(action_26)
        },
        198 => {
            happyShift(action_26)
        },
        200 => {
            happyShift(action_26)
        },
        202 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        208 => {
            happyShift(action_26)
        },
        209 => {
            happyShift(action_26)
        },
        210 => {
            happyShift(action_26)
        },
        218 => {
            happyShift(action_26)
        },
        219 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        223 => {
            happyShift(action_26)
        },
        226 => {
            happyShift(action_26)
        },
        228 => {
            happyShift(action_26)
        },
        229 => {
            happyShift(action_26)
        },
        230 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        44 => {
            happyShift(action_26)
        },
        45 => {
            happyShift(action_26)
        },
        47 => {
            happyShift(action_26)
        },
        49 => {
            happyShift(action_26)
        },
        51 => {
            happyShift(action_26)
        },
        52 => {
            happyShift(action_26)
        },
        53 => {
            happyShift(action_26)
        },
        54 => {
            happyShift(action_26)
        },
        61 => {
            happyShift(action_26)
        },
        65 => {
            happyShift(action_26)
        },
        86 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        126 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_153(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_111)
        },
        150 => {
            happyShift(action_111)
        },
        186 => {
            happyShift(action_111)
        },
        193 => {
            happyShift(action_111)
        },
        213 => {
            happyShift(action_111)
        },
        214 => {
            happyShift(action_111)
        },
        216 => {
            happyShift(action_111)
        },
        231 => {
            happyShift(action_111)
        },
        237 => {
            happyShift(action_111)
        },
        239 => {
            happyShift(action_111)
        },
        64 => {
            happyShift(action_111)
        },
        75 => {
            happyShift(action_111)
        },
        76 => {
            happyShift(action_111)
        },
        77 => {
            happyShift(action_111)
        },
        78 => {
            happyShift(action_111)
        },
        80 => {
            happyShift(action_111)
        },
        81 => {
            happyShift(action_111)
        },
        133 => {
            happyShift(action_111)
        },
        134 => {
            happyShift(action_111)
        },
        _ => {
            happyShift(action_111)
        },
    }
}

pub fn action_154(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_263
}

pub fn action_155(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_277
}

pub fn action_156(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_157(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_479)
        },
        _ => {
            happyShift(action_479)
        },
    }
}

pub fn action_158(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_181)
        },
        139 => {
            happyShift(action_181)
        },
        140 => {
            happyShift(action_181)
        },
        88 => {
            happyShift(action_181)
        },
        89 => {
            happyShift(action_181)
        },
        90 => {
            happyShift(action_181)
        },
        _ => {
            happyShift(action_181)
        },
    }
}

pub fn action_159(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_477)
        },
        _ => {
            happyShift(action_477)
        },
    }
}

pub fn action_160(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_161(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_162(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_105
}

pub fn action_163(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_148
}

pub fn action_164(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_159
}

pub fn action_165(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyReduce_26
        },
        187 => {
            happyReduce_26
        },
        35 => {
            happyReduce_26
        },
        67 => {
            happyReduce_26
        },
        _ => {
            happyReduce_26
        },
    }
}

pub fn action_166(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        33 => {
            happyGoto(action_470)
        },
        _ => {
            happyGoto(action_470)
        },
    }
}

pub fn action_167(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_474
}

pub fn action_168(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_469)
        },
        _ => {
            happyShift(action_469)
        },
    }
}

pub fn action_169(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_176
}

pub fn action_170(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_227
}

pub fn action_171(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_226
}

pub fn action_172(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_221
}

pub fn action_173(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_224
}

pub fn action_174(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_225
}

pub fn action_175(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_223
}

pub fn action_176(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_222
}

pub fn action_177(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        185 => {
            happyShift(action_61)
        },
        188 => {
            happyShift(action_61)
        },
        190 => {
            happyShift(action_61)
        },
        192 => {
            happyShift(action_61)
        },
        195 => {
            happyShift(action_61)
        },
        198 => {
            happyShift(action_61)
        },
        200 => {
            happyShift(action_61)
        },
        201 => {
            happyShift(action_61)
        },
        202 => {
            happyShift(action_61)
        },
        207 => {
            happyShift(action_61)
        },
        208 => {
            happyShift(action_61)
        },
        209 => {
            happyShift(action_61)
        },
        210 => {
            happyShift(action_61)
        },
        212 => {
            happyShift(action_61)
        },
        215 => {
            happyShift(action_61)
        },
        218 => {
            happyShift(action_61)
        },
        219 => {
            happyShift(action_61)
        },
        221 => {
            happyShift(action_61)
        },
        222 => {
            happyShift(action_61)
        },
        223 => {
            happyShift(action_61)
        },
        225 => {
            happyShift(action_61)
        },
        226 => {
            happyShift(action_61)
        },
        227 => {
            happyShift(action_61)
        },
        228 => {
            happyShift(action_61)
        },
        229 => {
            happyShift(action_61)
        },
        230 => {
            happyShift(action_61)
        },
        238 => {
            happyShift(action_61)
        },
        239 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        32 => {
            happyShift(action_61)
        },
        34 => {
            happyShift(action_61)
        },
        36 => {
            happyShift(action_61)
        },
        37 => {
            happyShift(action_61)
        },
        38 => {
            happyShift(action_61)
        },
        40 => {
            happyShift(action_61)
        },
        41 => {
            happyShift(action_61)
        },
        42 => {
            happyShift(action_61)
        },
        43 => {
            happyShift(action_61)
        },
        44 => {
            happyShift(action_61)
        },
        45 => {
            happyShift(action_61)
        },
        46 => {
            happyShift(action_61)
        },
        47 => {
            happyShift(action_61)
        },
        48 => {
            happyShift(action_61)
        },
        49 => {
            happyShift(action_61)
        },
        50 => {
            happyShift(action_61)
        },
        51 => {
            happyShift(action_61)
        },
        52 => {
            happyShift(action_61)
        },
        53 => {
            happyShift(action_61)
        },
        54 => {
            happyShift(action_61)
        },
        61 => {
            happyShift(action_61)
        },
        65 => {
            happyShift(action_61)
        },
        132 => {
            happyShift(action_61)
        },
        133 => {
            happyShift(action_61)
        },
        134 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_178(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_267
}

pub fn action_179(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        140 => {
            happyShift(action_182)
        },
        90 => {
            happyShift(action_182)
        },
        _ => {
            happyShift(action_182)
        },
    }
}

pub fn action_180(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_313
}

pub fn action_181(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        185 => {
            happyShift(action_113)
        },
        186 => {
            happyShift(action_113)
        },
        188 => {
            happyShift(action_113)
        },
        190 => {
            happyShift(action_113)
        },
        192 => {
            happyShift(action_113)
        },
        193 => {
            happyShift(action_113)
        },
        195 => {
            happyShift(action_113)
        },
        198 => {
            happyShift(action_113)
        },
        200 => {
            happyShift(action_113)
        },
        201 => {
            happyShift(action_113)
        },
        202 => {
            happyShift(action_113)
        },
        207 => {
            happyShift(action_113)
        },
        208 => {
            happyShift(action_113)
        },
        209 => {
            happyShift(action_113)
        },
        210 => {
            happyShift(action_113)
        },
        212 => {
            happyShift(action_113)
        },
        213 => {
            happyShift(action_113)
        },
        214 => {
            happyShift(action_113)
        },
        215 => {
            happyShift(action_113)
        },
        216 => {
            happyShift(action_113)
        },
        218 => {
            happyShift(action_113)
        },
        219 => {
            happyShift(action_113)
        },
        221 => {
            happyShift(action_113)
        },
        223 => {
            happyShift(action_113)
        },
        225 => {
            happyShift(action_113)
        },
        226 => {
            happyShift(action_113)
        },
        227 => {
            happyShift(action_113)
        },
        228 => {
            happyShift(action_113)
        },
        229 => {
            happyShift(action_113)
        },
        230 => {
            happyShift(action_113)
        },
        231 => {
            happyShift(action_113)
        },
        237 => {
            happyShift(action_113)
        },
        238 => {
            happyShift(action_113)
        },
        239 => {
            happyShift(action_113)
        },
        37 => {
            happyShift(action_113)
        },
        38 => {
            happyShift(action_113)
        },
        40 => {
            happyShift(action_113)
        },
        41 => {
            happyShift(action_113)
        },
        42 => {
            happyShift(action_113)
        },
        43 => {
            happyShift(action_113)
        },
        44 => {
            happyShift(action_113)
        },
        45 => {
            happyShift(action_113)
        },
        46 => {
            happyShift(action_113)
        },
        47 => {
            happyShift(action_113)
        },
        48 => {
            happyShift(action_113)
        },
        49 => {
            happyShift(action_113)
        },
        50 => {
            happyShift(action_113)
        },
        51 => {
            happyShift(action_113)
        },
        52 => {
            happyShift(action_113)
        },
        53 => {
            happyShift(action_113)
        },
        54 => {
            happyShift(action_113)
        },
        61 => {
            happyShift(action_113)
        },
        65 => {
            happyShift(action_113)
        },
        82 => {
            happyShift(action_113)
        },
        83 => {
            happyShift(action_113)
        },
        84 => {
            happyShift(action_113)
        },
        85 => {
            happyShift(action_113)
        },
        132 => {
            happyShift(action_113)
        },
        133 => {
            happyShift(action_113)
        },
        134 => {
            happyShift(action_113)
        },
        _ => {
            happyShift(action_113)
        },
    }
}

pub fn action_182(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        186 => {
            happyShift(action_26)
        },
        193 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        213 => {
            happyShift(action_26)
        },
        214 => {
            happyShift(action_26)
        },
        216 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        221 => {
            happyShift(action_26)
        },
        231 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        65 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        125 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_183(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_184(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_106
}

pub fn action_185(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_149
}

pub fn action_186(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_160
}

pub fn action_187(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_228
}

pub fn action_188(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyReduce_26
        },
        187 => {
            happyReduce_26
        },
        35 => {
            happyReduce_26
        },
        67 => {
            happyReduce_26
        },
        _ => {
            happyReduce_26
        },
    }
}

pub fn action_189(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        33 => {
            happyGoto(action_440)
        },
        _ => {
            happyGoto(action_440)
        },
    }
}

pub fn action_190(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_111)
        },
        150 => {
            happyShift(action_111)
        },
        185 => {
            happyShift(action_111)
        },
        186 => {
            happyShift(action_111)
        },
        188 => {
            happyShift(action_111)
        },
        190 => {
            happyShift(action_111)
        },
        192 => {
            happyShift(action_111)
        },
        193 => {
            happyShift(action_111)
        },
        195 => {
            happyShift(action_111)
        },
        198 => {
            happyShift(action_111)
        },
        200 => {
            happyShift(action_111)
        },
        201 => {
            happyShift(action_111)
        },
        202 => {
            happyShift(action_111)
        },
        207 => {
            happyShift(action_111)
        },
        208 => {
            happyShift(action_111)
        },
        209 => {
            happyShift(action_111)
        },
        210 => {
            happyShift(action_111)
        },
        212 => {
            happyShift(action_111)
        },
        213 => {
            happyShift(action_111)
        },
        214 => {
            happyShift(action_111)
        },
        215 => {
            happyShift(action_111)
        },
        216 => {
            happyShift(action_111)
        },
        218 => {
            happyShift(action_111)
        },
        219 => {
            happyShift(action_111)
        },
        221 => {
            happyShift(action_111)
        },
        223 => {
            happyShift(action_111)
        },
        225 => {
            happyShift(action_111)
        },
        226 => {
            happyShift(action_111)
        },
        227 => {
            happyShift(action_111)
        },
        228 => {
            happyShift(action_111)
        },
        229 => {
            happyShift(action_111)
        },
        230 => {
            happyShift(action_111)
        },
        231 => {
            happyShift(action_111)
        },
        237 => {
            happyShift(action_111)
        },
        238 => {
            happyShift(action_111)
        },
        239 => {
            happyShift(action_111)
        },
        11 => {
            happyShift(action_111)
        },
        40 => {
            happyShift(action_111)
        },
        41 => {
            happyShift(action_111)
        },
        42 => {
            happyShift(action_111)
        },
        43 => {
            happyShift(action_111)
        },
        45 => {
            happyShift(action_111)
        },
        52 => {
            happyShift(action_111)
        },
        53 => {
            happyShift(action_111)
        },
        54 => {
            happyShift(action_111)
        },
        61 => {
            happyShift(action_111)
        },
        64 => {
            happyShift(action_111)
        },
        75 => {
            happyShift(action_111)
        },
        76 => {
            happyShift(action_111)
        },
        77 => {
            happyShift(action_111)
        },
        78 => {
            happyShift(action_111)
        },
        79 => {
            happyShift(action_111)
        },
        80 => {
            happyShift(action_111)
        },
        81 => {
            happyShift(action_111)
        },
        134 => {
            happyShift(action_111)
        },
        _ => {
            happyShift(action_111)
        },
    }
}

pub fn action_191(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_430)
        },
        _ => {
            happyShift(action_430)
        },
    }
}

pub fn action_192(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_173
}

pub fn action_193(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_429)
        },
        237 => {
            happyShift(action_429)
        },
        238 => {
            happyShift(action_429)
        },
        131 => {
            happyShift(action_429)
        },
        _ => {
            happyShift(action_429)
        },
    }
}

pub fn action_194(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_164
}

pub fn action_195(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_182
}

pub fn action_196(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_183
}

pub fn action_197(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_168
}

pub fn action_198(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_110
}

pub fn action_199(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_112
}

pub fn action_200(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_113
}

pub fn action_201(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_111
}

pub fn action_202(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_169
}

pub fn action_203(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_155
}

pub fn action_204(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_162
}

pub fn action_205(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_163
}

pub fn action_206(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_86
}

pub fn action_207(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_156
}

pub fn action_208(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_157
}

pub fn action_209(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_85
}

pub fn action_210(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_143
}

pub fn action_211(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_152
}

pub fn action_212(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_151
}

pub fn action_213(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_153
}

pub fn action_214(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_144
}

pub fn action_215(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_145
}

pub fn action_216(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_146
}

pub fn action_217(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_218(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        187 => {
            happyShift(action_406)
        },
        35 => {
            happyShift(action_406)
        },
        67 => {
            happyShift(action_406)
        },
        _ => {
            happyShift(action_406)
        },
    }
}

pub fn action_219(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_231
}

pub fn action_220(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_235
}

pub fn action_221(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_238
}

pub fn action_222(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_239
}

pub fn action_223(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_234
}

pub fn action_224(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_248
}

pub fn action_225(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyReduce_26
        },
        _ => {
            happyReduce_26
        },
    }
}

pub fn action_226(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        33 => {
            happyGoto(action_425)
        },
        _ => {
            happyGoto(action_425)
        },
    }
}

pub fn action_227(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_423)
        },
        150 => {
            happyShift(action_423)
        },
        237 => {
            happyShift(action_423)
        },
        238 => {
            happyShift(action_423)
        },
        239 => {
            happyShift(action_423)
        },
        70 => {
            happyShift(action_423)
        },
        71 => {
            happyShift(action_423)
        },
        72 => {
            happyShift(action_423)
        },
        73 => {
            happyShift(action_423)
        },
        74 => {
            happyShift(action_423)
        },
        76 => {
            happyShift(action_423)
        },
        77 => {
            happyShift(action_423)
        },
        78 => {
            happyShift(action_423)
        },
        80 => {
            happyShift(action_423)
        },
        81 => {
            happyShift(action_423)
        },
        133 => {
            happyShift(action_423)
        },
        134 => {
            happyShift(action_423)
        },
        _ => {
            happyShift(action_423)
        },
    }
}

pub fn action_228(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_418)
        },
        150 => {
            happyShift(action_418)
        },
        237 => {
            happyShift(action_418)
        },
        238 => {
            happyShift(action_418)
        },
        239 => {
            happyShift(action_418)
        },
        65 => {
            happyShift(action_418)
        },
        69 => {
            happyShift(action_418)
        },
        70 => {
            happyShift(action_418)
        },
        71 => {
            happyShift(action_418)
        },
        72 => {
            happyShift(action_418)
        },
        73 => {
            happyShift(action_418)
        },
        75 => {
            happyShift(action_418)
        },
        76 => {
            happyShift(action_418)
        },
        77 => {
            happyShift(action_418)
        },
        78 => {
            happyShift(action_418)
        },
        80 => {
            happyShift(action_418)
        },
        81 => {
            happyShift(action_418)
        },
        132 => {
            happyShift(action_418)
        },
        133 => {
            happyShift(action_418)
        },
        134 => {
            happyShift(action_418)
        },
        _ => {
            happyShift(action_418)
        },
    }
}

pub fn action_229(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_230(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_231(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_108
}

pub fn action_232(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_142
}

pub fn action_233(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_154
}

pub fn action_234(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyReduce_26
        },
        187 => {
            happyReduce_26
        },
        35 => {
            happyReduce_26
        },
        67 => {
            happyReduce_26
        },
        _ => {
            happyReduce_26
        },
    }
}

pub fn action_235(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        33 => {
            happyGoto(action_409)
        },
        _ => {
            happyGoto(action_409)
        },
    }
}

pub fn action_236(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_109
}

pub fn action_237(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_408)
        },
        _ => {
            happyShift(action_408)
        },
    }
}

pub fn action_238(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_165
}

pub fn action_239(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_240(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        187 => {
            happyShift(action_406)
        },
        35 => {
            happyShift(action_406)
        },
        67 => {
            happyShift(action_406)
        },
        _ => {
            happyShift(action_406)
        },
    }
}

pub fn action_241(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        33 => {
            happyGoto(action_403)
        },
        _ => {
            happyGoto(action_403)
        },
    }
}

pub fn action_242(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_243(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_87
}

pub fn action_244(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_245(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_88
}

pub fn action_246(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_12
}

pub fn action_247(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_248(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_249(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_457
}

pub fn action_250(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_398)
        },
        _ => {
            happyShift(action_398)
        },
    }
}

pub fn action_251(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_252(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_396)
        },
        _ => {
            happyShift(action_396)
        },
    }
}

pub fn action_253(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_254(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_469
}

pub fn action_255(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        185 => {
            happyShift(action_26)
        },
        186 => {
            happyShift(action_26)
        },
        188 => {
            happyShift(action_26)
        },
        190 => {
            happyShift(action_26)
        },
        192 => {
            happyShift(action_26)
        },
        193 => {
            happyShift(action_26)
        },
        195 => {
            happyShift(action_26)
        },
        198 => {
            happyShift(action_26)
        },
        200 => {
            happyShift(action_26)
        },
        201 => {
            happyShift(action_26)
        },
        202 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        207 => {
            happyShift(action_26)
        },
        208 => {
            happyShift(action_26)
        },
        209 => {
            happyShift(action_26)
        },
        210 => {
            happyShift(action_26)
        },
        212 => {
            happyShift(action_26)
        },
        213 => {
            happyShift(action_26)
        },
        214 => {
            happyShift(action_26)
        },
        215 => {
            happyShift(action_26)
        },
        216 => {
            happyShift(action_26)
        },
        218 => {
            happyShift(action_26)
        },
        219 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        221 => {
            happyShift(action_26)
        },
        222 => {
            happyShift(action_26)
        },
        223 => {
            happyShift(action_26)
        },
        225 => {
            happyShift(action_26)
        },
        226 => {
            happyShift(action_26)
        },
        227 => {
            happyShift(action_26)
        },
        228 => {
            happyShift(action_26)
        },
        229 => {
            happyShift(action_26)
        },
        230 => {
            happyShift(action_26)
        },
        231 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        15 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        124 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_256(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        232 => {
            happyShift(action_392)
        },
        _ => {
            happyShift(action_392)
        },
    }
}

pub fn action_257(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        180 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        187 => {
            happyShift(action_26)
        },
        189 => {
            happyShift(action_26)
        },
        191 => {
            happyShift(action_26)
        },
        194 => {
            happyShift(action_26)
        },
        196 => {
            happyShift(action_26)
        },
        197 => {
            happyShift(action_26)
        },
        203 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        205 => {
            happyShift(action_26)
        },
        206 => {
            happyShift(action_26)
        },
        217 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        224 => {
            happyShift(action_26)
        },
        232 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        12 => {
            happyShift(action_26)
        },
        13 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        22 => {
            happyShift(action_26)
        },
        23 => {
            happyShift(action_26)
        },
        24 => {
            happyShift(action_26)
        },
        25 => {
            happyShift(action_26)
        },
        26 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_258(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_67
}

pub fn action_259(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_406
}

pub fn action_260(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_460
}

pub fn action_261(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        167 => {
            happyShift(action_389)
        },
        183 => {
            happyShift(action_389)
        },
        _ => {
            happyShift(action_389)
        },
    }
}

pub fn action_262(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_68
}

pub fn action_263(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_388)
        },
        _ => {
            happyShift(action_388)
        },
    }
}

pub fn action_264(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_75
}

pub fn action_265(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        211 => {
            happyShift(action_387)
        },
        17 => {
            happyShift(action_387)
        },
        21 => {
            happyShift(action_387)
        },
        _ => {
            happyShift(action_387)
        },
    }
}

pub fn action_266(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_267(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_57
}

pub fn action_268(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        190 => {
            happyShift(action_116)
        },
        192 => {
            happyShift(action_116)
        },
        195 => {
            happyShift(action_116)
        },
        198 => {
            happyShift(action_116)
        },
        200 => {
            happyShift(action_116)
        },
        202 => {
            happyShift(action_116)
        },
        208 => {
            happyShift(action_116)
        },
        209 => {
            happyShift(action_116)
        },
        210 => {
            happyShift(action_116)
        },
        218 => {
            happyShift(action_116)
        },
        219 => {
            happyShift(action_116)
        },
        223 => {
            happyShift(action_116)
        },
        226 => {
            happyShift(action_116)
        },
        228 => {
            happyShift(action_116)
        },
        229 => {
            happyShift(action_116)
        },
        230 => {
            happyShift(action_116)
        },
        238 => {
            happyShift(action_116)
        },
        239 => {
            happyShift(action_116)
        },
        44 => {
            happyShift(action_116)
        },
        45 => {
            happyShift(action_116)
        },
        47 => {
            happyShift(action_116)
        },
        49 => {
            happyShift(action_116)
        },
        51 => {
            happyShift(action_116)
        },
        52 => {
            happyShift(action_116)
        },
        53 => {
            happyShift(action_116)
        },
        54 => {
            happyShift(action_116)
        },
        61 => {
            happyShift(action_116)
        },
        65 => {
            happyShift(action_116)
        },
        86 => {
            happyShift(action_116)
        },
        132 => {
            happyShift(action_116)
        },
        133 => {
            happyShift(action_116)
        },
        134 => {
            happyShift(action_116)
        },
        _ => {
            happyShift(action_116)
        },
    }
}

pub fn action_269(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        190 => {
            happyShift(action_116)
        },
        192 => {
            happyShift(action_116)
        },
        195 => {
            happyShift(action_116)
        },
        198 => {
            happyShift(action_116)
        },
        200 => {
            happyShift(action_116)
        },
        202 => {
            happyShift(action_116)
        },
        208 => {
            happyShift(action_116)
        },
        209 => {
            happyShift(action_116)
        },
        210 => {
            happyShift(action_116)
        },
        218 => {
            happyShift(action_116)
        },
        219 => {
            happyShift(action_116)
        },
        223 => {
            happyShift(action_116)
        },
        226 => {
            happyShift(action_116)
        },
        228 => {
            happyShift(action_116)
        },
        229 => {
            happyShift(action_116)
        },
        230 => {
            happyShift(action_116)
        },
        238 => {
            happyShift(action_116)
        },
        239 => {
            happyShift(action_116)
        },
        44 => {
            happyShift(action_116)
        },
        45 => {
            happyShift(action_116)
        },
        47 => {
            happyShift(action_116)
        },
        49 => {
            happyShift(action_116)
        },
        51 => {
            happyShift(action_116)
        },
        52 => {
            happyShift(action_116)
        },
        53 => {
            happyShift(action_116)
        },
        54 => {
            happyShift(action_116)
        },
        61 => {
            happyShift(action_116)
        },
        65 => {
            happyShift(action_116)
        },
        86 => {
            happyShift(action_116)
        },
        132 => {
            happyShift(action_116)
        },
        133 => {
            happyShift(action_116)
        },
        134 => {
            happyShift(action_116)
        },
        _ => {
            happyShift(action_116)
        },
    }
}

pub fn action_270(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_271(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_398
}

pub fn action_272(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        190 => {
            happyShift(action_26)
        },
        192 => {
            happyShift(action_26)
        },
        195 => {
            happyShift(action_26)
        },
        198 => {
            happyShift(action_26)
        },
        200 => {
            happyShift(action_26)
        },
        202 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        208 => {
            happyShift(action_26)
        },
        209 => {
            happyShift(action_26)
        },
        210 => {
            happyShift(action_26)
        },
        218 => {
            happyShift(action_26)
        },
        219 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        223 => {
            happyShift(action_26)
        },
        226 => {
            happyShift(action_26)
        },
        228 => {
            happyShift(action_26)
        },
        229 => {
            happyShift(action_26)
        },
        230 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        44 => {
            happyShift(action_26)
        },
        45 => {
            happyShift(action_26)
        },
        47 => {
            happyShift(action_26)
        },
        49 => {
            happyShift(action_26)
        },
        51 => {
            happyShift(action_26)
        },
        52 => {
            happyShift(action_26)
        },
        53 => {
            happyShift(action_26)
        },
        54 => {
            happyShift(action_26)
        },
        61 => {
            happyShift(action_26)
        },
        65 => {
            happyShift(action_26)
        },
        86 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_273(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_397
}

pub fn action_274(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_391
}

pub fn action_275(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        236 => {
            happyShift(action_379)
        },
        _ => {
            happyShift(action_379)
        },
    }
}

pub fn action_276(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_466
}

pub fn action_277(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_393
}

pub fn action_278(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        190 => {
            happyShift(action_26)
        },
        192 => {
            happyShift(action_26)
        },
        195 => {
            happyShift(action_26)
        },
        198 => {
            happyShift(action_26)
        },
        200 => {
            happyShift(action_26)
        },
        202 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        208 => {
            happyShift(action_26)
        },
        209 => {
            happyShift(action_26)
        },
        210 => {
            happyShift(action_26)
        },
        218 => {
            happyShift(action_26)
        },
        219 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        223 => {
            happyShift(action_26)
        },
        226 => {
            happyShift(action_26)
        },
        228 => {
            happyShift(action_26)
        },
        229 => {
            happyShift(action_26)
        },
        230 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        44 => {
            happyShift(action_26)
        },
        45 => {
            happyShift(action_26)
        },
        47 => {
            happyShift(action_26)
        },
        49 => {
            happyShift(action_26)
        },
        51 => {
            happyShift(action_26)
        },
        52 => {
            happyShift(action_26)
        },
        53 => {
            happyShift(action_26)
        },
        54 => {
            happyShift(action_26)
        },
        61 => {
            happyShift(action_26)
        },
        65 => {
            happyShift(action_26)
        },
        86 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_279(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_280(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_395
}

pub fn action_281(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        190 => {
            happyShift(action_26)
        },
        192 => {
            happyShift(action_26)
        },
        195 => {
            happyShift(action_26)
        },
        198 => {
            happyShift(action_26)
        },
        200 => {
            happyShift(action_26)
        },
        202 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        208 => {
            happyShift(action_26)
        },
        209 => {
            happyShift(action_26)
        },
        210 => {
            happyShift(action_26)
        },
        218 => {
            happyShift(action_26)
        },
        219 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        223 => {
            happyShift(action_26)
        },
        226 => {
            happyShift(action_26)
        },
        228 => {
            happyShift(action_26)
        },
        229 => {
            happyShift(action_26)
        },
        230 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        44 => {
            happyShift(action_26)
        },
        45 => {
            happyShift(action_26)
        },
        47 => {
            happyShift(action_26)
        },
        49 => {
            happyShift(action_26)
        },
        51 => {
            happyShift(action_26)
        },
        52 => {
            happyShift(action_26)
        },
        53 => {
            happyShift(action_26)
        },
        54 => {
            happyShift(action_26)
        },
        61 => {
            happyShift(action_26)
        },
        65 => {
            happyShift(action_26)
        },
        86 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_282(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_399
}

pub fn action_283(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_390
}

pub fn action_284(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_389
}

pub fn action_285(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_375)
        },
        _ => {
            happyShift(action_375)
        },
    }
}

pub fn action_286(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_372)
        },
        140 => {
            happyShift(action_372)
        },
        150 => {
            happyShift(action_372)
        },
        87 => {
            happyShift(action_372)
        },
        88 => {
            happyShift(action_372)
        },
        89 => {
            happyShift(action_372)
        },
        90 => {
            happyShift(action_372)
        },
        91 => {
            happyShift(action_372)
        },
        92 => {
            happyShift(action_372)
        },
        _ => {
            happyShift(action_372)
        },
    }
}

pub fn action_287(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        186 => {
            happyShift(action_171)
        },
        190 => {
            happyShift(action_171)
        },
        192 => {
            happyShift(action_171)
        },
        193 => {
            happyShift(action_171)
        },
        195 => {
            happyShift(action_171)
        },
        198 => {
            happyShift(action_171)
        },
        202 => {
            happyShift(action_171)
        },
        208 => {
            happyShift(action_171)
        },
        209 => {
            happyShift(action_171)
        },
        210 => {
            happyShift(action_171)
        },
        213 => {
            happyShift(action_171)
        },
        214 => {
            happyShift(action_171)
        },
        216 => {
            happyShift(action_171)
        },
        218 => {
            happyShift(action_171)
        },
        219 => {
            happyShift(action_171)
        },
        229 => {
            happyShift(action_171)
        },
        230 => {
            happyShift(action_171)
        },
        231 => {
            happyShift(action_171)
        },
        239 => {
            happyShift(action_171)
        },
        45 => {
            happyShift(action_171)
        },
        64 => {
            happyShift(action_171)
        },
        134 => {
            happyShift(action_171)
        },
        _ => {
            happyShift(action_171)
        },
    }
}

pub fn action_288(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        186 => {
            happyShift(action_171)
        },
        193 => {
            happyShift(action_171)
        },
        213 => {
            happyShift(action_171)
        },
        214 => {
            happyShift(action_171)
        },
        216 => {
            happyShift(action_171)
        },
        231 => {
            happyShift(action_171)
        },
        239 => {
            happyShift(action_171)
        },
        64 => {
            happyShift(action_171)
        },
        134 => {
            happyShift(action_171)
        },
        _ => {
            happyShift(action_171)
        },
    }
}

pub fn action_289(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        186 => {
            happyShift(action_171)
        },
        193 => {
            happyShift(action_171)
        },
        213 => {
            happyShift(action_171)
        },
        214 => {
            happyShift(action_171)
        },
        216 => {
            happyShift(action_171)
        },
        231 => {
            happyShift(action_171)
        },
        239 => {
            happyShift(action_171)
        },
        64 => {
            happyShift(action_171)
        },
        134 => {
            happyShift(action_171)
        },
        _ => {
            happyShift(action_171)
        },
    }
}

pub fn action_290(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_372)
        },
        140 => {
            happyShift(action_372)
        },
        150 => {
            happyShift(action_372)
        },
        186 => {
            happyShift(action_372)
        },
        190 => {
            happyShift(action_372)
        },
        192 => {
            happyShift(action_372)
        },
        193 => {
            happyShift(action_372)
        },
        195 => {
            happyShift(action_372)
        },
        198 => {
            happyShift(action_372)
        },
        200 => {
            happyShift(action_372)
        },
        202 => {
            happyShift(action_372)
        },
        208 => {
            happyShift(action_372)
        },
        209 => {
            happyShift(action_372)
        },
        210 => {
            happyShift(action_372)
        },
        213 => {
            happyShift(action_372)
        },
        214 => {
            happyShift(action_372)
        },
        216 => {
            happyShift(action_372)
        },
        218 => {
            happyShift(action_372)
        },
        219 => {
            happyShift(action_372)
        },
        223 => {
            happyShift(action_372)
        },
        226 => {
            happyShift(action_372)
        },
        228 => {
            happyShift(action_372)
        },
        229 => {
            happyShift(action_372)
        },
        230 => {
            happyShift(action_372)
        },
        231 => {
            happyShift(action_372)
        },
        238 => {
            happyShift(action_372)
        },
        239 => {
            happyShift(action_372)
        },
        45 => {
            happyShift(action_372)
        },
        52 => {
            happyShift(action_372)
        },
        53 => {
            happyShift(action_372)
        },
        54 => {
            happyShift(action_372)
        },
        61 => {
            happyShift(action_372)
        },
        64 => {
            happyShift(action_372)
        },
        87 => {
            happyShift(action_372)
        },
        88 => {
            happyShift(action_372)
        },
        89 => {
            happyShift(action_372)
        },
        90 => {
            happyShift(action_372)
        },
        91 => {
            happyShift(action_372)
        },
        92 => {
            happyShift(action_372)
        },
        133 => {
            happyShift(action_372)
        },
        134 => {
            happyShift(action_372)
        },
        _ => {
            happyShift(action_372)
        },
    }
}

pub fn action_291(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_365)
        },
        _ => {
            happyShift(action_365)
        },
    }
}

pub fn action_292(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_364)
        },
        _ => {
            happyShift(action_364)
        },
    }
}

pub fn action_293(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        190 => {
            happyShift(action_116)
        },
        192 => {
            happyShift(action_116)
        },
        195 => {
            happyShift(action_116)
        },
        198 => {
            happyShift(action_116)
        },
        200 => {
            happyShift(action_116)
        },
        202 => {
            happyShift(action_116)
        },
        208 => {
            happyShift(action_116)
        },
        209 => {
            happyShift(action_116)
        },
        210 => {
            happyShift(action_116)
        },
        218 => {
            happyShift(action_116)
        },
        219 => {
            happyShift(action_116)
        },
        223 => {
            happyShift(action_116)
        },
        226 => {
            happyShift(action_116)
        },
        228 => {
            happyShift(action_116)
        },
        229 => {
            happyShift(action_116)
        },
        230 => {
            happyShift(action_116)
        },
        238 => {
            happyShift(action_116)
        },
        239 => {
            happyShift(action_116)
        },
        45 => {
            happyShift(action_116)
        },
        52 => {
            happyShift(action_116)
        },
        53 => {
            happyShift(action_116)
        },
        54 => {
            happyShift(action_116)
        },
        61 => {
            happyShift(action_116)
        },
        134 => {
            happyShift(action_116)
        },
        _ => {
            happyShift(action_116)
        },
    }
}

pub fn action_294(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        123 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_295(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_296(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        167 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_297(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_298(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_299(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_300(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_301(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_302(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_303(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_304(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_305(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_306(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_307(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_308(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_309(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_310(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_311(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_312(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_313(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_314(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_392
}

pub fn action_315(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_316(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_441
}

pub fn action_317(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_445
}

pub fn action_318(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_446
}

pub fn action_319(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_442
}

pub fn action_320(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_443
}

pub fn action_321(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_444
}

pub fn action_322(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_449
}

pub fn action_323(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_450
}

pub fn action_324(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_451
}

pub fn action_325(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_447
}

pub fn action_326(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_448
}

pub fn action_327(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        139 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        105 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_328(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_329(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        237 => {
            happyShift(action_254)
        },
        238 => {
            happyShift(action_254)
        },
        131 => {
            happyShift(action_254)
        },
        _ => {
            happyShift(action_254)
        },
    }
}

pub fn action_330(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        237 => {
            happyShift(action_254)
        },
        238 => {
            happyShift(action_254)
        },
        131 => {
            happyShift(action_254)
        },
        _ => {
            happyShift(action_254)
        },
    }
}

pub fn action_331(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_382
}

pub fn action_332(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_383
}

pub fn action_333(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_7
}

pub fn action_334(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_6
}

pub fn action_335(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_380
}

pub fn action_336(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_381
}

pub fn action_337(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_640)
        },
        _ => {
            happyShift(action_640)
        },
    }
}

pub fn action_338(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_638)
        },
        179 => {
            happyShift(action_638)
        },
        _ => {
            happyShift(action_638)
        },
    }
}

pub fn action_339(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_386
}

pub fn action_340(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_378
}

pub fn action_341(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_440
}

pub fn action_342(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_411
}

pub fn action_343(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_410
}

pub fn action_344(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_409
}

pub fn action_345(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        150 => {
            happyShift(action_311)
        },
        151 => {
            happyShift(action_311)
        },
        152 => {
            happyShift(action_311)
        },
        _ => {
            happyShift(action_311)
        },
    }
}

pub fn action_346(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        150 => {
            happyShift(action_311)
        },
        151 => {
            happyShift(action_311)
        },
        152 => {
            happyShift(action_311)
        },
        _ => {
            happyShift(action_311)
        },
    }
}

pub fn action_347(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        148 => {
            happyShift(action_309)
        },
        149 => {
            happyShift(action_309)
        },
        _ => {
            happyShift(action_309)
        },
    }
}

pub fn action_348(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        148 => {
            happyShift(action_309)
        },
        149 => {
            happyShift(action_309)
        },
        _ => {
            happyShift(action_309)
        },
    }
}

pub fn action_349(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        154 => {
            happyShift(action_307)
        },
        155 => {
            happyShift(action_307)
        },
        _ => {
            happyShift(action_307)
        },
    }
}

pub fn action_350(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        154 => {
            happyShift(action_307)
        },
        155 => {
            happyShift(action_307)
        },
        _ => {
            happyShift(action_307)
        },
    }
}

pub fn action_351(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        154 => {
            happyShift(action_307)
        },
        155 => {
            happyShift(action_307)
        },
        _ => {
            happyShift(action_307)
        },
    }
}

pub fn action_352(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        154 => {
            happyShift(action_307)
        },
        155 => {
            happyShift(action_307)
        },
        _ => {
            happyShift(action_307)
        },
    }
}

pub fn action_353(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        156 => {
            happyShift(action_303)
        },
        157 => {
            happyShift(action_303)
        },
        158 => {
            happyShift(action_303)
        },
        159 => {
            happyShift(action_303)
        },
        _ => {
            happyShift(action_303)
        },
    }
}

pub fn action_354(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        156 => {
            happyShift(action_303)
        },
        157 => {
            happyShift(action_303)
        },
        158 => {
            happyShift(action_303)
        },
        159 => {
            happyShift(action_303)
        },
        _ => {
            happyShift(action_303)
        },
    }
}

pub fn action_355(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        160 => {
            happyShift(action_301)
        },
        161 => {
            happyShift(action_301)
        },
        _ => {
            happyShift(action_301)
        },
    }
}

pub fn action_356(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        153 => {
            happyShift(action_300)
        },
        _ => {
            happyShift(action_300)
        },
    }
}

pub fn action_357(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        162 => {
            happyShift(action_299)
        },
        _ => {
            happyShift(action_299)
        },
    }
}

pub fn action_358(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        163 => {
            happyShift(action_298)
        },
        _ => {
            happyShift(action_298)
        },
    }
}

pub fn action_359(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        167 => {
            happyShift(action_637)
        },
        _ => {
            happyShift(action_637)
        },
    }
}

pub fn action_360(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_361(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        164 => {
            happyShift(action_297)
        },
        _ => {
            happyShift(action_297)
        },
    }
}

pub fn action_362(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_454
}

pub fn action_363(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_635)
        },
        _ => {
            happyShift(action_635)
        },
    }
}

pub fn action_364(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_363
}

pub fn action_365(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_366(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_307
}

pub fn action_367(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_310
}

pub fn action_368(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_308
}

pub fn action_369(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_370(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        186 => {
            happyShift(action_171)
        },
        190 => {
            happyShift(action_171)
        },
        192 => {
            happyShift(action_171)
        },
        193 => {
            happyShift(action_171)
        },
        195 => {
            happyShift(action_171)
        },
        198 => {
            happyShift(action_171)
        },
        200 => {
            happyShift(action_171)
        },
        202 => {
            happyShift(action_171)
        },
        208 => {
            happyShift(action_171)
        },
        209 => {
            happyShift(action_171)
        },
        210 => {
            happyShift(action_171)
        },
        213 => {
            happyShift(action_171)
        },
        214 => {
            happyShift(action_171)
        },
        216 => {
            happyShift(action_171)
        },
        218 => {
            happyShift(action_171)
        },
        219 => {
            happyShift(action_171)
        },
        223 => {
            happyShift(action_171)
        },
        226 => {
            happyShift(action_171)
        },
        228 => {
            happyShift(action_171)
        },
        229 => {
            happyShift(action_171)
        },
        230 => {
            happyShift(action_171)
        },
        231 => {
            happyShift(action_171)
        },
        238 => {
            happyShift(action_171)
        },
        239 => {
            happyShift(action_171)
        },
        45 => {
            happyShift(action_171)
        },
        52 => {
            happyShift(action_171)
        },
        53 => {
            happyShift(action_171)
        },
        54 => {
            happyShift(action_171)
        },
        61 => {
            happyShift(action_171)
        },
        64 => {
            happyShift(action_171)
        },
        134 => {
            happyShift(action_171)
        },
        _ => {
            happyShift(action_171)
        },
    }
}

pub fn action_371(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        186 => {
            happyReduce_473
        },
        190 => {
            happyReduce_473
        },
        192 => {
            happyReduce_473
        },
        193 => {
            happyReduce_473
        },
        195 => {
            happyReduce_473
        },
        198 => {
            happyReduce_473
        },
        200 => {
            happyReduce_473
        },
        202 => {
            happyReduce_473
        },
        208 => {
            happyReduce_473
        },
        209 => {
            happyReduce_473
        },
        210 => {
            happyReduce_473
        },
        213 => {
            happyReduce_473
        },
        214 => {
            happyReduce_473
        },
        216 => {
            happyReduce_473
        },
        218 => {
            happyReduce_473
        },
        219 => {
            happyReduce_473
        },
        223 => {
            happyReduce_473
        },
        226 => {
            happyReduce_473
        },
        228 => {
            happyReduce_473
        },
        229 => {
            happyReduce_473
        },
        230 => {
            happyReduce_473
        },
        231 => {
            happyReduce_473
        },
        238 => {
            happyReduce_473
        },
        239 => {
            happyReduce_473
        },
        _ => {
            happyReduce_473
        },
    }
}

pub fn action_372(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_372)
        },
        140 => {
            happyShift(action_372)
        },
        150 => {
            happyShift(action_372)
        },
        185 => {
            happyShift(action_372)
        },
        186 => {
            happyShift(action_372)
        },
        188 => {
            happyShift(action_372)
        },
        190 => {
            happyShift(action_372)
        },
        192 => {
            happyShift(action_372)
        },
        193 => {
            happyShift(action_372)
        },
        195 => {
            happyShift(action_372)
        },
        198 => {
            happyShift(action_372)
        },
        200 => {
            happyShift(action_372)
        },
        201 => {
            happyShift(action_372)
        },
        202 => {
            happyShift(action_372)
        },
        207 => {
            happyShift(action_372)
        },
        208 => {
            happyShift(action_372)
        },
        209 => {
            happyShift(action_372)
        },
        210 => {
            happyShift(action_372)
        },
        212 => {
            happyShift(action_372)
        },
        213 => {
            happyShift(action_372)
        },
        214 => {
            happyShift(action_372)
        },
        215 => {
            happyShift(action_372)
        },
        216 => {
            happyShift(action_372)
        },
        218 => {
            happyShift(action_372)
        },
        219 => {
            happyShift(action_372)
        },
        221 => {
            happyShift(action_372)
        },
        223 => {
            happyShift(action_372)
        },
        225 => {
            happyShift(action_372)
        },
        226 => {
            happyShift(action_372)
        },
        227 => {
            happyShift(action_372)
        },
        228 => {
            happyShift(action_372)
        },
        229 => {
            happyShift(action_372)
        },
        230 => {
            happyShift(action_372)
        },
        231 => {
            happyShift(action_372)
        },
        238 => {
            happyShift(action_372)
        },
        239 => {
            happyShift(action_372)
        },
        37 => {
            happyShift(action_372)
        },
        38 => {
            happyShift(action_372)
        },
        40 => {
            happyShift(action_372)
        },
        41 => {
            happyShift(action_372)
        },
        42 => {
            happyShift(action_372)
        },
        43 => {
            happyShift(action_372)
        },
        44 => {
            happyShift(action_372)
        },
        45 => {
            happyShift(action_372)
        },
        46 => {
            happyShift(action_372)
        },
        47 => {
            happyShift(action_372)
        },
        48 => {
            happyShift(action_372)
        },
        49 => {
            happyShift(action_372)
        },
        50 => {
            happyShift(action_372)
        },
        51 => {
            happyShift(action_372)
        },
        52 => {
            happyShift(action_372)
        },
        53 => {
            happyShift(action_372)
        },
        54 => {
            happyShift(action_372)
        },
        61 => {
            happyShift(action_372)
        },
        65 => {
            happyShift(action_372)
        },
        82 => {
            happyShift(action_372)
        },
        83 => {
            happyShift(action_372)
        },
        84 => {
            happyShift(action_372)
        },
        88 => {
            happyShift(action_372)
        },
        89 => {
            happyShift(action_372)
        },
        90 => {
            happyShift(action_372)
        },
        91 => {
            happyShift(action_372)
        },
        92 => {
            happyShift(action_372)
        },
        132 => {
            happyShift(action_372)
        },
        133 => {
            happyShift(action_372)
        },
        134 => {
            happyShift(action_372)
        },
        _ => {
            happyShift(action_372)
        },
    }
}

pub fn action_373(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_372)
        },
        140 => {
            happyShift(action_372)
        },
        150 => {
            happyShift(action_372)
        },
        186 => {
            happyShift(action_372)
        },
        193 => {
            happyShift(action_372)
        },
        213 => {
            happyShift(action_372)
        },
        214 => {
            happyShift(action_372)
        },
        216 => {
            happyShift(action_372)
        },
        231 => {
            happyShift(action_372)
        },
        239 => {
            happyShift(action_372)
        },
        65 => {
            happyShift(action_372)
        },
        87 => {
            happyShift(action_372)
        },
        88 => {
            happyShift(action_372)
        },
        89 => {
            happyShift(action_372)
        },
        90 => {
            happyShift(action_372)
        },
        91 => {
            happyShift(action_372)
        },
        92 => {
            happyShift(action_372)
        },
        132 => {
            happyShift(action_372)
        },
        133 => {
            happyShift(action_372)
        },
        134 => {
            happyShift(action_372)
        },
        _ => {
            happyShift(action_372)
        },
    }
}

pub fn action_374(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_305
}

pub fn action_375(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_365
}

pub fn action_376(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_624)
        },
        _ => {
            happyShift(action_624)
        },
    }
}

pub fn action_377(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_623)
        },
        _ => {
            happyShift(action_623)
        },
    }
}

pub fn action_378(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_622)
        },
        _ => {
            happyShift(action_622)
        },
    }
}

pub fn action_379(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_467
}

pub fn action_380(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_621)
        },
        _ => {
            happyShift(action_621)
        },
    }
}

pub fn action_381(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_620)
        },
        _ => {
            happyShift(action_620)
        },
    }
}

pub fn action_382(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_619)
        },
        _ => {
            happyShift(action_619)
        },
    }
}

pub fn action_383(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_618)
        },
        _ => {
            happyShift(action_618)
        },
    }
}

pub fn action_384(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        180 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        187 => {
            happyShift(action_26)
        },
        189 => {
            happyShift(action_26)
        },
        191 => {
            happyShift(action_26)
        },
        194 => {
            happyShift(action_26)
        },
        196 => {
            happyShift(action_26)
        },
        197 => {
            happyShift(action_26)
        },
        203 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        205 => {
            happyShift(action_26)
        },
        206 => {
            happyShift(action_26)
        },
        217 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        224 => {
            happyShift(action_26)
        },
        232 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        12 => {
            happyShift(action_26)
        },
        13 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        22 => {
            happyShift(action_26)
        },
        23 => {
            happyShift(action_26)
        },
        24 => {
            happyShift(action_26)
        },
        25 => {
            happyShift(action_26)
        },
        26 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_385(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        180 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        185 => {
            happyShift(action_26)
        },
        186 => {
            happyShift(action_26)
        },
        187 => {
            happyShift(action_26)
        },
        188 => {
            happyShift(action_26)
        },
        189 => {
            happyShift(action_26)
        },
        190 => {
            happyShift(action_26)
        },
        191 => {
            happyShift(action_26)
        },
        192 => {
            happyShift(action_26)
        },
        193 => {
            happyShift(action_26)
        },
        194 => {
            happyShift(action_26)
        },
        195 => {
            happyShift(action_26)
        },
        196 => {
            happyShift(action_26)
        },
        197 => {
            happyShift(action_26)
        },
        198 => {
            happyShift(action_26)
        },
        200 => {
            happyShift(action_26)
        },
        201 => {
            happyShift(action_26)
        },
        202 => {
            happyShift(action_26)
        },
        203 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        205 => {
            happyShift(action_26)
        },
        206 => {
            happyShift(action_26)
        },
        207 => {
            happyShift(action_26)
        },
        208 => {
            happyShift(action_26)
        },
        209 => {
            happyShift(action_26)
        },
        210 => {
            happyShift(action_26)
        },
        212 => {
            happyShift(action_26)
        },
        213 => {
            happyShift(action_26)
        },
        214 => {
            happyShift(action_26)
        },
        215 => {
            happyShift(action_26)
        },
        216 => {
            happyShift(action_26)
        },
        217 => {
            happyShift(action_26)
        },
        218 => {
            happyShift(action_26)
        },
        219 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        221 => {
            happyShift(action_26)
        },
        222 => {
            happyShift(action_26)
        },
        223 => {
            happyShift(action_26)
        },
        224 => {
            happyShift(action_26)
        },
        225 => {
            happyShift(action_26)
        },
        226 => {
            happyShift(action_26)
        },
        227 => {
            happyShift(action_26)
        },
        228 => {
            happyShift(action_26)
        },
        229 => {
            happyShift(action_26)
        },
        230 => {
            happyShift(action_26)
        },
        231 => {
            happyShift(action_26)
        },
        232 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        12 => {
            happyShift(action_26)
        },
        13 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        16 => {
            happyShift(action_26)
        },
        18 => {
            happyShift(action_26)
        },
        19 => {
            happyShift(action_26)
        },
        20 => {
            happyShift(action_26)
        },
        22 => {
            happyShift(action_26)
        },
        23 => {
            happyShift(action_26)
        },
        24 => {
            happyShift(action_26)
        },
        25 => {
            happyShift(action_26)
        },
        26 => {
            happyShift(action_26)
        },
        32 => {
            happyShift(action_26)
        },
        34 => {
            happyShift(action_26)
        },
        36 => {
            happyShift(action_26)
        },
        37 => {
            happyShift(action_26)
        },
        38 => {
            happyShift(action_26)
        },
        40 => {
            happyShift(action_26)
        },
        41 => {
            happyShift(action_26)
        },
        42 => {
            happyShift(action_26)
        },
        43 => {
            happyShift(action_26)
        },
        44 => {
            happyShift(action_26)
        },
        45 => {
            happyShift(action_26)
        },
        46 => {
            happyShift(action_26)
        },
        47 => {
            happyShift(action_26)
        },
        48 => {
            happyShift(action_26)
        },
        49 => {
            happyShift(action_26)
        },
        50 => {
            happyShift(action_26)
        },
        51 => {
            happyShift(action_26)
        },
        52 => {
            happyShift(action_26)
        },
        53 => {
            happyShift(action_26)
        },
        54 => {
            happyShift(action_26)
        },
        61 => {
            happyShift(action_26)
        },
        65 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_386(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        211 => {
            happyShift(action_604)
        },
        17 => {
            happyShift(action_604)
        },
        _ => {
            happyShift(action_604)
        },
    }
}

pub fn action_387(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        237 => {
            happyShift(action_460)
        },
        85 => {
            happyShift(action_460)
        },
        _ => {
            happyShift(action_460)
        },
    }
}

pub fn action_388(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        236 => {
            happyShift(action_42)
        },
        128 => {
            happyShift(action_42)
        },
        _ => {
            happyShift(action_42)
        },
    }
}

pub fn action_389(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        180 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        187 => {
            happyShift(action_26)
        },
        189 => {
            happyShift(action_26)
        },
        191 => {
            happyShift(action_26)
        },
        194 => {
            happyShift(action_26)
        },
        196 => {
            happyShift(action_26)
        },
        197 => {
            happyShift(action_26)
        },
        203 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        205 => {
            happyShift(action_26)
        },
        206 => {
            happyShift(action_26)
        },
        217 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        224 => {
            happyShift(action_26)
        },
        232 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        12 => {
            happyShift(action_26)
        },
        13 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        22 => {
            happyShift(action_26)
        },
        23 => {
            happyShift(action_26)
        },
        24 => {
            happyShift(action_26)
        },
        25 => {
            happyShift(action_26)
        },
        26 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_390(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        126 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_391(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_36
}

pub fn action_392(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_598)
        },
        _ => {
            happyShift(action_598)
        },
    }
}

pub fn action_393(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        185 => {
            happyShift(action_113)
        },
        188 => {
            happyShift(action_113)
        },
        190 => {
            happyShift(action_113)
        },
        192 => {
            happyShift(action_113)
        },
        195 => {
            happyShift(action_113)
        },
        198 => {
            happyShift(action_113)
        },
        200 => {
            happyShift(action_113)
        },
        201 => {
            happyShift(action_113)
        },
        202 => {
            happyShift(action_113)
        },
        207 => {
            happyShift(action_113)
        },
        208 => {
            happyShift(action_113)
        },
        209 => {
            happyShift(action_113)
        },
        210 => {
            happyShift(action_113)
        },
        212 => {
            happyShift(action_113)
        },
        215 => {
            happyShift(action_113)
        },
        218 => {
            happyShift(action_113)
        },
        219 => {
            happyShift(action_113)
        },
        221 => {
            happyShift(action_113)
        },
        222 => {
            happyShift(action_113)
        },
        223 => {
            happyShift(action_113)
        },
        225 => {
            happyShift(action_113)
        },
        226 => {
            happyShift(action_113)
        },
        227 => {
            happyShift(action_113)
        },
        228 => {
            happyShift(action_113)
        },
        229 => {
            happyShift(action_113)
        },
        230 => {
            happyShift(action_113)
        },
        238 => {
            happyShift(action_113)
        },
        239 => {
            happyShift(action_113)
        },
        32 => {
            happyShift(action_113)
        },
        34 => {
            happyShift(action_113)
        },
        36 => {
            happyShift(action_113)
        },
        37 => {
            happyShift(action_113)
        },
        38 => {
            happyShift(action_113)
        },
        40 => {
            happyShift(action_113)
        },
        41 => {
            happyShift(action_113)
        },
        42 => {
            happyShift(action_113)
        },
        43 => {
            happyShift(action_113)
        },
        44 => {
            happyShift(action_113)
        },
        45 => {
            happyShift(action_113)
        },
        46 => {
            happyShift(action_113)
        },
        47 => {
            happyShift(action_113)
        },
        48 => {
            happyShift(action_113)
        },
        49 => {
            happyShift(action_113)
        },
        50 => {
            happyShift(action_113)
        },
        51 => {
            happyShift(action_113)
        },
        52 => {
            happyShift(action_113)
        },
        53 => {
            happyShift(action_113)
        },
        54 => {
            happyShift(action_113)
        },
        61 => {
            happyShift(action_113)
        },
        65 => {
            happyShift(action_113)
        },
        132 => {
            happyShift(action_113)
        },
        133 => {
            happyShift(action_113)
        },
        134 => {
            happyShift(action_113)
        },
        _ => {
            happyShift(action_113)
        },
    }
}

pub fn action_394(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_596)
        },
        _ => {
            happyShift(action_596)
        },
    }
}

pub fn action_395(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_595)
        },
        _ => {
            happyShift(action_595)
        },
    }
}

pub fn action_396(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_65
}

pub fn action_397(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_594)
        },
        _ => {
            happyShift(action_594)
        },
    }
}

pub fn action_398(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_69
}

pub fn action_399(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_593)
        },
        _ => {
            happyShift(action_593)
        },
    }
}

pub fn action_400(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_592)
        },
        _ => {
            happyShift(action_592)
        },
    }
}

pub fn action_401(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_402(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_524)
        },
        150 => {
            happyShift(action_524)
        },
        237 => {
            happyShift(action_524)
        },
        238 => {
            happyShift(action_524)
        },
        66 => {
            happyShift(action_524)
        },
        68 => {
            happyShift(action_524)
        },
        69 => {
            happyShift(action_524)
        },
        70 => {
            happyShift(action_524)
        },
        71 => {
            happyShift(action_524)
        },
        72 => {
            happyShift(action_524)
        },
        73 => {
            happyShift(action_524)
        },
        75 => {
            happyShift(action_524)
        },
        76 => {
            happyShift(action_524)
        },
        77 => {
            happyShift(action_524)
        },
        78 => {
            happyShift(action_524)
        },
        _ => {
            happyShift(action_524)
        },
    }
}

pub fn action_403(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        185 => {
            happyShift(action_61)
        },
        188 => {
            happyShift(action_61)
        },
        190 => {
            happyShift(action_61)
        },
        192 => {
            happyShift(action_61)
        },
        195 => {
            happyShift(action_61)
        },
        198 => {
            happyShift(action_61)
        },
        200 => {
            happyShift(action_61)
        },
        201 => {
            happyShift(action_61)
        },
        202 => {
            happyShift(action_61)
        },
        207 => {
            happyShift(action_61)
        },
        208 => {
            happyShift(action_61)
        },
        209 => {
            happyShift(action_61)
        },
        210 => {
            happyShift(action_61)
        },
        212 => {
            happyShift(action_61)
        },
        215 => {
            happyShift(action_61)
        },
        218 => {
            happyShift(action_61)
        },
        219 => {
            happyShift(action_61)
        },
        221 => {
            happyShift(action_61)
        },
        222 => {
            happyShift(action_61)
        },
        223 => {
            happyShift(action_61)
        },
        225 => {
            happyShift(action_61)
        },
        226 => {
            happyShift(action_61)
        },
        227 => {
            happyShift(action_61)
        },
        228 => {
            happyShift(action_61)
        },
        229 => {
            happyShift(action_61)
        },
        230 => {
            happyShift(action_61)
        },
        238 => {
            happyShift(action_61)
        },
        239 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        32 => {
            happyShift(action_61)
        },
        34 => {
            happyShift(action_61)
        },
        36 => {
            happyShift(action_61)
        },
        37 => {
            happyShift(action_61)
        },
        38 => {
            happyShift(action_61)
        },
        40 => {
            happyShift(action_61)
        },
        41 => {
            happyShift(action_61)
        },
        42 => {
            happyShift(action_61)
        },
        43 => {
            happyShift(action_61)
        },
        44 => {
            happyShift(action_61)
        },
        45 => {
            happyShift(action_61)
        },
        46 => {
            happyShift(action_61)
        },
        47 => {
            happyShift(action_61)
        },
        48 => {
            happyShift(action_61)
        },
        49 => {
            happyShift(action_61)
        },
        50 => {
            happyShift(action_61)
        },
        51 => {
            happyShift(action_61)
        },
        52 => {
            happyShift(action_61)
        },
        53 => {
            happyShift(action_61)
        },
        54 => {
            happyShift(action_61)
        },
        61 => {
            happyShift(action_61)
        },
        65 => {
            happyShift(action_61)
        },
        132 => {
            happyShift(action_61)
        },
        133 => {
            happyShift(action_61)
        },
        134 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_404(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        168 => {
            happyShift(action_516)
        },
        94 => {
            happyShift(action_516)
        },
        _ => {
            happyShift(action_516)
        },
    }
}

pub fn action_405(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_406(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_586)
        },
        _ => {
            happyShift(action_586)
        },
    }
}

pub fn action_407(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_14
}

pub fn action_408(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        190 => {
            happyShift(action_26)
        },
        192 => {
            happyShift(action_26)
        },
        195 => {
            happyShift(action_26)
        },
        198 => {
            happyShift(action_26)
        },
        200 => {
            happyShift(action_26)
        },
        202 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        208 => {
            happyShift(action_26)
        },
        209 => {
            happyShift(action_26)
        },
        210 => {
            happyShift(action_26)
        },
        218 => {
            happyShift(action_26)
        },
        219 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        223 => {
            happyShift(action_26)
        },
        226 => {
            happyShift(action_26)
        },
        228 => {
            happyShift(action_26)
        },
        229 => {
            happyShift(action_26)
        },
        230 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        44 => {
            happyShift(action_26)
        },
        45 => {
            happyShift(action_26)
        },
        47 => {
            happyShift(action_26)
        },
        49 => {
            happyShift(action_26)
        },
        51 => {
            happyShift(action_26)
        },
        52 => {
            happyShift(action_26)
        },
        53 => {
            happyShift(action_26)
        },
        54 => {
            happyShift(action_26)
        },
        61 => {
            happyShift(action_26)
        },
        65 => {
            happyShift(action_26)
        },
        86 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_409(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        185 => {
            happyShift(action_61)
        },
        188 => {
            happyShift(action_61)
        },
        190 => {
            happyShift(action_61)
        },
        192 => {
            happyShift(action_61)
        },
        195 => {
            happyShift(action_61)
        },
        198 => {
            happyShift(action_61)
        },
        200 => {
            happyShift(action_61)
        },
        201 => {
            happyShift(action_61)
        },
        202 => {
            happyShift(action_61)
        },
        207 => {
            happyShift(action_61)
        },
        208 => {
            happyShift(action_61)
        },
        209 => {
            happyShift(action_61)
        },
        210 => {
            happyShift(action_61)
        },
        212 => {
            happyShift(action_61)
        },
        215 => {
            happyShift(action_61)
        },
        218 => {
            happyShift(action_61)
        },
        219 => {
            happyShift(action_61)
        },
        221 => {
            happyShift(action_61)
        },
        222 => {
            happyShift(action_61)
        },
        223 => {
            happyShift(action_61)
        },
        225 => {
            happyShift(action_61)
        },
        226 => {
            happyShift(action_61)
        },
        227 => {
            happyShift(action_61)
        },
        228 => {
            happyShift(action_61)
        },
        229 => {
            happyShift(action_61)
        },
        230 => {
            happyShift(action_61)
        },
        238 => {
            happyShift(action_61)
        },
        239 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        32 => {
            happyShift(action_61)
        },
        34 => {
            happyShift(action_61)
        },
        36 => {
            happyShift(action_61)
        },
        37 => {
            happyShift(action_61)
        },
        38 => {
            happyShift(action_61)
        },
        40 => {
            happyShift(action_61)
        },
        41 => {
            happyShift(action_61)
        },
        42 => {
            happyShift(action_61)
        },
        43 => {
            happyShift(action_61)
        },
        44 => {
            happyShift(action_61)
        },
        45 => {
            happyShift(action_61)
        },
        46 => {
            happyShift(action_61)
        },
        47 => {
            happyShift(action_61)
        },
        48 => {
            happyShift(action_61)
        },
        49 => {
            happyShift(action_61)
        },
        50 => {
            happyShift(action_61)
        },
        51 => {
            happyShift(action_61)
        },
        52 => {
            happyShift(action_61)
        },
        53 => {
            happyShift(action_61)
        },
        54 => {
            happyShift(action_61)
        },
        61 => {
            happyShift(action_61)
        },
        65 => {
            happyShift(action_61)
        },
        132 => {
            happyShift(action_61)
        },
        133 => {
            happyShift(action_61)
        },
        134 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_410(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        168 => {
            happyShift(action_516)
        },
        94 => {
            happyShift(action_516)
        },
        _ => {
            happyShift(action_516)
        },
    }
}

pub fn action_411(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_16
}

pub fn action_412(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_237
}

pub fn action_413(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        185 => {
            happyShift(action_113)
        },
        186 => {
            happyShift(action_113)
        },
        188 => {
            happyShift(action_113)
        },
        190 => {
            happyShift(action_113)
        },
        192 => {
            happyShift(action_113)
        },
        193 => {
            happyShift(action_113)
        },
        195 => {
            happyShift(action_113)
        },
        198 => {
            happyShift(action_113)
        },
        200 => {
            happyShift(action_113)
        },
        201 => {
            happyShift(action_113)
        },
        202 => {
            happyShift(action_113)
        },
        207 => {
            happyShift(action_113)
        },
        208 => {
            happyShift(action_113)
        },
        209 => {
            happyShift(action_113)
        },
        210 => {
            happyShift(action_113)
        },
        212 => {
            happyShift(action_113)
        },
        213 => {
            happyShift(action_113)
        },
        214 => {
            happyShift(action_113)
        },
        215 => {
            happyShift(action_113)
        },
        216 => {
            happyShift(action_113)
        },
        218 => {
            happyShift(action_113)
        },
        219 => {
            happyShift(action_113)
        },
        221 => {
            happyShift(action_113)
        },
        223 => {
            happyShift(action_113)
        },
        225 => {
            happyShift(action_113)
        },
        226 => {
            happyShift(action_113)
        },
        227 => {
            happyShift(action_113)
        },
        228 => {
            happyShift(action_113)
        },
        229 => {
            happyShift(action_113)
        },
        230 => {
            happyShift(action_113)
        },
        231 => {
            happyShift(action_113)
        },
        238 => {
            happyShift(action_113)
        },
        239 => {
            happyShift(action_113)
        },
        37 => {
            happyShift(action_113)
        },
        38 => {
            happyShift(action_113)
        },
        40 => {
            happyShift(action_113)
        },
        41 => {
            happyShift(action_113)
        },
        42 => {
            happyShift(action_113)
        },
        43 => {
            happyShift(action_113)
        },
        44 => {
            happyShift(action_113)
        },
        45 => {
            happyShift(action_113)
        },
        46 => {
            happyShift(action_113)
        },
        47 => {
            happyShift(action_113)
        },
        48 => {
            happyShift(action_113)
        },
        49 => {
            happyShift(action_113)
        },
        50 => {
            happyShift(action_113)
        },
        51 => {
            happyShift(action_113)
        },
        52 => {
            happyShift(action_113)
        },
        53 => {
            happyShift(action_113)
        },
        54 => {
            happyShift(action_113)
        },
        61 => {
            happyShift(action_113)
        },
        65 => {
            happyShift(action_113)
        },
        82 => {
            happyShift(action_113)
        },
        83 => {
            happyShift(action_113)
        },
        84 => {
            happyShift(action_113)
        },
        132 => {
            happyShift(action_113)
        },
        133 => {
            happyShift(action_113)
        },
        134 => {
            happyShift(action_113)
        },
        _ => {
            happyShift(action_113)
        },
    }
}

pub fn action_414(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_581)
        },
        150 => {
            happyShift(action_581)
        },
        186 => {
            happyShift(action_581)
        },
        193 => {
            happyShift(action_581)
        },
        213 => {
            happyShift(action_581)
        },
        214 => {
            happyShift(action_581)
        },
        216 => {
            happyShift(action_581)
        },
        231 => {
            happyShift(action_581)
        },
        237 => {
            happyShift(action_581)
        },
        238 => {
            happyShift(action_581)
        },
        239 => {
            happyShift(action_581)
        },
        64 => {
            happyShift(action_581)
        },
        69 => {
            happyShift(action_581)
        },
        70 => {
            happyShift(action_581)
        },
        71 => {
            happyShift(action_581)
        },
        72 => {
            happyShift(action_581)
        },
        73 => {
            happyShift(action_581)
        },
        75 => {
            happyShift(action_581)
        },
        76 => {
            happyShift(action_581)
        },
        77 => {
            happyShift(action_581)
        },
        78 => {
            happyShift(action_581)
        },
        80 => {
            happyShift(action_581)
        },
        81 => {
            happyShift(action_581)
        },
        133 => {
            happyShift(action_581)
        },
        134 => {
            happyShift(action_581)
        },
        _ => {
            happyShift(action_581)
        },
    }
}

pub fn action_415(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_240
}

pub fn action_416(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_252
}

pub fn action_417(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_571)
        },
        150 => {
            happyShift(action_571)
        },
        237 => {
            happyShift(action_571)
        },
        238 => {
            happyShift(action_571)
        },
        239 => {
            happyShift(action_571)
        },
        69 => {
            happyShift(action_571)
        },
        70 => {
            happyShift(action_571)
        },
        71 => {
            happyShift(action_571)
        },
        75 => {
            happyShift(action_571)
        },
        76 => {
            happyShift(action_571)
        },
        77 => {
            happyShift(action_571)
        },
        78 => {
            happyShift(action_571)
        },
        134 => {
            happyShift(action_571)
        },
        _ => {
            happyShift(action_571)
        },
    }
}

pub fn action_418(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_423)
        },
        150 => {
            happyShift(action_423)
        },
        237 => {
            happyShift(action_423)
        },
        238 => {
            happyShift(action_423)
        },
        239 => {
            happyShift(action_423)
        },
        70 => {
            happyShift(action_423)
        },
        71 => {
            happyShift(action_423)
        },
        72 => {
            happyShift(action_423)
        },
        73 => {
            happyShift(action_423)
        },
        74 => {
            happyShift(action_423)
        },
        76 => {
            happyShift(action_423)
        },
        77 => {
            happyShift(action_423)
        },
        78 => {
            happyShift(action_423)
        },
        80 => {
            happyShift(action_423)
        },
        81 => {
            happyShift(action_423)
        },
        133 => {
            happyShift(action_423)
        },
        134 => {
            happyShift(action_423)
        },
        _ => {
            happyShift(action_423)
        },
    }
}

pub fn action_419(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_575)
        },
        _ => {
            happyShift(action_575)
        },
    }
}

pub fn action_420(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_574)
        },
        _ => {
            happyShift(action_574)
        },
    }
}

pub fn action_421(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_422(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_571)
        },
        150 => {
            happyShift(action_571)
        },
        237 => {
            happyShift(action_571)
        },
        239 => {
            happyShift(action_571)
        },
        70 => {
            happyShift(action_571)
        },
        71 => {
            happyShift(action_571)
        },
        76 => {
            happyShift(action_571)
        },
        77 => {
            happyShift(action_571)
        },
        78 => {
            happyShift(action_571)
        },
        134 => {
            happyShift(action_571)
        },
        _ => {
            happyShift(action_571)
        },
    }
}

pub fn action_423(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_423)
        },
        150 => {
            happyShift(action_423)
        },
        237 => {
            happyShift(action_423)
        },
        238 => {
            happyShift(action_423)
        },
        239 => {
            happyShift(action_423)
        },
        70 => {
            happyShift(action_423)
        },
        71 => {
            happyShift(action_423)
        },
        72 => {
            happyShift(action_423)
        },
        73 => {
            happyShift(action_423)
        },
        74 => {
            happyShift(action_423)
        },
        76 => {
            happyShift(action_423)
        },
        77 => {
            happyShift(action_423)
        },
        78 => {
            happyShift(action_423)
        },
        80 => {
            happyShift(action_423)
        },
        81 => {
            happyShift(action_423)
        },
        133 => {
            happyShift(action_423)
        },
        134 => {
            happyShift(action_423)
        },
        _ => {
            happyShift(action_423)
        },
    }
}

pub fn action_424(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_258
}

pub fn action_425(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        185 => {
            happyShift(action_61)
        },
        188 => {
            happyShift(action_61)
        },
        190 => {
            happyShift(action_61)
        },
        192 => {
            happyShift(action_61)
        },
        195 => {
            happyShift(action_61)
        },
        198 => {
            happyShift(action_61)
        },
        200 => {
            happyShift(action_61)
        },
        201 => {
            happyShift(action_61)
        },
        202 => {
            happyShift(action_61)
        },
        207 => {
            happyShift(action_61)
        },
        208 => {
            happyShift(action_61)
        },
        209 => {
            happyShift(action_61)
        },
        210 => {
            happyShift(action_61)
        },
        212 => {
            happyShift(action_61)
        },
        215 => {
            happyShift(action_61)
        },
        218 => {
            happyShift(action_61)
        },
        219 => {
            happyShift(action_61)
        },
        221 => {
            happyShift(action_61)
        },
        222 => {
            happyShift(action_61)
        },
        223 => {
            happyShift(action_61)
        },
        225 => {
            happyShift(action_61)
        },
        226 => {
            happyShift(action_61)
        },
        227 => {
            happyShift(action_61)
        },
        228 => {
            happyShift(action_61)
        },
        229 => {
            happyShift(action_61)
        },
        230 => {
            happyShift(action_61)
        },
        238 => {
            happyShift(action_61)
        },
        239 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        32 => {
            happyShift(action_61)
        },
        34 => {
            happyShift(action_61)
        },
        36 => {
            happyShift(action_61)
        },
        37 => {
            happyShift(action_61)
        },
        38 => {
            happyShift(action_61)
        },
        40 => {
            happyShift(action_61)
        },
        41 => {
            happyShift(action_61)
        },
        42 => {
            happyShift(action_61)
        },
        43 => {
            happyShift(action_61)
        },
        44 => {
            happyShift(action_61)
        },
        45 => {
            happyShift(action_61)
        },
        46 => {
            happyShift(action_61)
        },
        47 => {
            happyShift(action_61)
        },
        48 => {
            happyShift(action_61)
        },
        49 => {
            happyShift(action_61)
        },
        50 => {
            happyShift(action_61)
        },
        51 => {
            happyShift(action_61)
        },
        52 => {
            happyShift(action_61)
        },
        53 => {
            happyShift(action_61)
        },
        54 => {
            happyShift(action_61)
        },
        61 => {
            happyShift(action_61)
        },
        65 => {
            happyShift(action_61)
        },
        132 => {
            happyShift(action_61)
        },
        133 => {
            happyShift(action_61)
        },
        134 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_426(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        168 => {
            happyShift(action_516)
        },
        94 => {
            happyShift(action_516)
        },
        _ => {
            happyShift(action_516)
        },
    }
}

pub fn action_427(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_15
}

pub fn action_428(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_566)
        },
        _ => {
            happyShift(action_566)
        },
    }
}

pub fn action_429(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        55 => {
            happyGoto(action_565)
        },
        _ => {
            happyGoto(action_565)
        },
    }
}

pub fn action_430(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        190 => {
            happyShift(action_26)
        },
        192 => {
            happyShift(action_26)
        },
        195 => {
            happyShift(action_26)
        },
        198 => {
            happyShift(action_26)
        },
        200 => {
            happyShift(action_26)
        },
        202 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        208 => {
            happyShift(action_26)
        },
        209 => {
            happyShift(action_26)
        },
        210 => {
            happyShift(action_26)
        },
        218 => {
            happyShift(action_26)
        },
        219 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        223 => {
            happyShift(action_26)
        },
        226 => {
            happyShift(action_26)
        },
        228 => {
            happyShift(action_26)
        },
        229 => {
            happyShift(action_26)
        },
        230 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        44 => {
            happyShift(action_26)
        },
        45 => {
            happyShift(action_26)
        },
        47 => {
            happyShift(action_26)
        },
        49 => {
            happyShift(action_26)
        },
        51 => {
            happyShift(action_26)
        },
        52 => {
            happyShift(action_26)
        },
        53 => {
            happyShift(action_26)
        },
        54 => {
            happyShift(action_26)
        },
        61 => {
            happyShift(action_26)
        },
        65 => {
            happyShift(action_26)
        },
        86 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_431(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_432(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_107
}

pub fn action_433(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_150
}

pub fn action_434(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_161
}

pub fn action_435(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_229
}

pub fn action_436(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyReduce_26
        },
        187 => {
            happyReduce_26
        },
        35 => {
            happyReduce_26
        },
        67 => {
            happyReduce_26
        },
        _ => {
            happyReduce_26
        },
    }
}

pub fn action_437(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        33 => {
            happyGoto(action_560)
        },
        _ => {
            happyGoto(action_560)
        },
    }
}

pub fn action_438(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_559)
        },
        _ => {
            happyShift(action_559)
        },
    }
}

pub fn action_439(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_179
}

pub fn action_440(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        185 => {
            happyShift(action_61)
        },
        188 => {
            happyShift(action_61)
        },
        190 => {
            happyShift(action_61)
        },
        192 => {
            happyShift(action_61)
        },
        195 => {
            happyShift(action_61)
        },
        198 => {
            happyShift(action_61)
        },
        200 => {
            happyShift(action_61)
        },
        201 => {
            happyShift(action_61)
        },
        202 => {
            happyShift(action_61)
        },
        207 => {
            happyShift(action_61)
        },
        208 => {
            happyShift(action_61)
        },
        209 => {
            happyShift(action_61)
        },
        210 => {
            happyShift(action_61)
        },
        212 => {
            happyShift(action_61)
        },
        215 => {
            happyShift(action_61)
        },
        218 => {
            happyShift(action_61)
        },
        219 => {
            happyShift(action_61)
        },
        221 => {
            happyShift(action_61)
        },
        222 => {
            happyShift(action_61)
        },
        223 => {
            happyShift(action_61)
        },
        225 => {
            happyShift(action_61)
        },
        226 => {
            happyShift(action_61)
        },
        227 => {
            happyShift(action_61)
        },
        228 => {
            happyShift(action_61)
        },
        229 => {
            happyShift(action_61)
        },
        230 => {
            happyShift(action_61)
        },
        238 => {
            happyShift(action_61)
        },
        239 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        32 => {
            happyShift(action_61)
        },
        34 => {
            happyShift(action_61)
        },
        36 => {
            happyShift(action_61)
        },
        37 => {
            happyShift(action_61)
        },
        38 => {
            happyShift(action_61)
        },
        40 => {
            happyShift(action_61)
        },
        41 => {
            happyShift(action_61)
        },
        42 => {
            happyShift(action_61)
        },
        43 => {
            happyShift(action_61)
        },
        44 => {
            happyShift(action_61)
        },
        45 => {
            happyShift(action_61)
        },
        46 => {
            happyShift(action_61)
        },
        47 => {
            happyShift(action_61)
        },
        48 => {
            happyShift(action_61)
        },
        49 => {
            happyShift(action_61)
        },
        50 => {
            happyShift(action_61)
        },
        51 => {
            happyShift(action_61)
        },
        52 => {
            happyShift(action_61)
        },
        53 => {
            happyShift(action_61)
        },
        54 => {
            happyShift(action_61)
        },
        61 => {
            happyShift(action_61)
        },
        65 => {
            happyShift(action_61)
        },
        132 => {
            happyShift(action_61)
        },
        133 => {
            happyShift(action_61)
        },
        134 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_441(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        168 => {
            happyShift(action_516)
        },
        94 => {
            happyShift(action_516)
        },
        _ => {
            happyShift(action_516)
        },
    }
}

pub fn action_442(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_17
}

pub fn action_443(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        186 => {
            happyShift(action_26)
        },
        193 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        213 => {
            happyShift(action_26)
        },
        214 => {
            happyShift(action_26)
        },
        216 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        221 => {
            happyShift(action_26)
        },
        231 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        64 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        125 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_444(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_459
}

pub fn action_445(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_552)
        },
        _ => {
            happyShift(action_552)
        },
    }
}

pub fn action_446(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        186 => {
            happyShift(action_26)
        },
        193 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        213 => {
            happyShift(action_26)
        },
        214 => {
            happyShift(action_26)
        },
        216 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        231 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        125 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_447(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyReduce_471
        },
        239 => {
            happyReduce_471
        },
        132 => {
            happyReduce_471
        },
        133 => {
            happyReduce_471
        },
        134 => {
            happyReduce_471
        },
        _ => {
            happyReduce_471
        },
    }
}

pub fn action_448(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        65 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_449(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_540)
        },
        140 => {
            happyShift(action_540)
        },
        150 => {
            happyShift(action_540)
        },
        237 => {
            happyShift(action_540)
        },
        238 => {
            happyShift(action_540)
        },
        69 => {
            happyShift(action_540)
        },
        70 => {
            happyShift(action_540)
        },
        71 => {
            happyShift(action_540)
        },
        75 => {
            happyShift(action_540)
        },
        76 => {
            happyShift(action_540)
        },
        77 => {
            happyShift(action_540)
        },
        78 => {
            happyShift(action_540)
        },
        87 => {
            happyShift(action_540)
        },
        88 => {
            happyShift(action_540)
        },
        89 => {
            happyShift(action_540)
        },
        90 => {
            happyShift(action_540)
        },
        91 => {
            happyShift(action_540)
        },
        92 => {
            happyShift(action_540)
        },
        _ => {
            happyShift(action_540)
        },
    }
}

pub fn action_450(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_535)
        },
        140 => {
            happyShift(action_535)
        },
        150 => {
            happyShift(action_535)
        },
        185 => {
            happyShift(action_535)
        },
        186 => {
            happyShift(action_535)
        },
        188 => {
            happyShift(action_535)
        },
        190 => {
            happyShift(action_535)
        },
        192 => {
            happyShift(action_535)
        },
        193 => {
            happyShift(action_535)
        },
        195 => {
            happyShift(action_535)
        },
        198 => {
            happyShift(action_535)
        },
        200 => {
            happyShift(action_535)
        },
        201 => {
            happyShift(action_535)
        },
        202 => {
            happyShift(action_535)
        },
        207 => {
            happyShift(action_535)
        },
        208 => {
            happyShift(action_535)
        },
        209 => {
            happyShift(action_535)
        },
        210 => {
            happyShift(action_535)
        },
        212 => {
            happyShift(action_535)
        },
        213 => {
            happyShift(action_535)
        },
        214 => {
            happyShift(action_535)
        },
        215 => {
            happyShift(action_535)
        },
        216 => {
            happyShift(action_535)
        },
        218 => {
            happyShift(action_535)
        },
        219 => {
            happyShift(action_535)
        },
        221 => {
            happyShift(action_535)
        },
        223 => {
            happyShift(action_535)
        },
        225 => {
            happyShift(action_535)
        },
        226 => {
            happyShift(action_535)
        },
        227 => {
            happyShift(action_535)
        },
        228 => {
            happyShift(action_535)
        },
        229 => {
            happyShift(action_535)
        },
        230 => {
            happyShift(action_535)
        },
        231 => {
            happyShift(action_535)
        },
        237 => {
            happyShift(action_535)
        },
        238 => {
            happyShift(action_535)
        },
        239 => {
            happyShift(action_535)
        },
        39 => {
            happyShift(action_535)
        },
        41 => {
            happyShift(action_535)
        },
        42 => {
            happyShift(action_535)
        },
        43 => {
            happyShift(action_535)
        },
        45 => {
            happyShift(action_535)
        },
        52 => {
            happyShift(action_535)
        },
        53 => {
            happyShift(action_535)
        },
        54 => {
            happyShift(action_535)
        },
        61 => {
            happyShift(action_535)
        },
        64 => {
            happyShift(action_535)
        },
        75 => {
            happyShift(action_535)
        },
        76 => {
            happyShift(action_535)
        },
        77 => {
            happyShift(action_535)
        },
        78 => {
            happyShift(action_535)
        },
        87 => {
            happyShift(action_535)
        },
        88 => {
            happyShift(action_535)
        },
        89 => {
            happyShift(action_535)
        },
        90 => {
            happyShift(action_535)
        },
        91 => {
            happyShift(action_535)
        },
        92 => {
            happyShift(action_535)
        },
        134 => {
            happyShift(action_535)
        },
        _ => {
            happyShift(action_535)
        },
    }
}

pub fn action_451(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_540)
        },
        140 => {
            happyShift(action_540)
        },
        150 => {
            happyShift(action_540)
        },
        237 => {
            happyShift(action_540)
        },
        238 => {
            happyShift(action_540)
        },
        69 => {
            happyShift(action_540)
        },
        70 => {
            happyShift(action_540)
        },
        71 => {
            happyShift(action_540)
        },
        75 => {
            happyShift(action_540)
        },
        76 => {
            happyShift(action_540)
        },
        77 => {
            happyShift(action_540)
        },
        78 => {
            happyShift(action_540)
        },
        87 => {
            happyShift(action_540)
        },
        88 => {
            happyShift(action_540)
        },
        89 => {
            happyShift(action_540)
        },
        90 => {
            happyShift(action_540)
        },
        91 => {
            happyShift(action_540)
        },
        92 => {
            happyShift(action_540)
        },
        _ => {
            happyShift(action_540)
        },
    }
}

pub fn action_452(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        185 => {
            happyShift(action_113)
        },
        186 => {
            happyShift(action_113)
        },
        188 => {
            happyShift(action_113)
        },
        193 => {
            happyShift(action_113)
        },
        201 => {
            happyShift(action_113)
        },
        207 => {
            happyShift(action_113)
        },
        212 => {
            happyShift(action_113)
        },
        213 => {
            happyShift(action_113)
        },
        214 => {
            happyShift(action_113)
        },
        215 => {
            happyShift(action_113)
        },
        216 => {
            happyShift(action_113)
        },
        221 => {
            happyShift(action_113)
        },
        225 => {
            happyShift(action_113)
        },
        227 => {
            happyShift(action_113)
        },
        231 => {
            happyShift(action_113)
        },
        239 => {
            happyShift(action_113)
        },
        39 => {
            happyShift(action_113)
        },
        41 => {
            happyShift(action_113)
        },
        42 => {
            happyShift(action_113)
        },
        43 => {
            happyShift(action_113)
        },
        64 => {
            happyShift(action_113)
        },
        134 => {
            happyShift(action_113)
        },
        _ => {
            happyShift(action_113)
        },
    }
}

pub fn action_453(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        186 => {
            happyShift(action_171)
        },
        188 => {
            happyShift(action_171)
        },
        193 => {
            happyShift(action_171)
        },
        201 => {
            happyShift(action_171)
        },
        213 => {
            happyShift(action_171)
        },
        214 => {
            happyShift(action_171)
        },
        215 => {
            happyShift(action_171)
        },
        216 => {
            happyShift(action_171)
        },
        221 => {
            happyShift(action_171)
        },
        225 => {
            happyShift(action_171)
        },
        227 => {
            happyShift(action_171)
        },
        231 => {
            happyShift(action_171)
        },
        239 => {
            happyShift(action_171)
        },
        41 => {
            happyShift(action_171)
        },
        64 => {
            happyShift(action_171)
        },
        134 => {
            happyShift(action_171)
        },
        _ => {
            happyShift(action_171)
        },
    }
}

pub fn action_454(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_535)
        },
        140 => {
            happyShift(action_535)
        },
        150 => {
            happyShift(action_535)
        },
        185 => {
            happyShift(action_535)
        },
        186 => {
            happyShift(action_535)
        },
        188 => {
            happyShift(action_535)
        },
        190 => {
            happyShift(action_535)
        },
        192 => {
            happyShift(action_535)
        },
        193 => {
            happyShift(action_535)
        },
        195 => {
            happyShift(action_535)
        },
        198 => {
            happyShift(action_535)
        },
        200 => {
            happyShift(action_535)
        },
        201 => {
            happyShift(action_535)
        },
        202 => {
            happyShift(action_535)
        },
        207 => {
            happyShift(action_535)
        },
        208 => {
            happyShift(action_535)
        },
        209 => {
            happyShift(action_535)
        },
        210 => {
            happyShift(action_535)
        },
        212 => {
            happyShift(action_535)
        },
        213 => {
            happyShift(action_535)
        },
        214 => {
            happyShift(action_535)
        },
        215 => {
            happyShift(action_535)
        },
        216 => {
            happyShift(action_535)
        },
        218 => {
            happyShift(action_535)
        },
        219 => {
            happyShift(action_535)
        },
        221 => {
            happyShift(action_535)
        },
        223 => {
            happyShift(action_535)
        },
        225 => {
            happyShift(action_535)
        },
        226 => {
            happyShift(action_535)
        },
        227 => {
            happyShift(action_535)
        },
        228 => {
            happyShift(action_535)
        },
        229 => {
            happyShift(action_535)
        },
        230 => {
            happyShift(action_535)
        },
        231 => {
            happyShift(action_535)
        },
        237 => {
            happyShift(action_535)
        },
        238 => {
            happyShift(action_535)
        },
        239 => {
            happyShift(action_535)
        },
        40 => {
            happyShift(action_535)
        },
        41 => {
            happyShift(action_535)
        },
        42 => {
            happyShift(action_535)
        },
        43 => {
            happyShift(action_535)
        },
        45 => {
            happyShift(action_535)
        },
        52 => {
            happyShift(action_535)
        },
        53 => {
            happyShift(action_535)
        },
        54 => {
            happyShift(action_535)
        },
        61 => {
            happyShift(action_535)
        },
        64 => {
            happyShift(action_535)
        },
        75 => {
            happyShift(action_535)
        },
        76 => {
            happyShift(action_535)
        },
        77 => {
            happyShift(action_535)
        },
        78 => {
            happyShift(action_535)
        },
        87 => {
            happyShift(action_535)
        },
        88 => {
            happyShift(action_535)
        },
        89 => {
            happyShift(action_535)
        },
        90 => {
            happyShift(action_535)
        },
        91 => {
            happyShift(action_535)
        },
        92 => {
            happyShift(action_535)
        },
        133 => {
            happyShift(action_535)
        },
        134 => {
            happyShift(action_535)
        },
        _ => {
            happyShift(action_535)
        },
    }
}

pub fn action_455(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_530)
        },
        _ => {
            happyShift(action_530)
        },
    }
}

pub fn action_456(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_529)
        },
        _ => {
            happyShift(action_529)
        },
    }
}

pub fn action_457(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_285
}

pub fn action_458(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_527)
        },
        179 => {
            happyShift(action_527)
        },
        _ => {
            happyShift(action_527)
        },
    }
}

pub fn action_459(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        185 => {
            happyShift(action_113)
        },
        188 => {
            happyShift(action_113)
        },
        190 => {
            happyShift(action_113)
        },
        192 => {
            happyShift(action_113)
        },
        195 => {
            happyShift(action_113)
        },
        198 => {
            happyShift(action_113)
        },
        200 => {
            happyShift(action_113)
        },
        201 => {
            happyShift(action_113)
        },
        202 => {
            happyShift(action_113)
        },
        207 => {
            happyShift(action_113)
        },
        208 => {
            happyShift(action_113)
        },
        209 => {
            happyShift(action_113)
        },
        210 => {
            happyShift(action_113)
        },
        212 => {
            happyShift(action_113)
        },
        215 => {
            happyShift(action_113)
        },
        218 => {
            happyShift(action_113)
        },
        219 => {
            happyShift(action_113)
        },
        221 => {
            happyShift(action_113)
        },
        223 => {
            happyShift(action_113)
        },
        225 => {
            happyShift(action_113)
        },
        226 => {
            happyShift(action_113)
        },
        227 => {
            happyShift(action_113)
        },
        228 => {
            happyShift(action_113)
        },
        229 => {
            happyShift(action_113)
        },
        230 => {
            happyShift(action_113)
        },
        238 => {
            happyShift(action_113)
        },
        239 => {
            happyShift(action_113)
        },
        40 => {
            happyShift(action_113)
        },
        41 => {
            happyShift(action_113)
        },
        42 => {
            happyShift(action_113)
        },
        43 => {
            happyShift(action_113)
        },
        45 => {
            happyShift(action_113)
        },
        52 => {
            happyShift(action_113)
        },
        53 => {
            happyShift(action_113)
        },
        54 => {
            happyShift(action_113)
        },
        61 => {
            happyShift(action_113)
        },
        134 => {
            happyShift(action_113)
        },
        _ => {
            happyShift(action_113)
        },
    }
}

pub fn action_460(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_302
}

pub fn action_461(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_314
}

pub fn action_462(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_19
}

pub fn action_463(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_91
}

pub fn action_464(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_524)
        },
        150 => {
            happyShift(action_524)
        },
        237 => {
            happyShift(action_524)
        },
        238 => {
            happyShift(action_524)
        },
        66 => {
            happyShift(action_524)
        },
        68 => {
            happyShift(action_524)
        },
        69 => {
            happyShift(action_524)
        },
        70 => {
            happyShift(action_524)
        },
        71 => {
            happyShift(action_524)
        },
        72 => {
            happyShift(action_524)
        },
        73 => {
            happyShift(action_524)
        },
        75 => {
            happyShift(action_524)
        },
        76 => {
            happyShift(action_524)
        },
        77 => {
            happyShift(action_524)
        },
        78 => {
            happyShift(action_524)
        },
        _ => {
            happyShift(action_524)
        },
    }
}

pub fn action_465(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        185 => {
            happyShift(action_475)
        },
        186 => {
            happyShift(action_475)
        },
        188 => {
            happyShift(action_475)
        },
        190 => {
            happyShift(action_475)
        },
        192 => {
            happyShift(action_475)
        },
        193 => {
            happyShift(action_475)
        },
        195 => {
            happyShift(action_475)
        },
        198 => {
            happyShift(action_475)
        },
        200 => {
            happyShift(action_475)
        },
        201 => {
            happyShift(action_475)
        },
        202 => {
            happyShift(action_475)
        },
        207 => {
            happyShift(action_475)
        },
        208 => {
            happyShift(action_475)
        },
        209 => {
            happyShift(action_475)
        },
        210 => {
            happyShift(action_475)
        },
        212 => {
            happyShift(action_475)
        },
        213 => {
            happyShift(action_475)
        },
        214 => {
            happyShift(action_475)
        },
        215 => {
            happyShift(action_475)
        },
        216 => {
            happyShift(action_475)
        },
        218 => {
            happyShift(action_475)
        },
        219 => {
            happyShift(action_475)
        },
        221 => {
            happyShift(action_475)
        },
        223 => {
            happyShift(action_475)
        },
        225 => {
            happyShift(action_475)
        },
        226 => {
            happyShift(action_475)
        },
        227 => {
            happyShift(action_475)
        },
        228 => {
            happyShift(action_475)
        },
        229 => {
            happyShift(action_475)
        },
        230 => {
            happyShift(action_475)
        },
        231 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        238 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        39 => {
            happyShift(action_475)
        },
        41 => {
            happyShift(action_475)
        },
        42 => {
            happyShift(action_475)
        },
        43 => {
            happyShift(action_475)
        },
        45 => {
            happyShift(action_475)
        },
        52 => {
            happyShift(action_475)
        },
        53 => {
            happyShift(action_475)
        },
        54 => {
            happyShift(action_475)
        },
        61 => {
            happyShift(action_475)
        },
        64 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_466(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_524)
        },
        150 => {
            happyShift(action_524)
        },
        237 => {
            happyShift(action_524)
        },
        238 => {
            happyShift(action_524)
        },
        66 => {
            happyShift(action_524)
        },
        68 => {
            happyShift(action_524)
        },
        69 => {
            happyShift(action_524)
        },
        70 => {
            happyShift(action_524)
        },
        71 => {
            happyShift(action_524)
        },
        72 => {
            happyShift(action_524)
        },
        73 => {
            happyShift(action_524)
        },
        75 => {
            happyShift(action_524)
        },
        76 => {
            happyShift(action_524)
        },
        77 => {
            happyShift(action_524)
        },
        78 => {
            happyShift(action_524)
        },
        _ => {
            happyShift(action_524)
        },
    }
}

pub fn action_467(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        185 => {
            happyShift(action_475)
        },
        186 => {
            happyShift(action_475)
        },
        188 => {
            happyShift(action_475)
        },
        190 => {
            happyShift(action_475)
        },
        192 => {
            happyShift(action_475)
        },
        193 => {
            happyShift(action_475)
        },
        195 => {
            happyShift(action_475)
        },
        198 => {
            happyShift(action_475)
        },
        200 => {
            happyShift(action_475)
        },
        201 => {
            happyShift(action_475)
        },
        202 => {
            happyShift(action_475)
        },
        207 => {
            happyShift(action_475)
        },
        208 => {
            happyShift(action_475)
        },
        209 => {
            happyShift(action_475)
        },
        210 => {
            happyShift(action_475)
        },
        212 => {
            happyShift(action_475)
        },
        213 => {
            happyShift(action_475)
        },
        214 => {
            happyShift(action_475)
        },
        215 => {
            happyShift(action_475)
        },
        216 => {
            happyShift(action_475)
        },
        218 => {
            happyShift(action_475)
        },
        219 => {
            happyShift(action_475)
        },
        221 => {
            happyShift(action_475)
        },
        223 => {
            happyShift(action_475)
        },
        225 => {
            happyShift(action_475)
        },
        226 => {
            happyShift(action_475)
        },
        227 => {
            happyShift(action_475)
        },
        228 => {
            happyShift(action_475)
        },
        229 => {
            happyShift(action_475)
        },
        230 => {
            happyShift(action_475)
        },
        231 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        238 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        40 => {
            happyShift(action_475)
        },
        41 => {
            happyShift(action_475)
        },
        42 => {
            happyShift(action_475)
        },
        43 => {
            happyShift(action_475)
        },
        45 => {
            happyShift(action_475)
        },
        52 => {
            happyShift(action_475)
        },
        53 => {
            happyShift(action_475)
        },
        54 => {
            happyShift(action_475)
        },
        61 => {
            happyShift(action_475)
        },
        64 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        133 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_468(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        185 => {
            happyShift(action_475)
        },
        188 => {
            happyShift(action_475)
        },
        190 => {
            happyShift(action_475)
        },
        192 => {
            happyShift(action_475)
        },
        195 => {
            happyShift(action_475)
        },
        198 => {
            happyShift(action_475)
        },
        200 => {
            happyShift(action_475)
        },
        201 => {
            happyShift(action_475)
        },
        202 => {
            happyShift(action_475)
        },
        207 => {
            happyShift(action_475)
        },
        208 => {
            happyShift(action_475)
        },
        209 => {
            happyShift(action_475)
        },
        210 => {
            happyShift(action_475)
        },
        212 => {
            happyShift(action_475)
        },
        215 => {
            happyShift(action_475)
        },
        218 => {
            happyShift(action_475)
        },
        219 => {
            happyShift(action_475)
        },
        221 => {
            happyShift(action_475)
        },
        223 => {
            happyShift(action_475)
        },
        225 => {
            happyShift(action_475)
        },
        226 => {
            happyShift(action_475)
        },
        227 => {
            happyShift(action_475)
        },
        228 => {
            happyShift(action_475)
        },
        229 => {
            happyShift(action_475)
        },
        230 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        238 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        40 => {
            happyShift(action_475)
        },
        41 => {
            happyShift(action_475)
        },
        42 => {
            happyShift(action_475)
        },
        43 => {
            happyShift(action_475)
        },
        45 => {
            happyShift(action_475)
        },
        52 => {
            happyShift(action_475)
        },
        53 => {
            happyShift(action_475)
        },
        54 => {
            happyShift(action_475)
        },
        61 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_469(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        190 => {
            happyShift(action_26)
        },
        192 => {
            happyShift(action_26)
        },
        195 => {
            happyShift(action_26)
        },
        198 => {
            happyShift(action_26)
        },
        200 => {
            happyShift(action_26)
        },
        202 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        208 => {
            happyShift(action_26)
        },
        209 => {
            happyShift(action_26)
        },
        210 => {
            happyShift(action_26)
        },
        218 => {
            happyShift(action_26)
        },
        219 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        223 => {
            happyShift(action_26)
        },
        226 => {
            happyShift(action_26)
        },
        228 => {
            happyShift(action_26)
        },
        229 => {
            happyShift(action_26)
        },
        230 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        44 => {
            happyShift(action_26)
        },
        45 => {
            happyShift(action_26)
        },
        47 => {
            happyShift(action_26)
        },
        49 => {
            happyShift(action_26)
        },
        51 => {
            happyShift(action_26)
        },
        52 => {
            happyShift(action_26)
        },
        53 => {
            happyShift(action_26)
        },
        54 => {
            happyShift(action_26)
        },
        61 => {
            happyShift(action_26)
        },
        65 => {
            happyShift(action_26)
        },
        86 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_470(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        185 => {
            happyShift(action_61)
        },
        188 => {
            happyShift(action_61)
        },
        190 => {
            happyShift(action_61)
        },
        192 => {
            happyShift(action_61)
        },
        195 => {
            happyShift(action_61)
        },
        198 => {
            happyShift(action_61)
        },
        200 => {
            happyShift(action_61)
        },
        201 => {
            happyShift(action_61)
        },
        202 => {
            happyShift(action_61)
        },
        207 => {
            happyShift(action_61)
        },
        208 => {
            happyShift(action_61)
        },
        209 => {
            happyShift(action_61)
        },
        210 => {
            happyShift(action_61)
        },
        212 => {
            happyShift(action_61)
        },
        215 => {
            happyShift(action_61)
        },
        218 => {
            happyShift(action_61)
        },
        219 => {
            happyShift(action_61)
        },
        221 => {
            happyShift(action_61)
        },
        222 => {
            happyShift(action_61)
        },
        223 => {
            happyShift(action_61)
        },
        225 => {
            happyShift(action_61)
        },
        226 => {
            happyShift(action_61)
        },
        227 => {
            happyShift(action_61)
        },
        228 => {
            happyShift(action_61)
        },
        229 => {
            happyShift(action_61)
        },
        230 => {
            happyShift(action_61)
        },
        238 => {
            happyShift(action_61)
        },
        239 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        32 => {
            happyShift(action_61)
        },
        34 => {
            happyShift(action_61)
        },
        36 => {
            happyShift(action_61)
        },
        37 => {
            happyShift(action_61)
        },
        38 => {
            happyShift(action_61)
        },
        40 => {
            happyShift(action_61)
        },
        41 => {
            happyShift(action_61)
        },
        42 => {
            happyShift(action_61)
        },
        43 => {
            happyShift(action_61)
        },
        44 => {
            happyShift(action_61)
        },
        45 => {
            happyShift(action_61)
        },
        46 => {
            happyShift(action_61)
        },
        47 => {
            happyShift(action_61)
        },
        48 => {
            happyShift(action_61)
        },
        49 => {
            happyShift(action_61)
        },
        50 => {
            happyShift(action_61)
        },
        51 => {
            happyShift(action_61)
        },
        52 => {
            happyShift(action_61)
        },
        53 => {
            happyShift(action_61)
        },
        54 => {
            happyShift(action_61)
        },
        61 => {
            happyShift(action_61)
        },
        65 => {
            happyShift(action_61)
        },
        132 => {
            happyShift(action_61)
        },
        133 => {
            happyShift(action_61)
        },
        134 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_471(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        168 => {
            happyShift(action_516)
        },
        94 => {
            happyShift(action_516)
        },
        _ => {
            happyShift(action_516)
        },
    }
}

pub fn action_472(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_13
}

pub fn action_473(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_514)
        },
        _ => {
            happyShift(action_514)
        },
    }
}

pub fn action_474(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        139 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_475(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        133 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_476(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        65 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        132 => {
            happyShift(action_475)
        },
        133 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_477(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_478(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_273
}

pub fn action_479(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_480(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_264
}

pub fn action_481(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_482(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_265
}

pub fn action_483(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_278
}

pub fn action_484(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        186 => {
            happyShift(action_475)
        },
        193 => {
            happyShift(action_475)
        },
        213 => {
            happyShift(action_475)
        },
        214 => {
            happyShift(action_475)
        },
        216 => {
            happyShift(action_475)
        },
        231 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        64 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_485(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_507)
        },
        _ => {
            happyShift(action_507)
        },
    }
}

pub fn action_486(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_506)
        },
        _ => {
            happyShift(action_506)
        },
    }
}

pub fn action_487(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_505)
        },
        _ => {
            happyShift(action_505)
        },
    }
}

pub fn action_488(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_504)
        },
        _ => {
            happyShift(action_504)
        },
    }
}

pub fn action_489(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        237 => {
            happyShift(action_254)
        },
        238 => {
            happyShift(action_254)
        },
        62 => {
            happyShift(action_254)
        },
        63 => {
            happyShift(action_254)
        },
        131 => {
            happyShift(action_254)
        },
        _ => {
            happyShift(action_254)
        },
    }
}

pub fn action_490(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_500)
        },
        _ => {
            happyShift(action_500)
        },
    }
}

pub fn action_491(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_499)
        },
        _ => {
            happyShift(action_499)
        },
    }
}

pub fn action_492(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_498)
        },
        _ => {
            happyShift(action_498)
        },
    }
}

pub fn action_493(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        193 => {
            happyShift(action_496)
        },
        237 => {
            happyShift(action_496)
        },
        135 => {
            happyShift(action_496)
        },
        136 => {
            happyShift(action_496)
        },
        _ => {
            happyShift(action_496)
        },
    }
}

pub fn action_494(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_765)
        },
        179 => {
            happyShift(action_765)
        },
        _ => {
            happyShift(action_765)
        },
    }
}

pub fn action_495(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_476
}

pub fn action_496(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_480
}

pub fn action_497(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_764)
        },
        _ => {
            happyShift(action_764)
        },
    }
}

pub fn action_498(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_171
}

pub fn action_499(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_172
}

pub fn action_500(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        236 => {
            happyShift(action_42)
        },
        128 => {
            happyShift(action_42)
        },
        _ => {
            happyShift(action_42)
        },
    }
}

pub fn action_501(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_761)
        },
        182 => {
            happyShift(action_761)
        },
        _ => {
            happyShift(action_761)
        },
    }
}

pub fn action_502(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_215
}

pub fn action_503(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        168 => {
            happyShift(action_760)
        },
        239 => {
            happyShift(action_760)
        },
        133 => {
            happyShift(action_760)
        },
        134 => {
            happyShift(action_760)
        },
        _ => {
            happyShift(action_760)
        },
    }
}

pub fn action_504(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        237 => {
            happyShift(action_254)
        },
        238 => {
            happyShift(action_254)
        },
        62 => {
            happyShift(action_254)
        },
        63 => {
            happyShift(action_254)
        },
        131 => {
            happyShift(action_254)
        },
        _ => {
            happyShift(action_254)
        },
    }
}

pub fn action_505(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_757)
        },
        _ => {
            happyShift(action_757)
        },
    }
}

pub fn action_506(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_126
}

pub fn action_507(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_125
}

pub fn action_508(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_266
}

pub fn action_509(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_269
}

pub fn action_510(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_281
}

pub fn action_511(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        186 => {
            happyShift(action_475)
        },
        193 => {
            happyShift(action_475)
        },
        213 => {
            happyShift(action_475)
        },
        214 => {
            happyShift(action_475)
        },
        216 => {
            happyShift(action_475)
        },
        231 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        64 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        133 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_512(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        139 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_513(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_274
}

pub fn action_514(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_515(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_95
}

pub fn action_516(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        93 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_517(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_20
}

pub fn action_518(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_754)
        },
        _ => {
            happyShift(action_754)
        },
    }
}

pub fn action_519(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_753)
        },
        _ => {
            happyShift(action_753)
        },
    }
}

pub fn action_520(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        187 => {
            happyShift(action_406)
        },
        35 => {
            happyShift(action_406)
        },
        67 => {
            happyShift(action_406)
        },
        _ => {
            happyShift(action_406)
        },
    }
}

pub fn action_521(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        187 => {
            happyShift(action_406)
        },
        35 => {
            happyShift(action_406)
        },
        67 => {
            happyShift(action_406)
        },
        _ => {
            happyShift(action_406)
        },
    }
}

pub fn action_522(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        185 => {
            happyShift(action_475)
        },
        186 => {
            happyShift(action_475)
        },
        188 => {
            happyShift(action_475)
        },
        190 => {
            happyShift(action_475)
        },
        192 => {
            happyShift(action_475)
        },
        193 => {
            happyShift(action_475)
        },
        195 => {
            happyShift(action_475)
        },
        198 => {
            happyShift(action_475)
        },
        200 => {
            happyShift(action_475)
        },
        201 => {
            happyShift(action_475)
        },
        202 => {
            happyShift(action_475)
        },
        207 => {
            happyShift(action_475)
        },
        208 => {
            happyShift(action_475)
        },
        209 => {
            happyShift(action_475)
        },
        210 => {
            happyShift(action_475)
        },
        212 => {
            happyShift(action_475)
        },
        213 => {
            happyShift(action_475)
        },
        214 => {
            happyShift(action_475)
        },
        215 => {
            happyShift(action_475)
        },
        216 => {
            happyShift(action_475)
        },
        218 => {
            happyShift(action_475)
        },
        219 => {
            happyShift(action_475)
        },
        221 => {
            happyShift(action_475)
        },
        223 => {
            happyShift(action_475)
        },
        225 => {
            happyShift(action_475)
        },
        226 => {
            happyShift(action_475)
        },
        227 => {
            happyShift(action_475)
        },
        228 => {
            happyShift(action_475)
        },
        229 => {
            happyShift(action_475)
        },
        230 => {
            happyShift(action_475)
        },
        231 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        238 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        40 => {
            happyShift(action_475)
        },
        41 => {
            happyShift(action_475)
        },
        42 => {
            happyShift(action_475)
        },
        43 => {
            happyShift(action_475)
        },
        45 => {
            happyShift(action_475)
        },
        52 => {
            happyShift(action_475)
        },
        53 => {
            happyShift(action_475)
        },
        54 => {
            happyShift(action_475)
        },
        61 => {
            happyShift(action_475)
        },
        64 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_523(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_230
}

pub fn action_524(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_751)
        },
        150 => {
            happyShift(action_751)
        },
        237 => {
            happyShift(action_751)
        },
        238 => {
            happyShift(action_751)
        },
        239 => {
            happyShift(action_751)
        },
        70 => {
            happyShift(action_751)
        },
        71 => {
            happyShift(action_751)
        },
        72 => {
            happyShift(action_751)
        },
        73 => {
            happyShift(action_751)
        },
        74 => {
            happyShift(action_751)
        },
        76 => {
            happyShift(action_751)
        },
        77 => {
            happyShift(action_751)
        },
        78 => {
            happyShift(action_751)
        },
        133 => {
            happyShift(action_751)
        },
        134 => {
            happyShift(action_751)
        },
        _ => {
            happyShift(action_751)
        },
    }
}

pub fn action_525(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_750)
        },
        150 => {
            happyShift(action_750)
        },
        237 => {
            happyShift(action_750)
        },
        238 => {
            happyShift(action_750)
        },
        239 => {
            happyShift(action_750)
        },
        65 => {
            happyShift(action_750)
        },
        69 => {
            happyShift(action_750)
        },
        70 => {
            happyShift(action_750)
        },
        71 => {
            happyShift(action_750)
        },
        72 => {
            happyShift(action_750)
        },
        73 => {
            happyShift(action_750)
        },
        75 => {
            happyShift(action_750)
        },
        76 => {
            happyShift(action_750)
        },
        77 => {
            happyShift(action_750)
        },
        78 => {
            happyShift(action_750)
        },
        132 => {
            happyShift(action_750)
        },
        133 => {
            happyShift(action_750)
        },
        134 => {
            happyShift(action_750)
        },
        _ => {
            happyShift(action_750)
        },
    }
}

pub fn action_526(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        187 => {
            happyShift(action_406)
        },
        35 => {
            happyShift(action_406)
        },
        67 => {
            happyShift(action_406)
        },
        _ => {
            happyShift(action_406)
        },
    }
}

pub fn action_527(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_279
}

pub fn action_528(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        237 => {
            happyShift(action_748)
        },
        _ => {
            happyShift(action_748)
        },
    }
}

pub fn action_529(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        183 => {
            happyShift(action_747)
        },
        185 => {
            happyShift(action_747)
        },
        188 => {
            happyShift(action_747)
        },
        190 => {
            happyShift(action_747)
        },
        192 => {
            happyShift(action_747)
        },
        195 => {
            happyShift(action_747)
        },
        198 => {
            happyShift(action_747)
        },
        200 => {
            happyShift(action_747)
        },
        201 => {
            happyShift(action_747)
        },
        202 => {
            happyShift(action_747)
        },
        207 => {
            happyShift(action_747)
        },
        208 => {
            happyShift(action_747)
        },
        209 => {
            happyShift(action_747)
        },
        210 => {
            happyShift(action_747)
        },
        212 => {
            happyShift(action_747)
        },
        215 => {
            happyShift(action_747)
        },
        218 => {
            happyShift(action_747)
        },
        219 => {
            happyShift(action_747)
        },
        221 => {
            happyShift(action_747)
        },
        223 => {
            happyShift(action_747)
        },
        225 => {
            happyShift(action_747)
        },
        226 => {
            happyShift(action_747)
        },
        227 => {
            happyShift(action_747)
        },
        228 => {
            happyShift(action_747)
        },
        229 => {
            happyShift(action_747)
        },
        230 => {
            happyShift(action_747)
        },
        238 => {
            happyShift(action_747)
        },
        239 => {
            happyShift(action_747)
        },
        37 => {
            happyShift(action_747)
        },
        38 => {
            happyShift(action_747)
        },
        40 => {
            happyShift(action_747)
        },
        41 => {
            happyShift(action_747)
        },
        42 => {
            happyShift(action_747)
        },
        43 => {
            happyShift(action_747)
        },
        44 => {
            happyShift(action_747)
        },
        45 => {
            happyShift(action_747)
        },
        46 => {
            happyShift(action_747)
        },
        47 => {
            happyShift(action_747)
        },
        48 => {
            happyShift(action_747)
        },
        49 => {
            happyShift(action_747)
        },
        50 => {
            happyShift(action_747)
        },
        51 => {
            happyShift(action_747)
        },
        52 => {
            happyShift(action_747)
        },
        53 => {
            happyShift(action_747)
        },
        54 => {
            happyShift(action_747)
        },
        61 => {
            happyShift(action_747)
        },
        65 => {
            happyShift(action_747)
        },
        84 => {
            happyShift(action_747)
        },
        132 => {
            happyShift(action_747)
        },
        133 => {
            happyShift(action_747)
        },
        134 => {
            happyShift(action_747)
        },
        _ => {
            happyShift(action_747)
        },
    }
}

pub fn action_530(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_312
}

pub fn action_531(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_532(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_300
}

pub fn action_533(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        185 => {
            happyShift(action_113)
        },
        186 => {
            happyShift(action_113)
        },
        188 => {
            happyShift(action_113)
        },
        190 => {
            happyShift(action_113)
        },
        192 => {
            happyShift(action_113)
        },
        193 => {
            happyShift(action_113)
        },
        195 => {
            happyShift(action_113)
        },
        198 => {
            happyShift(action_113)
        },
        200 => {
            happyShift(action_113)
        },
        201 => {
            happyShift(action_113)
        },
        202 => {
            happyShift(action_113)
        },
        207 => {
            happyShift(action_113)
        },
        208 => {
            happyShift(action_113)
        },
        209 => {
            happyShift(action_113)
        },
        210 => {
            happyShift(action_113)
        },
        212 => {
            happyShift(action_113)
        },
        213 => {
            happyShift(action_113)
        },
        214 => {
            happyShift(action_113)
        },
        215 => {
            happyShift(action_113)
        },
        216 => {
            happyShift(action_113)
        },
        218 => {
            happyShift(action_113)
        },
        219 => {
            happyShift(action_113)
        },
        221 => {
            happyShift(action_113)
        },
        223 => {
            happyShift(action_113)
        },
        225 => {
            happyShift(action_113)
        },
        226 => {
            happyShift(action_113)
        },
        227 => {
            happyShift(action_113)
        },
        228 => {
            happyShift(action_113)
        },
        229 => {
            happyShift(action_113)
        },
        230 => {
            happyShift(action_113)
        },
        231 => {
            happyShift(action_113)
        },
        238 => {
            happyShift(action_113)
        },
        239 => {
            happyShift(action_113)
        },
        40 => {
            happyShift(action_113)
        },
        41 => {
            happyShift(action_113)
        },
        42 => {
            happyShift(action_113)
        },
        43 => {
            happyShift(action_113)
        },
        45 => {
            happyShift(action_113)
        },
        52 => {
            happyShift(action_113)
        },
        53 => {
            happyShift(action_113)
        },
        54 => {
            happyShift(action_113)
        },
        61 => {
            happyShift(action_113)
        },
        64 => {
            happyShift(action_113)
        },
        134 => {
            happyShift(action_113)
        },
        _ => {
            happyShift(action_113)
        },
    }
}

pub fn action_534(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        185 => {
            happyReduce_473
        },
        186 => {
            happyReduce_473
        },
        188 => {
            happyReduce_473
        },
        190 => {
            happyReduce_473
        },
        192 => {
            happyReduce_473
        },
        193 => {
            happyReduce_473
        },
        195 => {
            happyReduce_473
        },
        198 => {
            happyReduce_473
        },
        200 => {
            happyReduce_473
        },
        201 => {
            happyReduce_473
        },
        202 => {
            happyReduce_473
        },
        207 => {
            happyReduce_473
        },
        208 => {
            happyReduce_473
        },
        209 => {
            happyReduce_473
        },
        210 => {
            happyReduce_473
        },
        212 => {
            happyReduce_473
        },
        213 => {
            happyReduce_473
        },
        214 => {
            happyReduce_473
        },
        215 => {
            happyReduce_473
        },
        216 => {
            happyReduce_473
        },
        218 => {
            happyReduce_473
        },
        219 => {
            happyReduce_473
        },
        221 => {
            happyReduce_473
        },
        223 => {
            happyReduce_473
        },
        225 => {
            happyReduce_473
        },
        226 => {
            happyReduce_473
        },
        227 => {
            happyReduce_473
        },
        228 => {
            happyReduce_473
        },
        229 => {
            happyReduce_473
        },
        230 => {
            happyReduce_473
        },
        231 => {
            happyReduce_473
        },
        238 => {
            happyReduce_473
        },
        239 => {
            happyReduce_473
        },
        _ => {
            happyReduce_473
        },
    }
}

pub fn action_535(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_535)
        },
        140 => {
            happyShift(action_535)
        },
        150 => {
            happyShift(action_535)
        },
        185 => {
            happyShift(action_535)
        },
        186 => {
            happyShift(action_535)
        },
        188 => {
            happyShift(action_535)
        },
        190 => {
            happyShift(action_535)
        },
        192 => {
            happyShift(action_535)
        },
        193 => {
            happyShift(action_535)
        },
        195 => {
            happyShift(action_535)
        },
        198 => {
            happyShift(action_535)
        },
        200 => {
            happyShift(action_535)
        },
        201 => {
            happyShift(action_535)
        },
        202 => {
            happyShift(action_535)
        },
        207 => {
            happyShift(action_535)
        },
        208 => {
            happyShift(action_535)
        },
        209 => {
            happyShift(action_535)
        },
        210 => {
            happyShift(action_535)
        },
        212 => {
            happyShift(action_535)
        },
        213 => {
            happyShift(action_535)
        },
        214 => {
            happyShift(action_535)
        },
        215 => {
            happyShift(action_535)
        },
        216 => {
            happyShift(action_535)
        },
        218 => {
            happyShift(action_535)
        },
        219 => {
            happyShift(action_535)
        },
        221 => {
            happyShift(action_535)
        },
        223 => {
            happyShift(action_535)
        },
        225 => {
            happyShift(action_535)
        },
        226 => {
            happyShift(action_535)
        },
        227 => {
            happyShift(action_535)
        },
        228 => {
            happyShift(action_535)
        },
        229 => {
            happyShift(action_535)
        },
        230 => {
            happyShift(action_535)
        },
        231 => {
            happyShift(action_535)
        },
        237 => {
            happyShift(action_535)
        },
        238 => {
            happyShift(action_535)
        },
        239 => {
            happyShift(action_535)
        },
        37 => {
            happyShift(action_535)
        },
        38 => {
            happyShift(action_535)
        },
        40 => {
            happyShift(action_535)
        },
        41 => {
            happyShift(action_535)
        },
        42 => {
            happyShift(action_535)
        },
        43 => {
            happyShift(action_535)
        },
        44 => {
            happyShift(action_535)
        },
        45 => {
            happyShift(action_535)
        },
        46 => {
            happyShift(action_535)
        },
        47 => {
            happyShift(action_535)
        },
        48 => {
            happyShift(action_535)
        },
        49 => {
            happyShift(action_535)
        },
        50 => {
            happyShift(action_535)
        },
        51 => {
            happyShift(action_535)
        },
        52 => {
            happyShift(action_535)
        },
        53 => {
            happyShift(action_535)
        },
        54 => {
            happyShift(action_535)
        },
        61 => {
            happyShift(action_535)
        },
        65 => {
            happyShift(action_535)
        },
        76 => {
            happyShift(action_535)
        },
        77 => {
            happyShift(action_535)
        },
        78 => {
            happyShift(action_535)
        },
        82 => {
            happyShift(action_535)
        },
        83 => {
            happyShift(action_535)
        },
        84 => {
            happyShift(action_535)
        },
        88 => {
            happyShift(action_535)
        },
        89 => {
            happyShift(action_535)
        },
        90 => {
            happyShift(action_535)
        },
        91 => {
            happyShift(action_535)
        },
        92 => {
            happyShift(action_535)
        },
        132 => {
            happyShift(action_535)
        },
        133 => {
            happyShift(action_535)
        },
        134 => {
            happyShift(action_535)
        },
        _ => {
            happyShift(action_535)
        },
    }
}

pub fn action_536(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_535)
        },
        140 => {
            happyShift(action_535)
        },
        150 => {
            happyShift(action_535)
        },
        186 => {
            happyShift(action_535)
        },
        193 => {
            happyShift(action_535)
        },
        213 => {
            happyShift(action_535)
        },
        214 => {
            happyShift(action_535)
        },
        216 => {
            happyShift(action_535)
        },
        231 => {
            happyShift(action_535)
        },
        237 => {
            happyShift(action_535)
        },
        239 => {
            happyShift(action_535)
        },
        65 => {
            happyShift(action_535)
        },
        75 => {
            happyShift(action_535)
        },
        76 => {
            happyShift(action_535)
        },
        77 => {
            happyShift(action_535)
        },
        78 => {
            happyShift(action_535)
        },
        87 => {
            happyShift(action_535)
        },
        88 => {
            happyShift(action_535)
        },
        89 => {
            happyShift(action_535)
        },
        90 => {
            happyShift(action_535)
        },
        91 => {
            happyShift(action_535)
        },
        92 => {
            happyShift(action_535)
        },
        132 => {
            happyShift(action_535)
        },
        133 => {
            happyShift(action_535)
        },
        134 => {
            happyShift(action_535)
        },
        _ => {
            happyShift(action_535)
        },
    }
}

pub fn action_537(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_538(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_539(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_295
}

pub fn action_540(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_540)
        },
        140 => {
            happyShift(action_540)
        },
        150 => {
            happyShift(action_540)
        },
        185 => {
            happyShift(action_540)
        },
        186 => {
            happyShift(action_540)
        },
        188 => {
            happyShift(action_540)
        },
        190 => {
            happyShift(action_540)
        },
        192 => {
            happyShift(action_540)
        },
        193 => {
            happyShift(action_540)
        },
        195 => {
            happyShift(action_540)
        },
        198 => {
            happyShift(action_540)
        },
        200 => {
            happyShift(action_540)
        },
        201 => {
            happyShift(action_540)
        },
        202 => {
            happyShift(action_540)
        },
        207 => {
            happyShift(action_540)
        },
        208 => {
            happyShift(action_540)
        },
        209 => {
            happyShift(action_540)
        },
        210 => {
            happyShift(action_540)
        },
        212 => {
            happyShift(action_540)
        },
        213 => {
            happyShift(action_540)
        },
        214 => {
            happyShift(action_540)
        },
        215 => {
            happyShift(action_540)
        },
        216 => {
            happyShift(action_540)
        },
        218 => {
            happyShift(action_540)
        },
        219 => {
            happyShift(action_540)
        },
        221 => {
            happyShift(action_540)
        },
        223 => {
            happyShift(action_540)
        },
        225 => {
            happyShift(action_540)
        },
        226 => {
            happyShift(action_540)
        },
        227 => {
            happyShift(action_540)
        },
        228 => {
            happyShift(action_540)
        },
        229 => {
            happyShift(action_540)
        },
        230 => {
            happyShift(action_540)
        },
        231 => {
            happyShift(action_540)
        },
        237 => {
            happyShift(action_540)
        },
        238 => {
            happyShift(action_540)
        },
        239 => {
            happyShift(action_540)
        },
        37 => {
            happyShift(action_540)
        },
        38 => {
            happyShift(action_540)
        },
        40 => {
            happyShift(action_540)
        },
        41 => {
            happyShift(action_540)
        },
        42 => {
            happyShift(action_540)
        },
        43 => {
            happyShift(action_540)
        },
        44 => {
            happyShift(action_540)
        },
        45 => {
            happyShift(action_540)
        },
        46 => {
            happyShift(action_540)
        },
        47 => {
            happyShift(action_540)
        },
        48 => {
            happyShift(action_540)
        },
        49 => {
            happyShift(action_540)
        },
        50 => {
            happyShift(action_540)
        },
        51 => {
            happyShift(action_540)
        },
        52 => {
            happyShift(action_540)
        },
        53 => {
            happyShift(action_540)
        },
        54 => {
            happyShift(action_540)
        },
        61 => {
            happyShift(action_540)
        },
        65 => {
            happyShift(action_540)
        },
        70 => {
            happyShift(action_540)
        },
        71 => {
            happyShift(action_540)
        },
        76 => {
            happyShift(action_540)
        },
        77 => {
            happyShift(action_540)
        },
        78 => {
            happyShift(action_540)
        },
        82 => {
            happyShift(action_540)
        },
        83 => {
            happyShift(action_540)
        },
        84 => {
            happyShift(action_540)
        },
        88 => {
            happyShift(action_540)
        },
        89 => {
            happyShift(action_540)
        },
        90 => {
            happyShift(action_540)
        },
        91 => {
            happyShift(action_540)
        },
        92 => {
            happyShift(action_540)
        },
        132 => {
            happyShift(action_540)
        },
        133 => {
            happyShift(action_540)
        },
        134 => {
            happyShift(action_540)
        },
        _ => {
            happyShift(action_540)
        },
    }
}

pub fn action_541(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_540)
        },
        140 => {
            happyShift(action_540)
        },
        150 => {
            happyShift(action_540)
        },
        186 => {
            happyShift(action_540)
        },
        193 => {
            happyShift(action_540)
        },
        213 => {
            happyShift(action_540)
        },
        214 => {
            happyShift(action_540)
        },
        216 => {
            happyShift(action_540)
        },
        231 => {
            happyShift(action_540)
        },
        237 => {
            happyShift(action_540)
        },
        238 => {
            happyShift(action_540)
        },
        239 => {
            happyShift(action_540)
        },
        65 => {
            happyShift(action_540)
        },
        69 => {
            happyShift(action_540)
        },
        70 => {
            happyShift(action_540)
        },
        71 => {
            happyShift(action_540)
        },
        75 => {
            happyShift(action_540)
        },
        76 => {
            happyShift(action_540)
        },
        77 => {
            happyShift(action_540)
        },
        78 => {
            happyShift(action_540)
        },
        87 => {
            happyShift(action_540)
        },
        88 => {
            happyShift(action_540)
        },
        89 => {
            happyShift(action_540)
        },
        90 => {
            happyShift(action_540)
        },
        91 => {
            happyShift(action_540)
        },
        92 => {
            happyShift(action_540)
        },
        132 => {
            happyShift(action_540)
        },
        133 => {
            happyShift(action_540)
        },
        134 => {
            happyShift(action_540)
        },
        _ => {
            happyShift(action_540)
        },
    }
}

pub fn action_542(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_543(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_292
}

pub fn action_544(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_545(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_546(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_288
}

pub fn action_547(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        186 => {
            happyShift(action_171)
        },
        193 => {
            happyShift(action_171)
        },
        213 => {
            happyShift(action_171)
        },
        214 => {
            happyShift(action_171)
        },
        216 => {
            happyShift(action_171)
        },
        231 => {
            happyShift(action_171)
        },
        239 => {
            happyShift(action_171)
        },
        64 => {
            happyShift(action_171)
        },
        132 => {
            happyShift(action_171)
        },
        133 => {
            happyShift(action_171)
        },
        134 => {
            happyShift(action_171)
        },
        _ => {
            happyShift(action_171)
        },
    }
}

pub fn action_548(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        186 => {
            happyShift(action_26)
        },
        193 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        213 => {
            happyShift(action_26)
        },
        214 => {
            happyShift(action_26)
        },
        216 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        231 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        64 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_549(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_731)
        },
        _ => {
            happyShift(action_731)
        },
    }
}

pub fn action_550(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_730)
        },
        _ => {
            happyShift(action_730)
        },
    }
}

pub fn action_551(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyReduce_471
        },
        239 => {
            happyReduce_471
        },
        132 => {
            happyReduce_471
        },
        133 => {
            happyReduce_471
        },
        134 => {
            happyReduce_471
        },
        _ => {
            happyReduce_471
        },
    }
}

pub fn action_552(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_315
}

pub fn action_553(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_728)
        },
        _ => {
            happyShift(action_728)
        },
    }
}

pub fn action_554(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        221 => {
            happyShift(action_727)
        },
        _ => {
            happyShift(action_727)
        },
    }
}

pub fn action_555(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        186 => {
            happyShift(action_26)
        },
        193 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        213 => {
            happyShift(action_26)
        },
        214 => {
            happyShift(action_26)
        },
        216 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        221 => {
            happyShift(action_26)
        },
        231 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        64 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        125 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_556(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyReduce_471
        },
        239 => {
            happyReduce_471
        },
        132 => {
            happyReduce_471
        },
        133 => {
            happyReduce_471
        },
        134 => {
            happyReduce_471
        },
        _ => {
            happyReduce_471
        },
    }
}

pub fn action_557(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_93
}

pub fn action_558(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_24
}

pub fn action_559(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        190 => {
            happyShift(action_26)
        },
        192 => {
            happyShift(action_26)
        },
        195 => {
            happyShift(action_26)
        },
        198 => {
            happyShift(action_26)
        },
        200 => {
            happyShift(action_26)
        },
        202 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        208 => {
            happyShift(action_26)
        },
        209 => {
            happyShift(action_26)
        },
        210 => {
            happyShift(action_26)
        },
        218 => {
            happyShift(action_26)
        },
        219 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        223 => {
            happyShift(action_26)
        },
        226 => {
            happyShift(action_26)
        },
        228 => {
            happyShift(action_26)
        },
        229 => {
            happyShift(action_26)
        },
        230 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        44 => {
            happyShift(action_26)
        },
        45 => {
            happyShift(action_26)
        },
        47 => {
            happyShift(action_26)
        },
        49 => {
            happyShift(action_26)
        },
        51 => {
            happyShift(action_26)
        },
        52 => {
            happyShift(action_26)
        },
        53 => {
            happyShift(action_26)
        },
        54 => {
            happyShift(action_26)
        },
        61 => {
            happyShift(action_26)
        },
        65 => {
            happyShift(action_26)
        },
        86 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_560(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        185 => {
            happyShift(action_61)
        },
        188 => {
            happyShift(action_61)
        },
        190 => {
            happyShift(action_61)
        },
        192 => {
            happyShift(action_61)
        },
        195 => {
            happyShift(action_61)
        },
        198 => {
            happyShift(action_61)
        },
        200 => {
            happyShift(action_61)
        },
        201 => {
            happyShift(action_61)
        },
        202 => {
            happyShift(action_61)
        },
        207 => {
            happyShift(action_61)
        },
        208 => {
            happyShift(action_61)
        },
        209 => {
            happyShift(action_61)
        },
        210 => {
            happyShift(action_61)
        },
        212 => {
            happyShift(action_61)
        },
        215 => {
            happyShift(action_61)
        },
        218 => {
            happyShift(action_61)
        },
        219 => {
            happyShift(action_61)
        },
        221 => {
            happyShift(action_61)
        },
        222 => {
            happyShift(action_61)
        },
        223 => {
            happyShift(action_61)
        },
        225 => {
            happyShift(action_61)
        },
        226 => {
            happyShift(action_61)
        },
        227 => {
            happyShift(action_61)
        },
        228 => {
            happyShift(action_61)
        },
        229 => {
            happyShift(action_61)
        },
        230 => {
            happyShift(action_61)
        },
        238 => {
            happyShift(action_61)
        },
        239 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        32 => {
            happyShift(action_61)
        },
        34 => {
            happyShift(action_61)
        },
        36 => {
            happyShift(action_61)
        },
        37 => {
            happyShift(action_61)
        },
        38 => {
            happyShift(action_61)
        },
        40 => {
            happyShift(action_61)
        },
        41 => {
            happyShift(action_61)
        },
        42 => {
            happyShift(action_61)
        },
        43 => {
            happyShift(action_61)
        },
        44 => {
            happyShift(action_61)
        },
        45 => {
            happyShift(action_61)
        },
        46 => {
            happyShift(action_61)
        },
        47 => {
            happyShift(action_61)
        },
        48 => {
            happyShift(action_61)
        },
        49 => {
            happyShift(action_61)
        },
        50 => {
            happyShift(action_61)
        },
        51 => {
            happyShift(action_61)
        },
        52 => {
            happyShift(action_61)
        },
        53 => {
            happyShift(action_61)
        },
        54 => {
            happyShift(action_61)
        },
        61 => {
            happyShift(action_61)
        },
        65 => {
            happyShift(action_61)
        },
        132 => {
            happyShift(action_61)
        },
        133 => {
            happyShift(action_61)
        },
        134 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_561(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        168 => {
            happyShift(action_516)
        },
        94 => {
            happyShift(action_516)
        },
        _ => {
            happyShift(action_516)
        },
    }
}

pub fn action_562(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_18
}

pub fn action_563(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_719)
        },
        _ => {
            happyShift(action_719)
        },
    }
}

pub fn action_564(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_718)
        },
        _ => {
            happyShift(action_718)
        },
    }
}

pub fn action_565(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_715)
        },
        182 => {
            happyShift(action_715)
        },
        190 => {
            happyShift(action_715)
        },
        192 => {
            happyShift(action_715)
        },
        195 => {
            happyShift(action_715)
        },
        198 => {
            happyShift(action_715)
        },
        200 => {
            happyShift(action_715)
        },
        202 => {
            happyShift(action_715)
        },
        208 => {
            happyShift(action_715)
        },
        209 => {
            happyShift(action_715)
        },
        210 => {
            happyShift(action_715)
        },
        218 => {
            happyShift(action_715)
        },
        219 => {
            happyShift(action_715)
        },
        223 => {
            happyShift(action_715)
        },
        226 => {
            happyShift(action_715)
        },
        228 => {
            happyShift(action_715)
        },
        229 => {
            happyShift(action_715)
        },
        230 => {
            happyShift(action_715)
        },
        238 => {
            happyShift(action_715)
        },
        239 => {
            happyShift(action_715)
        },
        240 => {
            happyShift(action_715)
        },
        44 => {
            happyShift(action_715)
        },
        45 => {
            happyShift(action_715)
        },
        47 => {
            happyShift(action_715)
        },
        49 => {
            happyShift(action_715)
        },
        51 => {
            happyShift(action_715)
        },
        52 => {
            happyShift(action_715)
        },
        53 => {
            happyShift(action_715)
        },
        54 => {
            happyShift(action_715)
        },
        56 => {
            happyShift(action_715)
        },
        57 => {
            happyShift(action_715)
        },
        58 => {
            happyShift(action_715)
        },
        61 => {
            happyShift(action_715)
        },
        65 => {
            happyShift(action_715)
        },
        132 => {
            happyShift(action_715)
        },
        133 => {
            happyShift(action_715)
        },
        134 => {
            happyShift(action_715)
        },
        _ => {
            happyShift(action_715)
        },
    }
}

pub fn action_566(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        55 => {
            happyGoto(action_708)
        },
        _ => {
            happyGoto(action_708)
        },
    }
}

pub fn action_567(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_99
}

pub fn action_568(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_22
}

pub fn action_569(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        139 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_570(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_706)
        },
        _ => {
            happyShift(action_706)
        },
    }
}

pub fn action_571(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_571)
        },
        150 => {
            happyShift(action_571)
        },
        237 => {
            happyShift(action_571)
        },
        239 => {
            happyShift(action_571)
        },
        70 => {
            happyShift(action_571)
        },
        71 => {
            happyShift(action_571)
        },
        76 => {
            happyShift(action_571)
        },
        77 => {
            happyShift(action_571)
        },
        78 => {
            happyShift(action_571)
        },
        133 => {
            happyShift(action_571)
        },
        134 => {
            happyShift(action_571)
        },
        _ => {
            happyShift(action_571)
        },
    }
}

pub fn action_572(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_571)
        },
        150 => {
            happyShift(action_571)
        },
        237 => {
            happyShift(action_571)
        },
        238 => {
            happyShift(action_571)
        },
        239 => {
            happyShift(action_571)
        },
        65 => {
            happyShift(action_571)
        },
        69 => {
            happyShift(action_571)
        },
        70 => {
            happyShift(action_571)
        },
        71 => {
            happyShift(action_571)
        },
        75 => {
            happyShift(action_571)
        },
        76 => {
            happyShift(action_571)
        },
        77 => {
            happyShift(action_571)
        },
        78 => {
            happyShift(action_571)
        },
        132 => {
            happyShift(action_571)
        },
        133 => {
            happyShift(action_571)
        },
        134 => {
            happyShift(action_571)
        },
        _ => {
            happyShift(action_571)
        },
    }
}

pub fn action_573(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_704)
        },
        _ => {
            happyShift(action_704)
        },
    }
}

pub fn action_574(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_575(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_576(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        139 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_577(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_241
}

pub fn action_578(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_242
}

pub fn action_579(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_253
}

pub fn action_580(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_700)
        },
        150 => {
            happyShift(action_700)
        },
        186 => {
            happyShift(action_700)
        },
        193 => {
            happyShift(action_700)
        },
        213 => {
            happyShift(action_700)
        },
        214 => {
            happyShift(action_700)
        },
        216 => {
            happyShift(action_700)
        },
        231 => {
            happyShift(action_700)
        },
        237 => {
            happyShift(action_700)
        },
        238 => {
            happyShift(action_700)
        },
        239 => {
            happyShift(action_700)
        },
        64 => {
            happyShift(action_700)
        },
        69 => {
            happyShift(action_700)
        },
        70 => {
            happyShift(action_700)
        },
        71 => {
            happyShift(action_700)
        },
        72 => {
            happyShift(action_700)
        },
        73 => {
            happyShift(action_700)
        },
        75 => {
            happyShift(action_700)
        },
        76 => {
            happyShift(action_700)
        },
        77 => {
            happyShift(action_700)
        },
        78 => {
            happyShift(action_700)
        },
        134 => {
            happyShift(action_700)
        },
        _ => {
            happyShift(action_700)
        },
    }
}

pub fn action_581(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_423)
        },
        150 => {
            happyShift(action_423)
        },
        237 => {
            happyShift(action_423)
        },
        238 => {
            happyShift(action_423)
        },
        239 => {
            happyShift(action_423)
        },
        70 => {
            happyShift(action_423)
        },
        71 => {
            happyShift(action_423)
        },
        72 => {
            happyShift(action_423)
        },
        73 => {
            happyShift(action_423)
        },
        74 => {
            happyShift(action_423)
        },
        76 => {
            happyShift(action_423)
        },
        77 => {
            happyShift(action_423)
        },
        78 => {
            happyShift(action_423)
        },
        80 => {
            happyShift(action_423)
        },
        81 => {
            happyShift(action_423)
        },
        133 => {
            happyShift(action_423)
        },
        134 => {
            happyShift(action_423)
        },
        _ => {
            happyShift(action_423)
        },
    }
}

pub fn action_582(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_92
}

pub fn action_583(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_23
}

pub fn action_584(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_696)
        },
        _ => {
            happyShift(action_696)
        },
    }
}

pub fn action_585(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_695)
        },
        _ => {
            happyShift(action_695)
        },
    }
}

pub fn action_586(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        236 => {
            happyShift(action_42)
        },
        128 => {
            happyShift(action_42)
        },
        _ => {
            happyShift(action_42)
        },
    }
}

pub fn action_587(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_97
}

pub fn action_588(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_98
}

pub fn action_589(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_21
}

pub fn action_590(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        187 => {
            happyShift(action_406)
        },
        35 => {
            happyShift(action_406)
        },
        67 => {
            happyShift(action_406)
        },
        _ => {
            happyShift(action_406)
        },
    }
}

pub fn action_591(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        187 => {
            happyShift(action_406)
        },
        35 => {
            happyShift(action_406)
        },
        67 => {
            happyShift(action_406)
        },
        _ => {
            happyShift(action_406)
        },
    }
}

pub fn action_592(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        180 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        187 => {
            happyShift(action_26)
        },
        189 => {
            happyShift(action_26)
        },
        191 => {
            happyShift(action_26)
        },
        194 => {
            happyShift(action_26)
        },
        196 => {
            happyShift(action_26)
        },
        197 => {
            happyShift(action_26)
        },
        203 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        205 => {
            happyShift(action_26)
        },
        206 => {
            happyShift(action_26)
        },
        217 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        224 => {
            happyShift(action_26)
        },
        232 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        12 => {
            happyShift(action_26)
        },
        13 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        22 => {
            happyShift(action_26)
        },
        23 => {
            happyShift(action_26)
        },
        24 => {
            happyShift(action_26)
        },
        25 => {
            happyShift(action_26)
        },
        26 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_593(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        180 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        187 => {
            happyShift(action_26)
        },
        189 => {
            happyShift(action_26)
        },
        191 => {
            happyShift(action_26)
        },
        194 => {
            happyShift(action_26)
        },
        196 => {
            happyShift(action_26)
        },
        197 => {
            happyShift(action_26)
        },
        203 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        205 => {
            happyShift(action_26)
        },
        206 => {
            happyShift(action_26)
        },
        217 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        224 => {
            happyShift(action_26)
        },
        232 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        12 => {
            happyShift(action_26)
        },
        13 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        22 => {
            happyShift(action_26)
        },
        23 => {
            happyShift(action_26)
        },
        24 => {
            happyShift(action_26)
        },
        25 => {
            happyShift(action_26)
        },
        26 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_594(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        180 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        187 => {
            happyShift(action_26)
        },
        189 => {
            happyShift(action_26)
        },
        191 => {
            happyShift(action_26)
        },
        194 => {
            happyShift(action_26)
        },
        196 => {
            happyShift(action_26)
        },
        197 => {
            happyShift(action_26)
        },
        203 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        205 => {
            happyShift(action_26)
        },
        206 => {
            happyShift(action_26)
        },
        217 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        224 => {
            happyShift(action_26)
        },
        232 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        12 => {
            happyShift(action_26)
        },
        13 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        22 => {
            happyShift(action_26)
        },
        23 => {
            happyShift(action_26)
        },
        24 => {
            happyShift(action_26)
        },
        25 => {
            happyShift(action_26)
        },
        26 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_595(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_66
}

pub fn action_596(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        124 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_597(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        124 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_598(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_599(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        167 => {
            happyShift(action_685)
        },
        _ => {
            happyShift(action_685)
        },
    }
}

pub fn action_600(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_35
}

pub fn action_601(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_683)
        },
        167 => {
            happyShift(action_683)
        },
        _ => {
            happyShift(action_683)
        },
    }
}

pub fn action_602(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_528)
        },
        180 => {
            happyShift(action_528)
        },
        _ => {
            happyShift(action_528)
        },
    }
}

pub fn action_603(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        180 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        185 => {
            happyShift(action_26)
        },
        186 => {
            happyShift(action_26)
        },
        187 => {
            happyShift(action_26)
        },
        188 => {
            happyShift(action_26)
        },
        189 => {
            happyShift(action_26)
        },
        190 => {
            happyShift(action_26)
        },
        191 => {
            happyShift(action_26)
        },
        192 => {
            happyShift(action_26)
        },
        193 => {
            happyShift(action_26)
        },
        194 => {
            happyShift(action_26)
        },
        195 => {
            happyShift(action_26)
        },
        196 => {
            happyShift(action_26)
        },
        197 => {
            happyShift(action_26)
        },
        198 => {
            happyShift(action_26)
        },
        200 => {
            happyShift(action_26)
        },
        201 => {
            happyShift(action_26)
        },
        202 => {
            happyShift(action_26)
        },
        203 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        205 => {
            happyShift(action_26)
        },
        206 => {
            happyShift(action_26)
        },
        207 => {
            happyShift(action_26)
        },
        208 => {
            happyShift(action_26)
        },
        209 => {
            happyShift(action_26)
        },
        210 => {
            happyShift(action_26)
        },
        212 => {
            happyShift(action_26)
        },
        213 => {
            happyShift(action_26)
        },
        214 => {
            happyShift(action_26)
        },
        215 => {
            happyShift(action_26)
        },
        216 => {
            happyShift(action_26)
        },
        217 => {
            happyShift(action_26)
        },
        218 => {
            happyShift(action_26)
        },
        219 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        221 => {
            happyShift(action_26)
        },
        222 => {
            happyShift(action_26)
        },
        223 => {
            happyShift(action_26)
        },
        224 => {
            happyShift(action_26)
        },
        225 => {
            happyShift(action_26)
        },
        226 => {
            happyShift(action_26)
        },
        227 => {
            happyShift(action_26)
        },
        228 => {
            happyShift(action_26)
        },
        229 => {
            happyShift(action_26)
        },
        230 => {
            happyShift(action_26)
        },
        231 => {
            happyShift(action_26)
        },
        232 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        12 => {
            happyShift(action_26)
        },
        13 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        16 => {
            happyShift(action_26)
        },
        18 => {
            happyShift(action_26)
        },
        19 => {
            happyShift(action_26)
        },
        20 => {
            happyShift(action_26)
        },
        22 => {
            happyShift(action_26)
        },
        23 => {
            happyShift(action_26)
        },
        24 => {
            happyShift(action_26)
        },
        25 => {
            happyShift(action_26)
        },
        26 => {
            happyShift(action_26)
        },
        32 => {
            happyShift(action_26)
        },
        34 => {
            happyShift(action_26)
        },
        36 => {
            happyShift(action_26)
        },
        37 => {
            happyShift(action_26)
        },
        38 => {
            happyShift(action_26)
        },
        40 => {
            happyShift(action_26)
        },
        41 => {
            happyShift(action_26)
        },
        42 => {
            happyShift(action_26)
        },
        43 => {
            happyShift(action_26)
        },
        44 => {
            happyShift(action_26)
        },
        45 => {
            happyShift(action_26)
        },
        46 => {
            happyShift(action_26)
        },
        47 => {
            happyShift(action_26)
        },
        48 => {
            happyShift(action_26)
        },
        49 => {
            happyShift(action_26)
        },
        50 => {
            happyShift(action_26)
        },
        51 => {
            happyShift(action_26)
        },
        52 => {
            happyShift(action_26)
        },
        53 => {
            happyShift(action_26)
        },
        54 => {
            happyShift(action_26)
        },
        61 => {
            happyShift(action_26)
        },
        65 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_604(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        237 => {
            happyShift(action_460)
        },
        85 => {
            happyShift(action_460)
        },
        _ => {
            happyShift(action_460)
        },
    }
}

pub fn action_605(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_44
}

pub fn action_606(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        182 => {
            happyShift(action_679)
        },
        _ => {
            happyShift(action_679)
        },
    }
}

pub fn action_607(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_43
}

pub fn action_608(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_45
}

pub fn action_609(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_47
}

pub fn action_610(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_46
}

pub fn action_611(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_524)
        },
        150 => {
            happyShift(action_524)
        },
        237 => {
            happyShift(action_524)
        },
        238 => {
            happyShift(action_524)
        },
        11 => {
            happyShift(action_524)
        },
        66 => {
            happyShift(action_524)
        },
        68 => {
            happyShift(action_524)
        },
        69 => {
            happyShift(action_524)
        },
        70 => {
            happyShift(action_524)
        },
        71 => {
            happyShift(action_524)
        },
        72 => {
            happyShift(action_524)
        },
        73 => {
            happyShift(action_524)
        },
        75 => {
            happyShift(action_524)
        },
        76 => {
            happyShift(action_524)
        },
        77 => {
            happyShift(action_524)
        },
        78 => {
            happyShift(action_524)
        },
        _ => {
            happyShift(action_524)
        },
    }
}

pub fn action_612(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        185 => {
            happyShift(action_475)
        },
        186 => {
            happyShift(action_475)
        },
        188 => {
            happyShift(action_475)
        },
        190 => {
            happyShift(action_475)
        },
        192 => {
            happyShift(action_475)
        },
        193 => {
            happyShift(action_475)
        },
        195 => {
            happyShift(action_475)
        },
        198 => {
            happyShift(action_475)
        },
        200 => {
            happyShift(action_475)
        },
        201 => {
            happyShift(action_475)
        },
        202 => {
            happyShift(action_475)
        },
        207 => {
            happyShift(action_475)
        },
        208 => {
            happyShift(action_475)
        },
        209 => {
            happyShift(action_475)
        },
        210 => {
            happyShift(action_475)
        },
        212 => {
            happyShift(action_475)
        },
        213 => {
            happyShift(action_475)
        },
        214 => {
            happyShift(action_475)
        },
        215 => {
            happyShift(action_475)
        },
        216 => {
            happyShift(action_475)
        },
        218 => {
            happyShift(action_475)
        },
        219 => {
            happyShift(action_475)
        },
        221 => {
            happyShift(action_475)
        },
        223 => {
            happyShift(action_475)
        },
        225 => {
            happyShift(action_475)
        },
        226 => {
            happyShift(action_475)
        },
        227 => {
            happyShift(action_475)
        },
        228 => {
            happyShift(action_475)
        },
        229 => {
            happyShift(action_475)
        },
        230 => {
            happyShift(action_475)
        },
        231 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        238 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        11 => {
            happyShift(action_475)
        },
        39 => {
            happyShift(action_475)
        },
        41 => {
            happyShift(action_475)
        },
        42 => {
            happyShift(action_475)
        },
        43 => {
            happyShift(action_475)
        },
        45 => {
            happyShift(action_475)
        },
        52 => {
            happyShift(action_475)
        },
        53 => {
            happyShift(action_475)
        },
        54 => {
            happyShift(action_475)
        },
        61 => {
            happyShift(action_475)
        },
        64 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_613(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_524)
        },
        150 => {
            happyShift(action_524)
        },
        237 => {
            happyShift(action_524)
        },
        238 => {
            happyShift(action_524)
        },
        11 => {
            happyShift(action_524)
        },
        66 => {
            happyShift(action_524)
        },
        68 => {
            happyShift(action_524)
        },
        69 => {
            happyShift(action_524)
        },
        70 => {
            happyShift(action_524)
        },
        71 => {
            happyShift(action_524)
        },
        72 => {
            happyShift(action_524)
        },
        73 => {
            happyShift(action_524)
        },
        75 => {
            happyShift(action_524)
        },
        76 => {
            happyShift(action_524)
        },
        77 => {
            happyShift(action_524)
        },
        78 => {
            happyShift(action_524)
        },
        _ => {
            happyShift(action_524)
        },
    }
}

pub fn action_614(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        185 => {
            happyShift(action_475)
        },
        186 => {
            happyShift(action_475)
        },
        188 => {
            happyShift(action_475)
        },
        190 => {
            happyShift(action_475)
        },
        192 => {
            happyShift(action_475)
        },
        193 => {
            happyShift(action_475)
        },
        195 => {
            happyShift(action_475)
        },
        198 => {
            happyShift(action_475)
        },
        200 => {
            happyShift(action_475)
        },
        201 => {
            happyShift(action_475)
        },
        202 => {
            happyShift(action_475)
        },
        207 => {
            happyShift(action_475)
        },
        208 => {
            happyShift(action_475)
        },
        209 => {
            happyShift(action_475)
        },
        210 => {
            happyShift(action_475)
        },
        212 => {
            happyShift(action_475)
        },
        213 => {
            happyShift(action_475)
        },
        214 => {
            happyShift(action_475)
        },
        215 => {
            happyShift(action_475)
        },
        216 => {
            happyShift(action_475)
        },
        218 => {
            happyShift(action_475)
        },
        219 => {
            happyShift(action_475)
        },
        221 => {
            happyShift(action_475)
        },
        223 => {
            happyShift(action_475)
        },
        225 => {
            happyShift(action_475)
        },
        226 => {
            happyShift(action_475)
        },
        227 => {
            happyShift(action_475)
        },
        228 => {
            happyShift(action_475)
        },
        229 => {
            happyShift(action_475)
        },
        230 => {
            happyShift(action_475)
        },
        231 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        238 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        11 => {
            happyShift(action_475)
        },
        40 => {
            happyShift(action_475)
        },
        41 => {
            happyShift(action_475)
        },
        42 => {
            happyShift(action_475)
        },
        43 => {
            happyShift(action_475)
        },
        45 => {
            happyShift(action_475)
        },
        52 => {
            happyShift(action_475)
        },
        53 => {
            happyShift(action_475)
        },
        54 => {
            happyShift(action_475)
        },
        61 => {
            happyShift(action_475)
        },
        64 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        133 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_615(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        167 => {
            happyReduce_470
        },
        _ => {
            happyReduce_470
        },
    }
}

pub fn action_616(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        185 => {
            happyShift(action_26)
        },
        188 => {
            happyShift(action_26)
        },
        190 => {
            happyShift(action_26)
        },
        192 => {
            happyShift(action_26)
        },
        195 => {
            happyShift(action_26)
        },
        198 => {
            happyShift(action_26)
        },
        200 => {
            happyShift(action_26)
        },
        201 => {
            happyShift(action_26)
        },
        202 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        207 => {
            happyShift(action_26)
        },
        208 => {
            happyShift(action_26)
        },
        209 => {
            happyShift(action_26)
        },
        210 => {
            happyShift(action_26)
        },
        212 => {
            happyShift(action_26)
        },
        215 => {
            happyShift(action_26)
        },
        218 => {
            happyShift(action_26)
        },
        219 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        221 => {
            happyShift(action_26)
        },
        222 => {
            happyShift(action_26)
        },
        223 => {
            happyShift(action_26)
        },
        225 => {
            happyShift(action_26)
        },
        226 => {
            happyShift(action_26)
        },
        227 => {
            happyShift(action_26)
        },
        228 => {
            happyShift(action_26)
        },
        229 => {
            happyShift(action_26)
        },
        230 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        239 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        19 => {
            happyShift(action_26)
        },
        20 => {
            happyShift(action_26)
        },
        32 => {
            happyShift(action_26)
        },
        34 => {
            happyShift(action_26)
        },
        36 => {
            happyShift(action_26)
        },
        37 => {
            happyShift(action_26)
        },
        38 => {
            happyShift(action_26)
        },
        40 => {
            happyShift(action_26)
        },
        41 => {
            happyShift(action_26)
        },
        42 => {
            happyShift(action_26)
        },
        43 => {
            happyShift(action_26)
        },
        44 => {
            happyShift(action_26)
        },
        45 => {
            happyShift(action_26)
        },
        46 => {
            happyShift(action_26)
        },
        47 => {
            happyShift(action_26)
        },
        48 => {
            happyShift(action_26)
        },
        49 => {
            happyShift(action_26)
        },
        50 => {
            happyShift(action_26)
        },
        51 => {
            happyShift(action_26)
        },
        52 => {
            happyShift(action_26)
        },
        53 => {
            happyShift(action_26)
        },
        54 => {
            happyShift(action_26)
        },
        61 => {
            happyShift(action_26)
        },
        65 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        132 => {
            happyShift(action_26)
        },
        133 => {
            happyShift(action_26)
        },
        134 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_617(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_34
}

pub fn action_618(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        190 => {
            happyShift(action_116)
        },
        192 => {
            happyShift(action_116)
        },
        195 => {
            happyShift(action_116)
        },
        198 => {
            happyShift(action_116)
        },
        200 => {
            happyShift(action_116)
        },
        202 => {
            happyShift(action_116)
        },
        208 => {
            happyShift(action_116)
        },
        209 => {
            happyShift(action_116)
        },
        210 => {
            happyShift(action_116)
        },
        218 => {
            happyShift(action_116)
        },
        219 => {
            happyShift(action_116)
        },
        223 => {
            happyShift(action_116)
        },
        226 => {
            happyShift(action_116)
        },
        228 => {
            happyShift(action_116)
        },
        229 => {
            happyShift(action_116)
        },
        230 => {
            happyShift(action_116)
        },
        238 => {
            happyShift(action_116)
        },
        239 => {
            happyShift(action_116)
        },
        44 => {
            happyShift(action_116)
        },
        45 => {
            happyShift(action_116)
        },
        47 => {
            happyShift(action_116)
        },
        49 => {
            happyShift(action_116)
        },
        51 => {
            happyShift(action_116)
        },
        52 => {
            happyShift(action_116)
        },
        53 => {
            happyShift(action_116)
        },
        54 => {
            happyShift(action_116)
        },
        61 => {
            happyShift(action_116)
        },
        65 => {
            happyShift(action_116)
        },
        86 => {
            happyShift(action_116)
        },
        132 => {
            happyShift(action_116)
        },
        133 => {
            happyShift(action_116)
        },
        134 => {
            happyShift(action_116)
        },
        _ => {
            happyShift(action_116)
        },
    }
}

pub fn action_619(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        237 => {
            happyShift(action_254)
        },
        238 => {
            happyShift(action_254)
        },
        103 => {
            happyShift(action_254)
        },
        131 => {
            happyShift(action_254)
        },
        _ => {
            happyShift(action_254)
        },
    }
}

pub fn action_620(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        190 => {
            happyShift(action_116)
        },
        192 => {
            happyShift(action_116)
        },
        195 => {
            happyShift(action_116)
        },
        198 => {
            happyShift(action_116)
        },
        200 => {
            happyShift(action_116)
        },
        202 => {
            happyShift(action_116)
        },
        208 => {
            happyShift(action_116)
        },
        209 => {
            happyShift(action_116)
        },
        210 => {
            happyShift(action_116)
        },
        218 => {
            happyShift(action_116)
        },
        219 => {
            happyShift(action_116)
        },
        223 => {
            happyShift(action_116)
        },
        226 => {
            happyShift(action_116)
        },
        228 => {
            happyShift(action_116)
        },
        229 => {
            happyShift(action_116)
        },
        230 => {
            happyShift(action_116)
        },
        238 => {
            happyShift(action_116)
        },
        239 => {
            happyShift(action_116)
        },
        44 => {
            happyShift(action_116)
        },
        45 => {
            happyShift(action_116)
        },
        47 => {
            happyShift(action_116)
        },
        49 => {
            happyShift(action_116)
        },
        51 => {
            happyShift(action_116)
        },
        52 => {
            happyShift(action_116)
        },
        53 => {
            happyShift(action_116)
        },
        54 => {
            happyShift(action_116)
        },
        61 => {
            happyShift(action_116)
        },
        65 => {
            happyShift(action_116)
        },
        86 => {
            happyShift(action_116)
        },
        132 => {
            happyShift(action_116)
        },
        133 => {
            happyShift(action_116)
        },
        134 => {
            happyShift(action_116)
        },
        _ => {
            happyShift(action_116)
        },
    }
}

pub fn action_621(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_634)
        },
        _ => {
            happyShift(action_634)
        },
    }
}

pub fn action_622(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_634)
        },
        _ => {
            happyShift(action_634)
        },
    }
}

pub fn action_623(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        190 => {
            happyShift(action_116)
        },
        192 => {
            happyShift(action_116)
        },
        195 => {
            happyShift(action_116)
        },
        196 => {
            happyShift(action_116)
        },
        198 => {
            happyShift(action_116)
        },
        200 => {
            happyShift(action_116)
        },
        202 => {
            happyShift(action_116)
        },
        208 => {
            happyShift(action_116)
        },
        209 => {
            happyShift(action_116)
        },
        210 => {
            happyShift(action_116)
        },
        218 => {
            happyShift(action_116)
        },
        219 => {
            happyShift(action_116)
        },
        223 => {
            happyShift(action_116)
        },
        226 => {
            happyShift(action_116)
        },
        228 => {
            happyShift(action_116)
        },
        229 => {
            happyShift(action_116)
        },
        230 => {
            happyShift(action_116)
        },
        238 => {
            happyShift(action_116)
        },
        239 => {
            happyShift(action_116)
        },
        44 => {
            happyShift(action_116)
        },
        45 => {
            happyShift(action_116)
        },
        47 => {
            happyShift(action_116)
        },
        49 => {
            happyShift(action_116)
        },
        51 => {
            happyShift(action_116)
        },
        52 => {
            happyShift(action_116)
        },
        53 => {
            happyShift(action_116)
        },
        54 => {
            happyShift(action_116)
        },
        61 => {
            happyShift(action_116)
        },
        65 => {
            happyShift(action_116)
        },
        86 => {
            happyShift(action_116)
        },
        101 => {
            happyShift(action_116)
        },
        102 => {
            happyShift(action_116)
        },
        132 => {
            happyShift(action_116)
        },
        133 => {
            happyShift(action_116)
        },
        134 => {
            happyShift(action_116)
        },
        _ => {
            happyShift(action_116)
        },
    }
}

pub fn action_624(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_634)
        },
        _ => {
            happyShift(action_634)
        },
    }
}

pub fn action_625(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_372)
        },
        140 => {
            happyShift(action_372)
        },
        150 => {
            happyShift(action_372)
        },
        186 => {
            happyShift(action_372)
        },
        193 => {
            happyShift(action_372)
        },
        213 => {
            happyShift(action_372)
        },
        214 => {
            happyShift(action_372)
        },
        216 => {
            happyShift(action_372)
        },
        231 => {
            happyShift(action_372)
        },
        239 => {
            happyShift(action_372)
        },
        64 => {
            happyShift(action_372)
        },
        87 => {
            happyShift(action_372)
        },
        88 => {
            happyShift(action_372)
        },
        89 => {
            happyShift(action_372)
        },
        90 => {
            happyShift(action_372)
        },
        91 => {
            happyShift(action_372)
        },
        92 => {
            happyShift(action_372)
        },
        132 => {
            happyShift(action_372)
        },
        133 => {
            happyShift(action_372)
        },
        134 => {
            happyShift(action_372)
        },
        _ => {
            happyShift(action_372)
        },
    }
}

pub fn action_626(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_328
}

pub fn action_627(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_372)
        },
        140 => {
            happyShift(action_372)
        },
        150 => {
            happyShift(action_372)
        },
        186 => {
            happyShift(action_372)
        },
        193 => {
            happyShift(action_372)
        },
        213 => {
            happyShift(action_372)
        },
        214 => {
            happyShift(action_372)
        },
        216 => {
            happyShift(action_372)
        },
        231 => {
            happyShift(action_372)
        },
        239 => {
            happyShift(action_372)
        },
        87 => {
            happyShift(action_372)
        },
        88 => {
            happyShift(action_372)
        },
        89 => {
            happyShift(action_372)
        },
        90 => {
            happyShift(action_372)
        },
        91 => {
            happyShift(action_372)
        },
        92 => {
            happyShift(action_372)
        },
        134 => {
            happyShift(action_372)
        },
        _ => {
            happyShift(action_372)
        },
    }
}

pub fn action_628(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_660)
        },
        _ => {
            happyShift(action_660)
        },
    }
}

pub fn action_629(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_659)
        },
        _ => {
            happyShift(action_659)
        },
    }
}

pub fn action_630(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_658)
        },
        239 => {
            happyShift(action_658)
        },
        134 => {
            happyShift(action_658)
        },
        _ => {
            happyShift(action_658)
        },
    }
}

pub fn action_631(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_372)
        },
        140 => {
            happyShift(action_372)
        },
        150 => {
            happyShift(action_372)
        },
        185 => {
            happyShift(action_372)
        },
        188 => {
            happyShift(action_372)
        },
        190 => {
            happyShift(action_372)
        },
        192 => {
            happyShift(action_372)
        },
        195 => {
            happyShift(action_372)
        },
        198 => {
            happyShift(action_372)
        },
        200 => {
            happyShift(action_372)
        },
        201 => {
            happyShift(action_372)
        },
        202 => {
            happyShift(action_372)
        },
        207 => {
            happyShift(action_372)
        },
        208 => {
            happyShift(action_372)
        },
        209 => {
            happyShift(action_372)
        },
        210 => {
            happyShift(action_372)
        },
        212 => {
            happyShift(action_372)
        },
        215 => {
            happyShift(action_372)
        },
        218 => {
            happyShift(action_372)
        },
        219 => {
            happyShift(action_372)
        },
        221 => {
            happyShift(action_372)
        },
        223 => {
            happyShift(action_372)
        },
        225 => {
            happyShift(action_372)
        },
        226 => {
            happyShift(action_372)
        },
        227 => {
            happyShift(action_372)
        },
        228 => {
            happyShift(action_372)
        },
        229 => {
            happyShift(action_372)
        },
        230 => {
            happyShift(action_372)
        },
        238 => {
            happyShift(action_372)
        },
        239 => {
            happyShift(action_372)
        },
        40 => {
            happyShift(action_372)
        },
        41 => {
            happyShift(action_372)
        },
        42 => {
            happyShift(action_372)
        },
        43 => {
            happyShift(action_372)
        },
        45 => {
            happyShift(action_372)
        },
        52 => {
            happyShift(action_372)
        },
        53 => {
            happyShift(action_372)
        },
        54 => {
            happyShift(action_372)
        },
        61 => {
            happyShift(action_372)
        },
        88 => {
            happyShift(action_372)
        },
        89 => {
            happyShift(action_372)
        },
        90 => {
            happyShift(action_372)
        },
        91 => {
            happyShift(action_372)
        },
        92 => {
            happyShift(action_372)
        },
        134 => {
            happyShift(action_372)
        },
        _ => {
            happyShift(action_372)
        },
    }
}

pub fn action_632(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_340
}

pub fn action_633(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_407
}

pub fn action_634(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        140 => {
            happyShift(action_26)
        },
        143 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        93 => {
            happyShift(action_26)
        },
        95 => {
            happyShift(action_26)
        },
        96 => {
            happyShift(action_26)
        },
        97 => {
            happyShift(action_26)
        },
        98 => {
            happyShift(action_26)
        },
        99 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_635(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_636(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_438
}

pub fn action_637(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_638(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_379
}

pub fn action_639(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_640(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_377
}

pub fn action_641(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_387
}

pub fn action_642(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_437
}

pub fn action_643(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_455
}

pub fn action_644(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_347
}

pub fn action_645(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_852)
        },
        182 => {
            happyShift(action_852)
        },
        _ => {
            happyShift(action_852)
        },
    }
}

pub fn action_646(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        93 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_647(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        140 => {
            happyShift(action_652)
        },
        143 => {
            happyShift(action_652)
        },
        168 => {
            happyShift(action_652)
        },
        98 => {
            happyShift(action_652)
        },
        99 => {
            happyShift(action_652)
        },
        _ => {
            happyShift(action_652)
        },
    }
}

pub fn action_648(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_354
}

pub fn action_649(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        140 => {
            happyReduce_358
        },
        143 => {
            happyReduce_358
        },
        168 => {
            happyReduce_358
        },
        _ => {
            happyReduce_358
        },
    }
}

pub fn action_650(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_341
}

pub fn action_651(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        167 => {
            happyShift(action_847)
        },
        _ => {
            happyShift(action_847)
        },
    }
}

pub fn action_652(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        126 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_653(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        237 => {
            happyShift(action_254)
        },
        238 => {
            happyShift(action_254)
        },
        131 => {
            happyShift(action_254)
        },
        _ => {
            happyShift(action_254)
        },
    }
}

pub fn action_654(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        140 => {
            happyShift(action_26)
        },
        143 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        93 => {
            happyShift(action_26)
        },
        95 => {
            happyShift(action_26)
        },
        96 => {
            happyShift(action_26)
        },
        97 => {
            happyShift(action_26)
        },
        98 => {
            happyShift(action_26)
        },
        99 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_655(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_843)
        },
        _ => {
            happyShift(action_843)
        },
    }
}

pub fn action_656(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_842)
        },
        _ => {
            happyShift(action_842)
        },
    }
}

pub fn action_657(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_841)
        },
        239 => {
            happyShift(action_841)
        },
        134 => {
            happyShift(action_841)
        },
        _ => {
            happyShift(action_841)
        },
    }
}

pub fn action_658(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_333
}

pub fn action_659(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_660(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_334
}

pub fn action_661(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_331
}

pub fn action_662(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_329
}

pub fn action_663(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_327
}

pub fn action_664(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        186 => {
            happyShift(action_171)
        },
        193 => {
            happyShift(action_171)
        },
        213 => {
            happyShift(action_171)
        },
        214 => {
            happyShift(action_171)
        },
        216 => {
            happyShift(action_171)
        },
        231 => {
            happyShift(action_171)
        },
        239 => {
            happyShift(action_171)
        },
        64 => {
            happyShift(action_171)
        },
        134 => {
            happyShift(action_171)
        },
        _ => {
            happyShift(action_171)
        },
    }
}

pub fn action_665(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        167 => {
            happyShift(action_839)
        },
        _ => {
            happyShift(action_839)
        },
    }
}

pub fn action_666(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_837)
        },
        179 => {
            happyShift(action_837)
        },
        _ => {
            happyShift(action_837)
        },
    }
}

pub fn action_667(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_370
}

pub fn action_668(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        167 => {
            happyShift(action_836)
        },
        _ => {
            happyShift(action_836)
        },
    }
}

pub fn action_669(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_835)
        },
        _ => {
            happyShift(action_835)
        },
    }
}

pub fn action_670(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_832)
        },
        140 => {
            happyShift(action_832)
        },
        143 => {
            happyShift(action_832)
        },
        _ => {
            happyShift(action_832)
        },
    }
}

pub fn action_671(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_373
}

pub fn action_672(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_831)
        },
        _ => {
            happyShift(action_831)
        },
    }
}

pub fn action_673(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_48
}

pub fn action_674(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_675(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        185 => {
            happyShift(action_475)
        },
        186 => {
            happyShift(action_475)
        },
        188 => {
            happyShift(action_475)
        },
        190 => {
            happyShift(action_475)
        },
        192 => {
            happyShift(action_475)
        },
        193 => {
            happyShift(action_475)
        },
        195 => {
            happyShift(action_475)
        },
        198 => {
            happyShift(action_475)
        },
        200 => {
            happyShift(action_475)
        },
        201 => {
            happyShift(action_475)
        },
        202 => {
            happyShift(action_475)
        },
        207 => {
            happyShift(action_475)
        },
        208 => {
            happyShift(action_475)
        },
        209 => {
            happyShift(action_475)
        },
        210 => {
            happyShift(action_475)
        },
        212 => {
            happyShift(action_475)
        },
        213 => {
            happyShift(action_475)
        },
        214 => {
            happyShift(action_475)
        },
        215 => {
            happyShift(action_475)
        },
        216 => {
            happyShift(action_475)
        },
        218 => {
            happyShift(action_475)
        },
        219 => {
            happyShift(action_475)
        },
        221 => {
            happyShift(action_475)
        },
        223 => {
            happyShift(action_475)
        },
        225 => {
            happyShift(action_475)
        },
        226 => {
            happyShift(action_475)
        },
        227 => {
            happyShift(action_475)
        },
        228 => {
            happyShift(action_475)
        },
        229 => {
            happyShift(action_475)
        },
        230 => {
            happyShift(action_475)
        },
        231 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        238 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        11 => {
            happyShift(action_475)
        },
        40 => {
            happyShift(action_475)
        },
        41 => {
            happyShift(action_475)
        },
        42 => {
            happyShift(action_475)
        },
        43 => {
            happyShift(action_475)
        },
        45 => {
            happyShift(action_475)
        },
        52 => {
            happyShift(action_475)
        },
        53 => {
            happyShift(action_475)
        },
        54 => {
            happyShift(action_475)
        },
        61 => {
            happyShift(action_475)
        },
        64 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_676(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_677(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_678(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_679(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_38
}

pub fn action_680(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_528)
        },
        180 => {
            happyShift(action_528)
        },
        _ => {
            happyShift(action_528)
        },
    }
}

pub fn action_681(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        182 => {
            happyShift(action_824)
        },
        _ => {
            happyShift(action_824)
        },
    }
}

pub fn action_682(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_54
}

pub fn action_683(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_823)
        },
        _ => {
            happyShift(action_823)
        },
    }
}

pub fn action_684(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        140 => {
            happyShift(action_822)
        },
        236 => {
            happyShift(action_822)
        },
        28 => {
            happyShift(action_822)
        },
        29 => {
            happyShift(action_822)
        },
        30 => {
            happyShift(action_822)
        },
        128 => {
            happyShift(action_822)
        },
        _ => {
            happyShift(action_822)
        },
    }
}

pub fn action_685(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        180 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        187 => {
            happyShift(action_26)
        },
        189 => {
            happyShift(action_26)
        },
        191 => {
            happyShift(action_26)
        },
        194 => {
            happyShift(action_26)
        },
        196 => {
            happyShift(action_26)
        },
        197 => {
            happyShift(action_26)
        },
        203 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        205 => {
            happyShift(action_26)
        },
        206 => {
            happyShift(action_26)
        },
        217 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        224 => {
            happyShift(action_26)
        },
        232 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        12 => {
            happyShift(action_26)
        },
        13 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        22 => {
            happyShift(action_26)
        },
        23 => {
            happyShift(action_26)
        },
        24 => {
            happyShift(action_26)
        },
        25 => {
            happyShift(action_26)
        },
        26 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_686(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_816)
        },
        _ => {
            happyShift(action_816)
        },
    }
}

pub fn action_687(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_815)
        },
        _ => {
            happyShift(action_815)
        },
    }
}

pub fn action_688(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_814)
        },
        _ => {
            happyShift(action_814)
        },
    }
}

pub fn action_689(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        199 => {
            happyShift(action_813)
        },
        _ => {
            happyShift(action_813)
        },
    }
}

pub fn action_690(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_60
}

pub fn action_691(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_61
}

pub fn action_692(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        168 => {
            happyShift(action_516)
        },
        94 => {
            happyShift(action_516)
        },
        _ => {
            happyShift(action_516)
        },
    }
}

pub fn action_693(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        168 => {
            happyShift(action_516)
        },
        94 => {
            happyShift(action_516)
        },
        _ => {
            happyShift(action_516)
        },
    }
}

pub fn action_694(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_810)
        },
        _ => {
            happyShift(action_810)
        },
    }
}

pub fn action_695(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_166
}

pub fn action_696(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_167
}

pub fn action_697(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        139 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_698(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_243
}

pub fn action_699(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_254
}

pub fn action_700(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_751)
        },
        150 => {
            happyShift(action_751)
        },
        237 => {
            happyShift(action_751)
        },
        238 => {
            happyShift(action_751)
        },
        239 => {
            happyShift(action_751)
        },
        70 => {
            happyShift(action_751)
        },
        71 => {
            happyShift(action_751)
        },
        72 => {
            happyShift(action_751)
        },
        73 => {
            happyShift(action_751)
        },
        74 => {
            happyShift(action_751)
        },
        76 => {
            happyShift(action_751)
        },
        77 => {
            happyShift(action_751)
        },
        78 => {
            happyShift(action_751)
        },
        133 => {
            happyShift(action_751)
        },
        134 => {
            happyShift(action_751)
        },
        _ => {
            happyShift(action_751)
        },
    }
}

pub fn action_701(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_249
}

pub fn action_702(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_245
}

pub fn action_703(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_257
}

pub fn action_704(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_256
}

pub fn action_705(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_571)
        },
        150 => {
            happyShift(action_571)
        },
        186 => {
            happyShift(action_571)
        },
        193 => {
            happyShift(action_571)
        },
        213 => {
            happyShift(action_571)
        },
        214 => {
            happyShift(action_571)
        },
        216 => {
            happyShift(action_571)
        },
        231 => {
            happyShift(action_571)
        },
        237 => {
            happyShift(action_571)
        },
        238 => {
            happyShift(action_571)
        },
        239 => {
            happyShift(action_571)
        },
        64 => {
            happyShift(action_571)
        },
        69 => {
            happyShift(action_571)
        },
        70 => {
            happyShift(action_571)
        },
        71 => {
            happyShift(action_571)
        },
        75 => {
            happyShift(action_571)
        },
        76 => {
            happyShift(action_571)
        },
        77 => {
            happyShift(action_571)
        },
        78 => {
            happyShift(action_571)
        },
        133 => {
            happyShift(action_571)
        },
        134 => {
            happyShift(action_571)
        },
        _ => {
            happyShift(action_571)
        },
    }
}

pub fn action_706(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_707(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_259
}

pub fn action_708(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_715)
        },
        182 => {
            happyShift(action_715)
        },
        190 => {
            happyShift(action_715)
        },
        192 => {
            happyShift(action_715)
        },
        195 => {
            happyShift(action_715)
        },
        198 => {
            happyShift(action_715)
        },
        200 => {
            happyShift(action_715)
        },
        202 => {
            happyShift(action_715)
        },
        208 => {
            happyShift(action_715)
        },
        209 => {
            happyShift(action_715)
        },
        210 => {
            happyShift(action_715)
        },
        218 => {
            happyShift(action_715)
        },
        219 => {
            happyShift(action_715)
        },
        223 => {
            happyShift(action_715)
        },
        226 => {
            happyShift(action_715)
        },
        228 => {
            happyShift(action_715)
        },
        229 => {
            happyShift(action_715)
        },
        230 => {
            happyShift(action_715)
        },
        238 => {
            happyShift(action_715)
        },
        239 => {
            happyShift(action_715)
        },
        240 => {
            happyShift(action_715)
        },
        44 => {
            happyShift(action_715)
        },
        45 => {
            happyShift(action_715)
        },
        47 => {
            happyShift(action_715)
        },
        49 => {
            happyShift(action_715)
        },
        51 => {
            happyShift(action_715)
        },
        52 => {
            happyShift(action_715)
        },
        53 => {
            happyShift(action_715)
        },
        54 => {
            happyShift(action_715)
        },
        56 => {
            happyShift(action_715)
        },
        57 => {
            happyShift(action_715)
        },
        58 => {
            happyShift(action_715)
        },
        61 => {
            happyShift(action_715)
        },
        65 => {
            happyShift(action_715)
        },
        132 => {
            happyShift(action_715)
        },
        133 => {
            happyShift(action_715)
        },
        134 => {
            happyShift(action_715)
        },
        _ => {
            happyShift(action_715)
        },
    }
}

pub fn action_709(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_524)
        },
        150 => {
            happyShift(action_524)
        },
        167 => {
            happyShift(action_524)
        },
        237 => {
            happyShift(action_524)
        },
        238 => {
            happyShift(action_524)
        },
        59 => {
            happyShift(action_524)
        },
        66 => {
            happyShift(action_524)
        },
        68 => {
            happyShift(action_524)
        },
        69 => {
            happyShift(action_524)
        },
        70 => {
            happyShift(action_524)
        },
        71 => {
            happyShift(action_524)
        },
        72 => {
            happyShift(action_524)
        },
        73 => {
            happyShift(action_524)
        },
        75 => {
            happyShift(action_524)
        },
        76 => {
            happyShift(action_524)
        },
        77 => {
            happyShift(action_524)
        },
        78 => {
            happyShift(action_524)
        },
        _ => {
            happyShift(action_524)
        },
    }
}

pub fn action_710(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_193
}

pub fn action_711(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_800)
        },
        180 => {
            happyShift(action_800)
        },
        _ => {
            happyShift(action_800)
        },
    }
}

pub fn action_712(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_798)
        },
        180 => {
            happyShift(action_798)
        },
        _ => {
            happyShift(action_798)
        },
    }
}

pub fn action_713(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        186 => {
            happyShift(action_171)
        },
        190 => {
            happyShift(action_171)
        },
        192 => {
            happyShift(action_171)
        },
        193 => {
            happyShift(action_171)
        },
        195 => {
            happyShift(action_171)
        },
        198 => {
            happyShift(action_171)
        },
        200 => {
            happyShift(action_171)
        },
        202 => {
            happyShift(action_171)
        },
        208 => {
            happyShift(action_171)
        },
        209 => {
            happyShift(action_171)
        },
        210 => {
            happyShift(action_171)
        },
        213 => {
            happyShift(action_171)
        },
        214 => {
            happyShift(action_171)
        },
        216 => {
            happyShift(action_171)
        },
        218 => {
            happyShift(action_171)
        },
        219 => {
            happyShift(action_171)
        },
        223 => {
            happyShift(action_171)
        },
        226 => {
            happyShift(action_171)
        },
        228 => {
            happyShift(action_171)
        },
        229 => {
            happyShift(action_171)
        },
        230 => {
            happyShift(action_171)
        },
        231 => {
            happyShift(action_171)
        },
        238 => {
            happyShift(action_171)
        },
        239 => {
            happyShift(action_171)
        },
        45 => {
            happyShift(action_171)
        },
        52 => {
            happyShift(action_171)
        },
        53 => {
            happyShift(action_171)
        },
        54 => {
            happyShift(action_171)
        },
        61 => {
            happyShift(action_171)
        },
        64 => {
            happyShift(action_171)
        },
        132 => {
            happyShift(action_171)
        },
        133 => {
            happyShift(action_171)
        },
        134 => {
            happyShift(action_171)
        },
        _ => {
            happyShift(action_171)
        },
    }
}

pub fn action_714(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        167 => {
            happyShift(action_475)
        },
        190 => {
            happyShift(action_475)
        },
        192 => {
            happyShift(action_475)
        },
        195 => {
            happyShift(action_475)
        },
        198 => {
            happyShift(action_475)
        },
        200 => {
            happyShift(action_475)
        },
        202 => {
            happyShift(action_475)
        },
        208 => {
            happyShift(action_475)
        },
        209 => {
            happyShift(action_475)
        },
        210 => {
            happyShift(action_475)
        },
        218 => {
            happyShift(action_475)
        },
        219 => {
            happyShift(action_475)
        },
        223 => {
            happyShift(action_475)
        },
        226 => {
            happyShift(action_475)
        },
        228 => {
            happyShift(action_475)
        },
        229 => {
            happyShift(action_475)
        },
        230 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        238 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        45 => {
            happyShift(action_475)
        },
        52 => {
            happyShift(action_475)
        },
        53 => {
            happyShift(action_475)
        },
        54 => {
            happyShift(action_475)
        },
        60 => {
            happyShift(action_475)
        },
        61 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_715(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_192
}

pub fn action_716(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_187
}

pub fn action_717(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        190 => {
            happyShift(action_116)
        },
        192 => {
            happyShift(action_116)
        },
        195 => {
            happyShift(action_116)
        },
        198 => {
            happyShift(action_116)
        },
        200 => {
            happyShift(action_116)
        },
        202 => {
            happyShift(action_116)
        },
        208 => {
            happyShift(action_116)
        },
        209 => {
            happyShift(action_116)
        },
        210 => {
            happyShift(action_116)
        },
        218 => {
            happyShift(action_116)
        },
        219 => {
            happyShift(action_116)
        },
        223 => {
            happyShift(action_116)
        },
        226 => {
            happyShift(action_116)
        },
        228 => {
            happyShift(action_116)
        },
        229 => {
            happyShift(action_116)
        },
        230 => {
            happyShift(action_116)
        },
        238 => {
            happyShift(action_116)
        },
        239 => {
            happyShift(action_116)
        },
        240 => {
            happyShift(action_116)
        },
        44 => {
            happyShift(action_116)
        },
        45 => {
            happyShift(action_116)
        },
        47 => {
            happyShift(action_116)
        },
        49 => {
            happyShift(action_116)
        },
        51 => {
            happyShift(action_116)
        },
        52 => {
            happyShift(action_116)
        },
        53 => {
            happyShift(action_116)
        },
        54 => {
            happyShift(action_116)
        },
        56 => {
            happyShift(action_116)
        },
        57 => {
            happyShift(action_116)
        },
        58 => {
            happyShift(action_116)
        },
        61 => {
            happyShift(action_116)
        },
        65 => {
            happyShift(action_116)
        },
        132 => {
            happyShift(action_116)
        },
        133 => {
            happyShift(action_116)
        },
        134 => {
            happyShift(action_116)
        },
        _ => {
            happyShift(action_116)
        },
    }
}

pub fn action_718(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_174
}

pub fn action_719(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_175
}

pub fn action_720(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_94
}

pub fn action_721(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_25
}

pub fn action_722(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_791)
        },
        _ => {
            happyShift(action_791)
        },
    }
}

pub fn action_723(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_790)
        },
        _ => {
            happyShift(action_790)
        },
    }
}

pub fn action_724(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_789)
        },
        _ => {
            happyShift(action_789)
        },
    }
}

pub fn action_725(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_788)
        },
        _ => {
            happyShift(action_788)
        },
    }
}

pub fn action_726(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyReduce_471
        },
        239 => {
            happyReduce_471
        },
        132 => {
            happyReduce_471
        },
        133 => {
            happyReduce_471
        },
        134 => {
            happyReduce_471
        },
        _ => {
            happyReduce_471
        },
    }
}

pub fn action_727(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_728(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_317
}

pub fn action_729(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_785)
        },
        _ => {
            happyShift(action_785)
        },
    }
}

pub fn action_730(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_316
}

pub fn action_731(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_322
}

pub fn action_732(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_784)
        },
        _ => {
            happyShift(action_784)
        },
    }
}

pub fn action_733(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_734(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_289
}

pub fn action_735(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_290
}

pub fn action_736(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_293
}

pub fn action_737(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_540)
        },
        140 => {
            happyShift(action_540)
        },
        150 => {
            happyShift(action_540)
        },
        186 => {
            happyShift(action_540)
        },
        193 => {
            happyShift(action_540)
        },
        213 => {
            happyShift(action_540)
        },
        214 => {
            happyShift(action_540)
        },
        216 => {
            happyShift(action_540)
        },
        231 => {
            happyShift(action_540)
        },
        237 => {
            happyShift(action_540)
        },
        238 => {
            happyShift(action_540)
        },
        239 => {
            happyShift(action_540)
        },
        64 => {
            happyShift(action_540)
        },
        69 => {
            happyShift(action_540)
        },
        70 => {
            happyShift(action_540)
        },
        71 => {
            happyShift(action_540)
        },
        75 => {
            happyShift(action_540)
        },
        76 => {
            happyShift(action_540)
        },
        77 => {
            happyShift(action_540)
        },
        78 => {
            happyShift(action_540)
        },
        87 => {
            happyShift(action_540)
        },
        88 => {
            happyShift(action_540)
        },
        89 => {
            happyShift(action_540)
        },
        90 => {
            happyShift(action_540)
        },
        91 => {
            happyShift(action_540)
        },
        92 => {
            happyShift(action_540)
        },
        132 => {
            happyShift(action_540)
        },
        133 => {
            happyShift(action_540)
        },
        134 => {
            happyShift(action_540)
        },
        _ => {
            happyShift(action_540)
        },
    }
}

pub fn action_738(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_540)
        },
        140 => {
            happyShift(action_540)
        },
        150 => {
            happyShift(action_540)
        },
        186 => {
            happyShift(action_540)
        },
        193 => {
            happyShift(action_540)
        },
        213 => {
            happyShift(action_540)
        },
        214 => {
            happyShift(action_540)
        },
        216 => {
            happyShift(action_540)
        },
        231 => {
            happyShift(action_540)
        },
        237 => {
            happyShift(action_540)
        },
        238 => {
            happyShift(action_540)
        },
        239 => {
            happyShift(action_540)
        },
        69 => {
            happyShift(action_540)
        },
        70 => {
            happyShift(action_540)
        },
        71 => {
            happyShift(action_540)
        },
        75 => {
            happyShift(action_540)
        },
        76 => {
            happyShift(action_540)
        },
        77 => {
            happyShift(action_540)
        },
        78 => {
            happyShift(action_540)
        },
        87 => {
            happyShift(action_540)
        },
        88 => {
            happyShift(action_540)
        },
        89 => {
            happyShift(action_540)
        },
        90 => {
            happyShift(action_540)
        },
        91 => {
            happyShift(action_540)
        },
        92 => {
            happyShift(action_540)
        },
        134 => {
            happyShift(action_540)
        },
        _ => {
            happyShift(action_540)
        },
    }
}

pub fn action_739(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_540)
        },
        140 => {
            happyShift(action_540)
        },
        150 => {
            happyShift(action_540)
        },
        185 => {
            happyShift(action_540)
        },
        188 => {
            happyShift(action_540)
        },
        190 => {
            happyShift(action_540)
        },
        192 => {
            happyShift(action_540)
        },
        195 => {
            happyShift(action_540)
        },
        198 => {
            happyShift(action_540)
        },
        200 => {
            happyShift(action_540)
        },
        201 => {
            happyShift(action_540)
        },
        202 => {
            happyShift(action_540)
        },
        207 => {
            happyShift(action_540)
        },
        208 => {
            happyShift(action_540)
        },
        209 => {
            happyShift(action_540)
        },
        210 => {
            happyShift(action_540)
        },
        212 => {
            happyShift(action_540)
        },
        215 => {
            happyShift(action_540)
        },
        218 => {
            happyShift(action_540)
        },
        219 => {
            happyShift(action_540)
        },
        221 => {
            happyShift(action_540)
        },
        223 => {
            happyShift(action_540)
        },
        225 => {
            happyShift(action_540)
        },
        226 => {
            happyShift(action_540)
        },
        227 => {
            happyShift(action_540)
        },
        228 => {
            happyShift(action_540)
        },
        229 => {
            happyShift(action_540)
        },
        230 => {
            happyShift(action_540)
        },
        237 => {
            happyShift(action_540)
        },
        238 => {
            happyShift(action_540)
        },
        239 => {
            happyShift(action_540)
        },
        40 => {
            happyShift(action_540)
        },
        41 => {
            happyShift(action_540)
        },
        42 => {
            happyShift(action_540)
        },
        43 => {
            happyShift(action_540)
        },
        45 => {
            happyShift(action_540)
        },
        52 => {
            happyShift(action_540)
        },
        53 => {
            happyShift(action_540)
        },
        54 => {
            happyShift(action_540)
        },
        61 => {
            happyShift(action_540)
        },
        70 => {
            happyShift(action_540)
        },
        71 => {
            happyShift(action_540)
        },
        76 => {
            happyShift(action_540)
        },
        77 => {
            happyShift(action_540)
        },
        78 => {
            happyShift(action_540)
        },
        88 => {
            happyShift(action_540)
        },
        89 => {
            happyShift(action_540)
        },
        90 => {
            happyShift(action_540)
        },
        91 => {
            happyShift(action_540)
        },
        92 => {
            happyShift(action_540)
        },
        134 => {
            happyShift(action_540)
        },
        _ => {
            happyShift(action_540)
        },
    }
}

pub fn action_740(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_296
}

pub fn action_741(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_297
}

pub fn action_742(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_535)
        },
        140 => {
            happyShift(action_535)
        },
        150 => {
            happyShift(action_535)
        },
        186 => {
            happyShift(action_535)
        },
        193 => {
            happyShift(action_535)
        },
        213 => {
            happyShift(action_535)
        },
        214 => {
            happyShift(action_535)
        },
        216 => {
            happyShift(action_535)
        },
        231 => {
            happyShift(action_535)
        },
        237 => {
            happyShift(action_535)
        },
        239 => {
            happyShift(action_535)
        },
        64 => {
            happyShift(action_535)
        },
        75 => {
            happyShift(action_535)
        },
        76 => {
            happyShift(action_535)
        },
        77 => {
            happyShift(action_535)
        },
        78 => {
            happyShift(action_535)
        },
        87 => {
            happyShift(action_535)
        },
        88 => {
            happyShift(action_535)
        },
        89 => {
            happyShift(action_535)
        },
        90 => {
            happyShift(action_535)
        },
        91 => {
            happyShift(action_535)
        },
        92 => {
            happyShift(action_535)
        },
        132 => {
            happyShift(action_535)
        },
        133 => {
            happyShift(action_535)
        },
        134 => {
            happyShift(action_535)
        },
        _ => {
            happyShift(action_535)
        },
    }
}

pub fn action_743(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_535)
        },
        140 => {
            happyShift(action_535)
        },
        150 => {
            happyShift(action_535)
        },
        186 => {
            happyShift(action_535)
        },
        193 => {
            happyShift(action_535)
        },
        213 => {
            happyShift(action_535)
        },
        214 => {
            happyShift(action_535)
        },
        216 => {
            happyShift(action_535)
        },
        231 => {
            happyShift(action_535)
        },
        237 => {
            happyShift(action_535)
        },
        239 => {
            happyShift(action_535)
        },
        75 => {
            happyShift(action_535)
        },
        76 => {
            happyShift(action_535)
        },
        77 => {
            happyShift(action_535)
        },
        78 => {
            happyShift(action_535)
        },
        87 => {
            happyShift(action_535)
        },
        88 => {
            happyShift(action_535)
        },
        89 => {
            happyShift(action_535)
        },
        90 => {
            happyShift(action_535)
        },
        91 => {
            happyShift(action_535)
        },
        92 => {
            happyShift(action_535)
        },
        134 => {
            happyShift(action_535)
        },
        _ => {
            happyShift(action_535)
        },
    }
}

pub fn action_744(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_535)
        },
        140 => {
            happyShift(action_535)
        },
        150 => {
            happyShift(action_535)
        },
        185 => {
            happyShift(action_535)
        },
        188 => {
            happyShift(action_535)
        },
        190 => {
            happyShift(action_535)
        },
        192 => {
            happyShift(action_535)
        },
        195 => {
            happyShift(action_535)
        },
        198 => {
            happyShift(action_535)
        },
        200 => {
            happyShift(action_535)
        },
        201 => {
            happyShift(action_535)
        },
        202 => {
            happyShift(action_535)
        },
        207 => {
            happyShift(action_535)
        },
        208 => {
            happyShift(action_535)
        },
        209 => {
            happyShift(action_535)
        },
        210 => {
            happyShift(action_535)
        },
        212 => {
            happyShift(action_535)
        },
        215 => {
            happyShift(action_535)
        },
        218 => {
            happyShift(action_535)
        },
        219 => {
            happyShift(action_535)
        },
        221 => {
            happyShift(action_535)
        },
        223 => {
            happyShift(action_535)
        },
        225 => {
            happyShift(action_535)
        },
        226 => {
            happyShift(action_535)
        },
        227 => {
            happyShift(action_535)
        },
        228 => {
            happyShift(action_535)
        },
        229 => {
            happyShift(action_535)
        },
        230 => {
            happyShift(action_535)
        },
        237 => {
            happyShift(action_535)
        },
        238 => {
            happyShift(action_535)
        },
        239 => {
            happyShift(action_535)
        },
        40 => {
            happyShift(action_535)
        },
        41 => {
            happyShift(action_535)
        },
        42 => {
            happyShift(action_535)
        },
        43 => {
            happyShift(action_535)
        },
        45 => {
            happyShift(action_535)
        },
        52 => {
            happyShift(action_535)
        },
        53 => {
            happyShift(action_535)
        },
        54 => {
            happyShift(action_535)
        },
        61 => {
            happyShift(action_535)
        },
        76 => {
            happyShift(action_535)
        },
        77 => {
            happyShift(action_535)
        },
        78 => {
            happyShift(action_535)
        },
        88 => {
            happyShift(action_535)
        },
        89 => {
            happyShift(action_535)
        },
        90 => {
            happyShift(action_535)
        },
        91 => {
            happyShift(action_535)
        },
        92 => {
            happyShift(action_535)
        },
        134 => {
            happyShift(action_535)
        },
        _ => {
            happyShift(action_535)
        },
    }
}

pub fn action_745(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_301
}

pub fn action_746(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_286
}

pub fn action_747(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_284
}

pub fn action_748(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_303
}

pub fn action_749(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_780)
        },
        150 => {
            happyShift(action_780)
        },
        186 => {
            happyShift(action_780)
        },
        193 => {
            happyShift(action_780)
        },
        213 => {
            happyShift(action_780)
        },
        214 => {
            happyShift(action_780)
        },
        216 => {
            happyShift(action_780)
        },
        231 => {
            happyShift(action_780)
        },
        237 => {
            happyShift(action_780)
        },
        238 => {
            happyShift(action_780)
        },
        239 => {
            happyShift(action_780)
        },
        64 => {
            happyShift(action_780)
        },
        69 => {
            happyShift(action_780)
        },
        70 => {
            happyShift(action_780)
        },
        71 => {
            happyShift(action_780)
        },
        72 => {
            happyShift(action_780)
        },
        73 => {
            happyShift(action_780)
        },
        75 => {
            happyShift(action_780)
        },
        76 => {
            happyShift(action_780)
        },
        77 => {
            happyShift(action_780)
        },
        78 => {
            happyShift(action_780)
        },
        133 => {
            happyShift(action_780)
        },
        134 => {
            happyShift(action_780)
        },
        _ => {
            happyShift(action_780)
        },
    }
}

pub fn action_750(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_751)
        },
        150 => {
            happyShift(action_751)
        },
        237 => {
            happyShift(action_751)
        },
        238 => {
            happyShift(action_751)
        },
        239 => {
            happyShift(action_751)
        },
        70 => {
            happyShift(action_751)
        },
        71 => {
            happyShift(action_751)
        },
        72 => {
            happyShift(action_751)
        },
        73 => {
            happyShift(action_751)
        },
        74 => {
            happyShift(action_751)
        },
        76 => {
            happyShift(action_751)
        },
        77 => {
            happyShift(action_751)
        },
        78 => {
            happyShift(action_751)
        },
        133 => {
            happyShift(action_751)
        },
        134 => {
            happyShift(action_751)
        },
        _ => {
            happyShift(action_751)
        },
    }
}

pub fn action_751(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_751)
        },
        150 => {
            happyShift(action_751)
        },
        237 => {
            happyShift(action_751)
        },
        238 => {
            happyShift(action_751)
        },
        239 => {
            happyShift(action_751)
        },
        70 => {
            happyShift(action_751)
        },
        71 => {
            happyShift(action_751)
        },
        72 => {
            happyShift(action_751)
        },
        73 => {
            happyShift(action_751)
        },
        74 => {
            happyShift(action_751)
        },
        76 => {
            happyShift(action_751)
        },
        77 => {
            happyShift(action_751)
        },
        78 => {
            happyShift(action_751)
        },
        133 => {
            happyShift(action_751)
        },
        134 => {
            happyShift(action_751)
        },
        _ => {
            happyShift(action_751)
        },
    }
}

pub fn action_752(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        187 => {
            happyShift(action_406)
        },
        35 => {
            happyShift(action_406)
        },
        67 => {
            happyShift(action_406)
        },
        _ => {
            happyShift(action_406)
        },
    }
}

pub fn action_753(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_177
}

pub fn action_754(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_178
}

pub fn action_755(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_345
}

pub fn action_756(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_271
}

pub fn action_757(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_11
}

pub fn action_758(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_778)
        },
        182 => {
            happyShift(action_778)
        },
        _ => {
            happyShift(action_778)
        },
    }
}

pub fn action_759(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        168 => {
            happyShift(action_777)
        },
        239 => {
            happyShift(action_777)
        },
        134 => {
            happyShift(action_777)
        },
        _ => {
            happyShift(action_777)
        },
    }
}

pub fn action_760(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        126 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_761(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        182 => {
            happyShift(action_775)
        },
        237 => {
            happyShift(action_775)
        },
        238 => {
            happyShift(action_775)
        },
        63 => {
            happyShift(action_775)
        },
        131 => {
            happyShift(action_775)
        },
        _ => {
            happyShift(action_775)
        },
    }
}

pub fn action_762(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_210
}

pub fn action_763(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_773)
        },
        _ => {
            happyShift(action_773)
        },
    }
}

pub fn action_764(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        139 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        126 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        137 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_765(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_768)
        },
        _ => {
            happyShift(action_768)
        },
    }
}

pub fn action_766(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        193 => {
            happyShift(action_496)
        },
        237 => {
            happyShift(action_496)
        },
        136 => {
            happyShift(action_496)
        },
        _ => {
            happyShift(action_496)
        },
    }
}

pub fn action_767(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_477
}

pub fn action_768(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_475
}

pub fn action_769(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        168 => {
            happyShift(action_316)
        },
        169 => {
            happyShift(action_316)
        },
        170 => {
            happyShift(action_316)
        },
        171 => {
            happyShift(action_316)
        },
        172 => {
            happyShift(action_316)
        },
        173 => {
            happyShift(action_316)
        },
        174 => {
            happyShift(action_316)
        },
        175 => {
            happyShift(action_316)
        },
        176 => {
            happyShift(action_316)
        },
        177 => {
            happyShift(action_316)
        },
        178 => {
            happyShift(action_316)
        },
        121 => {
            happyShift(action_316)
        },
        _ => {
            happyShift(action_316)
        },
    }
}

pub fn action_770(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_483
}

pub fn action_771(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_894)
        },
        179 => {
            happyShift(action_894)
        },
        _ => {
            happyShift(action_894)
        },
    }
}

pub fn action_772(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_482
}

pub fn action_773(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_893)
        },
        _ => {
            happyShift(action_893)
        },
    }
}

pub fn action_774(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_216
}

pub fn action_775(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_211
}

pub fn action_776(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_220
}

pub fn action_777(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        126 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_778(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        182 => {
            happyShift(action_891)
        },
        237 => {
            happyShift(action_891)
        },
        238 => {
            happyShift(action_891)
        },
        63 => {
            happyShift(action_891)
        },
        131 => {
            happyShift(action_891)
        },
        _ => {
            happyShift(action_891)
        },
    }
}

pub fn action_779(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_212
}

pub fn action_780(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_751)
        },
        150 => {
            happyShift(action_751)
        },
        237 => {
            happyShift(action_751)
        },
        238 => {
            happyShift(action_751)
        },
        239 => {
            happyShift(action_751)
        },
        70 => {
            happyShift(action_751)
        },
        71 => {
            happyShift(action_751)
        },
        72 => {
            happyShift(action_751)
        },
        73 => {
            happyShift(action_751)
        },
        74 => {
            happyShift(action_751)
        },
        76 => {
            happyShift(action_751)
        },
        77 => {
            happyShift(action_751)
        },
        78 => {
            happyShift(action_751)
        },
        133 => {
            happyShift(action_751)
        },
        134 => {
            happyShift(action_751)
        },
        _ => {
            happyShift(action_751)
        },
    }
}

pub fn action_781(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        186 => {
            happyShift(action_475)
        },
        193 => {
            happyShift(action_475)
        },
        213 => {
            happyShift(action_475)
        },
        214 => {
            happyShift(action_475)
        },
        216 => {
            happyShift(action_475)
        },
        231 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        239 => {
            happyShift(action_475)
        },
        64 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        134 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_782(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_571)
        },
        150 => {
            happyShift(action_571)
        },
        186 => {
            happyShift(action_571)
        },
        193 => {
            happyShift(action_571)
        },
        213 => {
            happyShift(action_571)
        },
        214 => {
            happyShift(action_571)
        },
        216 => {
            happyShift(action_571)
        },
        231 => {
            happyShift(action_571)
        },
        237 => {
            happyShift(action_571)
        },
        238 => {
            happyShift(action_571)
        },
        239 => {
            happyShift(action_571)
        },
        64 => {
            happyShift(action_571)
        },
        69 => {
            happyShift(action_571)
        },
        70 => {
            happyShift(action_571)
        },
        71 => {
            happyShift(action_571)
        },
        75 => {
            happyShift(action_571)
        },
        76 => {
            happyShift(action_571)
        },
        77 => {
            happyShift(action_571)
        },
        78 => {
            happyShift(action_571)
        },
        134 => {
            happyShift(action_571)
        },
        _ => {
            happyShift(action_571)
        },
    }
}

pub fn action_783(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_890)
        },
        _ => {
            happyShift(action_890)
        },
    }
}

pub fn action_784(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_319
}

pub fn action_785(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_323
}

pub fn action_786(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_787(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_888)
        },
        _ => {
            happyShift(action_888)
        },
    }
}

pub fn action_788(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_318
}

pub fn action_789(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_324
}

pub fn action_790(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_180
}

pub fn action_791(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_181
}

pub fn action_792(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_196
}

pub fn action_793(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_794(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        167 => {
            happyShift(action_886)
        },
        _ => {
            happyShift(action_886)
        },
    }
}

pub fn action_795(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        126 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_796(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        167 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        60 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_797(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        186 => {
            happyShift(action_171)
        },
        190 => {
            happyShift(action_171)
        },
        192 => {
            happyShift(action_171)
        },
        193 => {
            happyShift(action_171)
        },
        195 => {
            happyShift(action_171)
        },
        198 => {
            happyShift(action_171)
        },
        200 => {
            happyShift(action_171)
        },
        202 => {
            happyShift(action_171)
        },
        208 => {
            happyShift(action_171)
        },
        209 => {
            happyShift(action_171)
        },
        210 => {
            happyShift(action_171)
        },
        213 => {
            happyShift(action_171)
        },
        214 => {
            happyShift(action_171)
        },
        216 => {
            happyShift(action_171)
        },
        218 => {
            happyShift(action_171)
        },
        219 => {
            happyShift(action_171)
        },
        223 => {
            happyShift(action_171)
        },
        226 => {
            happyShift(action_171)
        },
        228 => {
            happyShift(action_171)
        },
        229 => {
            happyShift(action_171)
        },
        230 => {
            happyShift(action_171)
        },
        231 => {
            happyShift(action_171)
        },
        238 => {
            happyShift(action_171)
        },
        239 => {
            happyShift(action_171)
        },
        45 => {
            happyShift(action_171)
        },
        52 => {
            happyShift(action_171)
        },
        53 => {
            happyShift(action_171)
        },
        54 => {
            happyShift(action_171)
        },
        61 => {
            happyShift(action_171)
        },
        64 => {
            happyShift(action_171)
        },
        134 => {
            happyShift(action_171)
        },
        _ => {
            happyShift(action_171)
        },
    }
}

pub fn action_798(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_799(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_194
}

pub fn action_800(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_801(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_195
}

pub fn action_802(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_803(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        167 => {
            happyShift(action_880)
        },
        _ => {
            happyShift(action_880)
        },
    }
}

pub fn action_804(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        126 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_805(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_186
}

pub fn action_806(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_247
}

pub fn action_807(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_571)
        },
        150 => {
            happyShift(action_571)
        },
        186 => {
            happyShift(action_571)
        },
        193 => {
            happyShift(action_571)
        },
        213 => {
            happyShift(action_571)
        },
        214 => {
            happyShift(action_571)
        },
        216 => {
            happyShift(action_571)
        },
        231 => {
            happyShift(action_571)
        },
        237 => {
            happyShift(action_571)
        },
        238 => {
            happyShift(action_571)
        },
        239 => {
            happyShift(action_571)
        },
        64 => {
            happyShift(action_571)
        },
        69 => {
            happyShift(action_571)
        },
        70 => {
            happyShift(action_571)
        },
        71 => {
            happyShift(action_571)
        },
        75 => {
            happyShift(action_571)
        },
        76 => {
            happyShift(action_571)
        },
        77 => {
            happyShift(action_571)
        },
        78 => {
            happyShift(action_571)
        },
        134 => {
            happyShift(action_571)
        },
        _ => {
            happyShift(action_571)
        },
    }
}

pub fn action_808(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        139 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_809(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_250
}

pub fn action_810(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_233
}

pub fn action_811(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_100
}

pub fn action_812(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_96
}

pub fn action_813(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        180 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        187 => {
            happyShift(action_26)
        },
        189 => {
            happyShift(action_26)
        },
        191 => {
            happyShift(action_26)
        },
        194 => {
            happyShift(action_26)
        },
        196 => {
            happyShift(action_26)
        },
        197 => {
            happyShift(action_26)
        },
        203 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        205 => {
            happyShift(action_26)
        },
        206 => {
            happyShift(action_26)
        },
        217 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        224 => {
            happyShift(action_26)
        },
        232 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        12 => {
            happyShift(action_26)
        },
        13 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        22 => {
            happyShift(action_26)
        },
        23 => {
            happyShift(action_26)
        },
        24 => {
            happyShift(action_26)
        },
        25 => {
            happyShift(action_26)
        },
        26 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_814(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        124 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_815(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        124 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_816(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_874)
        },
        _ => {
            happyShift(action_874)
        },
    }
}

pub fn action_817(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_37
}

pub fn action_818(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_872)
        },
        167 => {
            happyShift(action_872)
        },
        _ => {
            happyShift(action_872)
        },
    }
}

pub fn action_819(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_871)
        },
        _ => {
            happyShift(action_871)
        },
    }
}

pub fn action_820(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_78
}

pub fn action_821(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_870)
        },
        _ => {
            happyShift(action_870)
        },
    }
}

pub fn action_822(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        237 => {
            happyShift(action_868)
        },
        238 => {
            happyShift(action_868)
        },
        _ => {
            happyShift(action_868)
        },
    }
}

pub fn action_823(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_70
}

pub fn action_824(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_39
}

pub fn action_825(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_55
}

pub fn action_826(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_49
}

pub fn action_827(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_51
}

pub fn action_828(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_50
}

pub fn action_829(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        181 => {
            happyShift(action_61)
        },
        14 => {
            happyShift(action_61)
        },
        _ => {
            happyShift(action_61)
        },
    }
}

pub fn action_830(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_52
}

pub fn action_831(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_368
}

pub fn action_832(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_367
}

pub fn action_833(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_834(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        237 => {
            happyShift(action_254)
        },
        238 => {
            happyShift(action_254)
        },
        131 => {
            happyShift(action_254)
        },
        _ => {
            happyShift(action_254)
        },
    }
}

pub fn action_835(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_366
}

pub fn action_836(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_837(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_364
}

pub fn action_838(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        190 => {
            happyShift(action_116)
        },
        192 => {
            happyShift(action_116)
        },
        195 => {
            happyShift(action_116)
        },
        196 => {
            happyShift(action_116)
        },
        198 => {
            happyShift(action_116)
        },
        200 => {
            happyShift(action_116)
        },
        202 => {
            happyShift(action_116)
        },
        208 => {
            happyShift(action_116)
        },
        209 => {
            happyShift(action_116)
        },
        210 => {
            happyShift(action_116)
        },
        218 => {
            happyShift(action_116)
        },
        219 => {
            happyShift(action_116)
        },
        223 => {
            happyShift(action_116)
        },
        226 => {
            happyShift(action_116)
        },
        228 => {
            happyShift(action_116)
        },
        229 => {
            happyShift(action_116)
        },
        230 => {
            happyShift(action_116)
        },
        238 => {
            happyShift(action_116)
        },
        239 => {
            happyShift(action_116)
        },
        44 => {
            happyShift(action_116)
        },
        45 => {
            happyShift(action_116)
        },
        47 => {
            happyShift(action_116)
        },
        49 => {
            happyShift(action_116)
        },
        51 => {
            happyShift(action_116)
        },
        52 => {
            happyShift(action_116)
        },
        53 => {
            happyShift(action_116)
        },
        54 => {
            happyShift(action_116)
        },
        61 => {
            happyShift(action_116)
        },
        65 => {
            happyShift(action_116)
        },
        86 => {
            happyShift(action_116)
        },
        102 => {
            happyShift(action_116)
        },
        132 => {
            happyShift(action_116)
        },
        133 => {
            happyShift(action_116)
        },
        134 => {
            happyShift(action_116)
        },
        _ => {
            happyShift(action_116)
        },
    }
}

pub fn action_839(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_840(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_335
}

pub fn action_841(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_337
}

pub fn action_842(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_413)
        },
        140 => {
            happyShift(action_413)
        },
        88 => {
            happyShift(action_413)
        },
        89 => {
            happyShift(action_413)
        },
        90 => {
            happyShift(action_413)
        },
        _ => {
            happyShift(action_413)
        },
    }
}

pub fn action_843(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_338
}

pub fn action_844(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        179 => {
            happyShift(action_859)
        },
        182 => {
            happyShift(action_859)
        },
        _ => {
            happyShift(action_859)
        },
    }
}

pub fn action_845(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_357
}

pub fn action_846(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_857)
        },
        183 => {
            happyShift(action_857)
        },
        _ => {
            happyShift(action_857)
        },
    }
}

pub fn action_847(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_352
}

pub fn action_848(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_355
}

pub fn action_849(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_358
}

pub fn action_850(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_351
}

pub fn action_851(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_348
}

pub fn action_852(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        140 => {
            happyShift(action_26)
        },
        143 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        182 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        93 => {
            happyShift(action_26)
        },
        96 => {
            happyShift(action_26)
        },
        97 => {
            happyShift(action_26)
        },
        98 => {
            happyShift(action_26)
        },
        99 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_853(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_384
}

pub fn action_854(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_349
}

pub fn action_855(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        93 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_856(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_385
}

pub fn action_857(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_356
}

pub fn action_858(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        126 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_859(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        140 => {
            happyShift(action_26)
        },
        143 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        182 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        93 => {
            happyShift(action_26)
        },
        96 => {
            happyShift(action_26)
        },
        97 => {
            happyShift(action_26)
        },
        98 => {
            happyShift(action_26)
        },
        99 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_860(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_342
}

pub fn action_861(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_339
}

pub fn action_862(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_371
}

pub fn action_863(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_369
}

pub fn action_864(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_372
}

pub fn action_865(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_374
}

pub fn action_866(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_915)
        },
        _ => {
            happyShift(action_915)
        },
    }
}

pub fn action_867(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_53
}

pub fn action_868(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_914)
        },
        _ => {
            happyShift(action_914)
        },
    }
}

pub fn action_869(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_913)
        },
        _ => {
            happyShift(action_913)
        },
    }
}

pub fn action_870(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_871(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        140 => {
            happyShift(action_822)
        },
        236 => {
            happyShift(action_822)
        },
        30 => {
            happyShift(action_822)
        },
        128 => {
            happyShift(action_822)
        },
        _ => {
            happyShift(action_822)
        },
    }
}

pub fn action_872(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_910)
        },
        _ => {
            happyShift(action_910)
        },
    }
}

pub fn action_873(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        140 => {
            happyShift(action_822)
        },
        236 => {
            happyShift(action_822)
        },
        28 => {
            happyShift(action_822)
        },
        29 => {
            happyShift(action_822)
        },
        30 => {
            happyShift(action_822)
        },
        128 => {
            happyShift(action_822)
        },
        _ => {
            happyShift(action_822)
        },
    }
}

pub fn action_874(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_62
}

pub fn action_875(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_908)
        },
        _ => {
            happyShift(action_908)
        },
    }
}

pub fn action_876(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_907)
        },
        _ => {
            happyShift(action_907)
        },
    }
}

pub fn action_877(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_59
}

pub fn action_878(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_251
}

pub fn action_879(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_204
}

pub fn action_880(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        126 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_881(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_200
}

pub fn action_882(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_475)
        },
        150 => {
            happyShift(action_475)
        },
        167 => {
            happyShift(action_475)
        },
        237 => {
            happyShift(action_475)
        },
        60 => {
            happyShift(action_475)
        },
        75 => {
            happyShift(action_475)
        },
        76 => {
            happyShift(action_475)
        },
        77 => {
            happyShift(action_475)
        },
        78 => {
            happyShift(action_475)
        },
        _ => {
            happyShift(action_475)
        },
    }
}

pub fn action_883(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_524)
        },
        150 => {
            happyShift(action_524)
        },
        167 => {
            happyShift(action_524)
        },
        237 => {
            happyShift(action_524)
        },
        238 => {
            happyShift(action_524)
        },
        59 => {
            happyShift(action_524)
        },
        66 => {
            happyShift(action_524)
        },
        68 => {
            happyShift(action_524)
        },
        69 => {
            happyShift(action_524)
        },
        70 => {
            happyShift(action_524)
        },
        71 => {
            happyShift(action_524)
        },
        72 => {
            happyShift(action_524)
        },
        73 => {
            happyShift(action_524)
        },
        75 => {
            happyShift(action_524)
        },
        76 => {
            happyShift(action_524)
        },
        77 => {
            happyShift(action_524)
        },
        78 => {
            happyShift(action_524)
        },
        _ => {
            happyShift(action_524)
        },
    }
}

pub fn action_884(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_885(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_207
}

pub fn action_886(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        126 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_887(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_209
}

pub fn action_888(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_325
}

pub fn action_889(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_902)
        },
        _ => {
            happyShift(action_902)
        },
    }
}

pub fn action_890(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_320
}

pub fn action_891(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_213
}

pub fn action_892(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_219
}

pub fn action_893(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_89
}

pub fn action_894(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_481
}

pub fn action_895(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        126 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_896(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_272)
        },
        144 => {
            happyShift(action_272)
        },
        145 => {
            happyShift(action_272)
        },
        146 => {
            happyShift(action_272)
        },
        147 => {
            happyShift(action_272)
        },
        148 => {
            happyShift(action_272)
        },
        149 => {
            happyShift(action_272)
        },
        150 => {
            happyShift(action_272)
        },
        153 => {
            happyShift(action_272)
        },
        164 => {
            happyShift(action_272)
        },
        184 => {
            happyShift(action_272)
        },
        204 => {
            happyShift(action_272)
        },
        220 => {
            happyShift(action_272)
        },
        233 => {
            happyShift(action_272)
        },
        234 => {
            happyShift(action_272)
        },
        235 => {
            happyShift(action_272)
        },
        236 => {
            happyShift(action_272)
        },
        237 => {
            happyShift(action_272)
        },
        240 => {
            happyShift(action_272)
        },
        241 => {
            happyShift(action_272)
        },
        242 => {
            happyShift(action_272)
        },
        243 => {
            happyShift(action_272)
        },
        244 => {
            happyShift(action_272)
        },
        245 => {
            happyShift(action_272)
        },
        246 => {
            happyShift(action_272)
        },
        100 => {
            happyShift(action_272)
        },
        104 => {
            happyShift(action_272)
        },
        106 => {
            happyShift(action_272)
        },
        107 => {
            happyShift(action_272)
        },
        127 => {
            happyShift(action_272)
        },
        128 => {
            happyShift(action_272)
        },
        130 => {
            happyShift(action_272)
        },
        _ => {
            happyShift(action_272)
        },
    }
}

pub fn action_897(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_485
}

pub fn action_898(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_484
}

pub fn action_899(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_468
}

pub fn action_900(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        168 => {
            happyShift(action_316)
        },
        169 => {
            happyShift(action_316)
        },
        170 => {
            happyShift(action_316)
        },
        171 => {
            happyShift(action_316)
        },
        172 => {
            happyShift(action_316)
        },
        173 => {
            happyShift(action_316)
        },
        174 => {
            happyShift(action_316)
        },
        175 => {
            happyShift(action_316)
        },
        176 => {
            happyShift(action_316)
        },
        177 => {
            happyShift(action_316)
        },
        178 => {
            happyShift(action_316)
        },
        121 => {
            happyShift(action_316)
        },
        _ => {
            happyShift(action_316)
        },
    }
}

pub fn action_901(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_486
}

pub fn action_902(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_321
}

pub fn action_903(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_208
}

pub fn action_904(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        132 => {
            happyShift(action_142)
        },
        133 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_905(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        239 => {
            happyShift(action_142)
        },
        134 => {
            happyShift(action_142)
        },
        _ => {
            happyShift(action_142)
        },
    }
}

pub fn action_906(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_205
}

pub fn action_907(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        180 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        187 => {
            happyShift(action_26)
        },
        189 => {
            happyShift(action_26)
        },
        191 => {
            happyShift(action_26)
        },
        194 => {
            happyShift(action_26)
        },
        196 => {
            happyShift(action_26)
        },
        197 => {
            happyShift(action_26)
        },
        203 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        205 => {
            happyShift(action_26)
        },
        206 => {
            happyShift(action_26)
        },
        217 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        224 => {
            happyShift(action_26)
        },
        232 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        12 => {
            happyShift(action_26)
        },
        13 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        22 => {
            happyShift(action_26)
        },
        23 => {
            happyShift(action_26)
        },
        24 => {
            happyShift(action_26)
        },
        25 => {
            happyShift(action_26)
        },
        26 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_908(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        180 => {
            happyShift(action_26)
        },
        181 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        187 => {
            happyShift(action_26)
        },
        189 => {
            happyShift(action_26)
        },
        191 => {
            happyShift(action_26)
        },
        194 => {
            happyShift(action_26)
        },
        196 => {
            happyShift(action_26)
        },
        197 => {
            happyShift(action_26)
        },
        203 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        205 => {
            happyShift(action_26)
        },
        206 => {
            happyShift(action_26)
        },
        217 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        224 => {
            happyShift(action_26)
        },
        232 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        238 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        12 => {
            happyShift(action_26)
        },
        13 => {
            happyShift(action_26)
        },
        14 => {
            happyShift(action_26)
        },
        22 => {
            happyShift(action_26)
        },
        23 => {
            happyShift(action_26)
        },
        24 => {
            happyShift(action_26)
        },
        25 => {
            happyShift(action_26)
        },
        26 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        131 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_909(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_923)
        },
        167 => {
            happyShift(action_923)
        },
        _ => {
            happyShift(action_923)
        },
    }
}

pub fn action_910(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_71
}

pub fn action_911(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_79
}

pub fn action_912(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_922)
        },
        _ => {
            happyShift(action_922)
        },
    }
}

pub fn action_913(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        236 => {
            happyShift(action_42)
        },
        128 => {
            happyShift(action_42)
        },
        _ => {
            happyShift(action_42)
        },
    }
}

pub fn action_914(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        236 => {
            happyShift(action_42)
        },
        128 => {
            happyShift(action_42)
        },
        _ => {
            happyShift(action_42)
        },
    }
}

pub fn action_915(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_375
}

pub fn action_916(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_343
}

pub fn action_917(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        141 => {
            happyShift(action_919)
        },
        _ => {
            happyShift(action_919)
        },
    }
}

pub fn action_918(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_350
}

pub fn action_919(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_359
}

pub fn action_920(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_936)
        },
        _ => {
            happyShift(action_936)
        },
    }
}

pub fn action_921(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_935)
        },
        _ => {
            happyShift(action_935)
        },
    }
}

pub fn action_922(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_80
}

pub fn action_923(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_934)
        },
        _ => {
            happyShift(action_934)
        },
    }
}

pub fn action_924(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        236 => {
            happyShift(action_42)
        },
        31 => {
            happyShift(action_42)
        },
        128 => {
            happyShift(action_42)
        },
        _ => {
            happyShift(action_42)
        },
    }
}

pub fn action_925(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        16 => {
            happyGoto(action_931)
        },
        _ => {
            happyGoto(action_931)
        },
    }
}

pub fn action_926(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_63
}

pub fn action_927(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_201
}

pub fn action_928(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_272)
        },
        144 => {
            happyShift(action_272)
        },
        145 => {
            happyShift(action_272)
        },
        146 => {
            happyShift(action_272)
        },
        147 => {
            happyShift(action_272)
        },
        148 => {
            happyShift(action_272)
        },
        149 => {
            happyShift(action_272)
        },
        150 => {
            happyShift(action_272)
        },
        153 => {
            happyShift(action_272)
        },
        164 => {
            happyShift(action_272)
        },
        184 => {
            happyShift(action_272)
        },
        204 => {
            happyShift(action_272)
        },
        220 => {
            happyShift(action_272)
        },
        233 => {
            happyShift(action_272)
        },
        234 => {
            happyShift(action_272)
        },
        235 => {
            happyShift(action_272)
        },
        236 => {
            happyShift(action_272)
        },
        237 => {
            happyShift(action_272)
        },
        240 => {
            happyShift(action_272)
        },
        241 => {
            happyShift(action_272)
        },
        242 => {
            happyShift(action_272)
        },
        243 => {
            happyShift(action_272)
        },
        244 => {
            happyShift(action_272)
        },
        245 => {
            happyShift(action_272)
        },
        246 => {
            happyShift(action_272)
        },
        100 => {
            happyShift(action_272)
        },
        104 => {
            happyShift(action_272)
        },
        106 => {
            happyShift(action_272)
        },
        107 => {
            happyShift(action_272)
        },
        127 => {
            happyShift(action_272)
        },
        128 => {
            happyShift(action_272)
        },
        130 => {
            happyShift(action_272)
        },
        _ => {
            happyShift(action_272)
        },
    }
}

pub fn action_929(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_487
}

pub fn action_930(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_488
}

pub fn action_931(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_64
}

pub fn action_932(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_939)
        },
        179 => {
            happyShift(action_939)
        },
        _ => {
            happyShift(action_939)
        },
    }
}

pub fn action_933(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_83
}

pub fn action_934(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_72
}

pub fn action_935(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_936(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        138 => {
            happyShift(action_26)
        },
        144 => {
            happyShift(action_26)
        },
        145 => {
            happyShift(action_26)
        },
        146 => {
            happyShift(action_26)
        },
        147 => {
            happyShift(action_26)
        },
        148 => {
            happyShift(action_26)
        },
        149 => {
            happyShift(action_26)
        },
        150 => {
            happyShift(action_26)
        },
        153 => {
            happyShift(action_26)
        },
        164 => {
            happyShift(action_26)
        },
        184 => {
            happyShift(action_26)
        },
        204 => {
            happyShift(action_26)
        },
        220 => {
            happyShift(action_26)
        },
        233 => {
            happyShift(action_26)
        },
        234 => {
            happyShift(action_26)
        },
        235 => {
            happyShift(action_26)
        },
        236 => {
            happyShift(action_26)
        },
        237 => {
            happyShift(action_26)
        },
        240 => {
            happyShift(action_26)
        },
        241 => {
            happyShift(action_26)
        },
        242 => {
            happyShift(action_26)
        },
        243 => {
            happyShift(action_26)
        },
        244 => {
            happyShift(action_26)
        },
        245 => {
            happyShift(action_26)
        },
        100 => {
            happyShift(action_26)
        },
        104 => {
            happyShift(action_26)
        },
        106 => {
            happyShift(action_26)
        },
        107 => {
            happyShift(action_26)
        },
        108 => {
            happyShift(action_26)
        },
        109 => {
            happyShift(action_26)
        },
        110 => {
            happyShift(action_26)
        },
        111 => {
            happyShift(action_26)
        },
        112 => {
            happyShift(action_26)
        },
        113 => {
            happyShift(action_26)
        },
        114 => {
            happyShift(action_26)
        },
        115 => {
            happyShift(action_26)
        },
        116 => {
            happyShift(action_26)
        },
        117 => {
            happyShift(action_26)
        },
        118 => {
            happyShift(action_26)
        },
        119 => {
            happyShift(action_26)
        },
        120 => {
            happyShift(action_26)
        },
        122 => {
            happyShift(action_26)
        },
        127 => {
            happyShift(action_26)
        },
        128 => {
            happyShift(action_26)
        },
        _ => {
            happyShift(action_26)
        },
    }
}

pub fn action_937(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_944)
        },
        _ => {
            happyShift(action_944)
        },
    }
}

pub fn action_938(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        139 => {
            happyShift(action_943)
        },
        _ => {
            happyShift(action_943)
        },
    }
}

pub fn action_939(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        180 => {
            happyShift(action_942)
        },
        _ => {
            happyShift(action_942)
        },
    }
}

pub fn action_940(_0: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    match (_0) {
        236 => {
            happyShift(action_42)
        },
        128 => {
            happyShift(action_42)
        },
        _ => {
            happyShift(action_42)
        },
    }
}

pub fn action_941(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_84
}

pub fn action_942(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_73
}

pub fn action_943(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_82
}

pub fn action_944(_: isize) -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce_81
}

pub fn happyReduce_4() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 7, happyReduction_4)
}

pub fn happyReduction_4(HappyStk(HappyAbsSyn8(happy_var_1), happyRest): bool) -> bool {
    happyThen((({
            let decls = reverse(happy_var_1);

        match decls {
                [] => {
                    /*do*/ {
                        let n = getNewName;

                        let p = getCurrentPosition;

                        CTranslUnit(decls, (mkNodeInfo_q(p, (p, 0), n)))
                    }
                },
                [d, ds] => {
                    withNodeInfo(d, CTranslUnit(decls))
                },
            }        })), (|r| { happyReturn((HappyAbsSyn7(r))) }))
}

pub fn happyReduce_5() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_0(8, happyReduction_5)
}

pub fn happyReduction_5() -> bool {
    HappyAbsSyn8(empty())
}

pub fn happyReduce_6() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(8, happyReduction_6)
}

pub fn happyReduction_6(_0: bool) -> bool {
    match (_0, _1) {
        (_, HappyAbsSyn8(happy_var_1)) => {
            HappyAbsSyn8(happy_var_1())
        },
        (_, _) => {
            HappyAbsSyn8(happy_var_1())
        },
    }
}

pub fn happyReduce_7() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(8, happyReduction_7)
}

pub fn happyReduction_7(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn9(happy_var_2), HappyAbsSyn8(happy_var_1)) => {
            HappyAbsSyn8((snoc(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn8((snoc(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_8() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(9, happyReduction_8)
}

pub fn happyReduction_8(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn10(happy_var_1) => {
            HappyAbsSyn9((CFDefExt(happy_var_1)))
        },
        _ => {
            HappyAbsSyn9((CFDefExt(happy_var_1)))
        },
    }
}

pub fn happyReduce_9() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(9, happyReduction_9)
}

pub fn happyReduction_9(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn32(happy_var_1) => {
            HappyAbsSyn9((CDeclExt(happy_var_1)))
        },
        _ => {
            HappyAbsSyn9((CDeclExt(happy_var_1)))
        },
    }
}

pub fn happyReduce_10() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(9, happyReduction_10)
}

pub fn happyReduction_10(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn9(happy_var_2), _) => {
            HappyAbsSyn9(happy_var_2())
        },
        (_, _) => {
            HappyAbsSyn9(happy_var_2())
        },
    }
}

pub fn happyReduce_11() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 9, happyReduction_11)
}

pub fn happyReduction_11(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn128(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAsmExt(happy_var_3)))), (|r| { happyReturn((HappyAbsSyn9(r))) }))
}

pub fn happyReduce_12() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 10, happyReduction_12)
}

pub fn happyReduction_12(HappyStk(HappyAbsSyn12(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_1), happyRest): bool) -> bool {
    happyThen(((__op_rshift(leaveScope, (withNodeInfo(happy_var_1, CFunDef(vec![], happy_var_1, vec![], happy_var_2)))))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_13() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 10, happyReduction_13)
}

pub fn happyReduction_13(HappyStk(HappyAbsSyn12(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_1), happyRest): bool) -> bool {
    happyThen(((__op_rshift(leaveScope, (withNodeInfo(happy_var_1, CFunDef((liftCAttrs(happy_var_1)), happy_var_2, vec![], happy_var_3)))))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_14() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 10, happyReduction_14)
}

pub fn happyReduction_14(HappyStk(HappyAbsSyn12(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((__op_rshift(leaveScope, (withNodeInfo(happy_var_1, CFunDef(happy_var_1, happy_var_2, vec![], happy_var_3)))))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_15() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 10, happyReduction_15)
}

pub fn happyReduction_15(HappyStk(HappyAbsSyn12(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((__op_rshift(leaveScope, (withNodeInfo(happy_var_1, CFunDef(happy_var_1, happy_var_2, vec![], happy_var_3)))))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_16() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 10, happyReduction_16)
}

pub fn happyReduction_16(HappyStk(HappyAbsSyn12(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn38(happy_var_1), happyRest): bool) -> bool {
    happyThen(((__op_rshift(leaveScope, (withNodeInfo(happy_var_1, CFunDef((reverse(happy_var_1)), happy_var_2, vec![], happy_var_3)))))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_17() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 10, happyReduction_17)
}

pub fn happyReduction_17(HappyStk(HappyAbsSyn12(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((__op_rshift(leaveScope, (withNodeInfo(happy_var_1, CFunDef((liftTypeQuals(happy_var_1)), happy_var_2, vec![], happy_var_3)))))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_18() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 10, happyReduction_18)
}

pub fn happyReduction_18(HappyStk(HappyAbsSyn12(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((__op_rshift(leaveScope, (withNodeInfo(happy_var_1, CFunDef((__op_addadd(liftTypeQuals(happy_var_1), liftCAttrs(happy_var_2))), happy_var_3, vec![], happy_var_4)))))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_19() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 10, happyReduction_19)
}

pub fn happyReduction_19(HappyStk(HappyAbsSyn12(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn33(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CFunDef(vec![], happy_var_1, (reverse(happy_var_2)), happy_var_3)))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_20() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 10, happyReduction_20)
}

pub fn happyReduction_20(HappyStk(HappyAbsSyn12(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn33(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_2, CFunDef((liftCAttrs(happy_var_1)), happy_var_2, (reverse(happy_var_3)), happy_var_4)))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_21() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 10, happyReduction_21)
}

pub fn happyReduction_21(HappyStk(HappyAbsSyn12(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn33(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CFunDef(happy_var_1, happy_var_2, (reverse(happy_var_3)), happy_var_4)))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_22() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 10, happyReduction_22)
}

pub fn happyReduction_22(HappyStk(HappyAbsSyn12(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn33(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CFunDef(happy_var_1, happy_var_2, (reverse(happy_var_3)), happy_var_4)))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_23() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 10, happyReduction_23)
}

pub fn happyReduction_23(HappyStk(HappyAbsSyn12(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn33(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn38(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CFunDef((reverse(happy_var_1)), happy_var_2, (reverse(happy_var_3)), happy_var_4)))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_24() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 10, happyReduction_24)
}

pub fn happyReduction_24(HappyStk(HappyAbsSyn12(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn33(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CFunDef((liftTypeQuals(happy_var_1)), happy_var_2, (reverse(happy_var_3)), happy_var_4)))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_25() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 10, happyReduction_25)
}

pub fn happyReduction_25(HappyStk(HappyAbsSyn12(happy_var_5), /* TODO(INFIX) */, HappyAbsSyn33(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CFunDef((__op_addadd(liftTypeQuals(happy_var_1), liftCAttrs(happy_var_2))), happy_var_3, (reverse(happy_var_4)), happy_var_5)))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_26() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 11, happyReduction_26)
}

pub fn happyReduction_26(HappyStk(HappyAbsSyn66(happy_var_1), happyRest): bool) -> bool {
    happyThen((({
            let declr = reverseDeclr(happy_var_1);

        __op_rshift(enterScope, __op_rshift(doFuncParamDeclIdent(declr), declr))        })), (|r| { happyReturn((HappyAbsSyn11(r))) }))
}

pub fn happyReduce_27() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(12, happyReduction_27)
}

pub fn happyReduction_27(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn12(happy_var_1) => {
            HappyAbsSyn12(happy_var_1())
        },
        _ => {
            HappyAbsSyn12(happy_var_1())
        },
    }
}

pub fn happyReduce_28() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(12, happyReduction_28)
}

pub fn happyReduction_28(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn12(happy_var_1) => {
            HappyAbsSyn12(happy_var_1())
        },
        _ => {
            HappyAbsSyn12(happy_var_1())
        },
    }
}

pub fn happyReduce_29() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(12, happyReduction_29)
}

pub fn happyReduction_29(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn12(happy_var_1) => {
            HappyAbsSyn12(happy_var_1())
        },
        _ => {
            HappyAbsSyn12(happy_var_1())
        },
    }
}

pub fn happyReduce_30() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(12, happyReduction_30)
}

pub fn happyReduction_30(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn12(happy_var_1) => {
            HappyAbsSyn12(happy_var_1())
        },
        _ => {
            HappyAbsSyn12(happy_var_1())
        },
    }
}

pub fn happyReduce_31() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(12, happyReduction_31)
}

pub fn happyReduction_31(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn12(happy_var_1) => {
            HappyAbsSyn12(happy_var_1())
        },
        _ => {
            HappyAbsSyn12(happy_var_1())
        },
    }
}

pub fn happyReduce_32() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(12, happyReduction_32)
}

pub fn happyReduction_32(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn12(happy_var_1) => {
            HappyAbsSyn12(happy_var_1())
        },
        _ => {
            HappyAbsSyn12(happy_var_1())
        },
    }
}

pub fn happyReduce_33() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 12, happyReduction_33)
}

pub fn happyReduction_33(HappyStk(HappyAbsSyn26(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, (CAsm(happy_var_1))))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_34() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 13, happyReduction_34)
}

pub fn happyReduction_34(HappyStk(HappyAbsSyn12(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn131(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CLabel(happy_var_1, happy_var_4, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_35() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 13, happyReduction_35)
}

pub fn happyReduction_35(HappyStk(HappyAbsSyn12(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CCase(happy_var_2, happy_var_4)))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_36() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 13, happyReduction_36)
}

pub fn happyReduction_36(HappyStk(HappyAbsSyn12(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDefault(happy_var_3)))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_37() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 13, happyReduction_37)
}

pub fn happyReduction_37(HappyStk(HappyAbsSyn12(happy_var_6), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CCases(happy_var_2, happy_var_4, happy_var_6)))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_38() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 14, happyReduction_38)
}

pub fn happyReduction_38(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn17(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CCompound(vec![], (reverse(happy_var_3)))))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_39() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 14, happyReduction_39)
}

pub fn happyReduction_39(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn17(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn21(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CCompound((reverse(happy_var_3)), (reverse(happy_var_4)))))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_40() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(0, 15, happyReduction_40)
}

pub fn happyReduction_40(happyRest: bool) -> bool {
    happyThen((enterScope()), (|r| { happyReturn((HappyAbsSyn15(r))) }))
}

pub fn happyReduce_41() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(0, 16, happyReduction_41)
}

pub fn happyReduction_41(happyRest: bool) -> bool {
    happyThen((leaveScope()), (|r| { happyReturn((HappyAbsSyn15(r))) }))
}

pub fn happyReduce_42() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_0(17, happyReduction_42)
}

pub fn happyReduction_42() -> bool {
    HappyAbsSyn17(empty())
}

pub fn happyReduce_43() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(17, happyReduction_43)
}

pub fn happyReduction_43(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn18(happy_var_2), HappyAbsSyn17(happy_var_1)) => {
            HappyAbsSyn17((snoc(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn17((snoc(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_44() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(18, happyReduction_44)
}

pub fn happyReduction_44(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn12(happy_var_1) => {
            HappyAbsSyn18((CBlockStmt(happy_var_1)))
        },
        _ => {
            HappyAbsSyn18((CBlockStmt(happy_var_1)))
        },
    }
}

pub fn happyReduce_45() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(18, happyReduction_45)
}

pub fn happyReduction_45(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn18(happy_var_1) => {
            HappyAbsSyn18(happy_var_1())
        },
        _ => {
            HappyAbsSyn18(happy_var_1())
        },
    }
}

pub fn happyReduce_46() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(19, happyReduction_46)
}

pub fn happyReduction_46(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn32(happy_var_1) => {
            HappyAbsSyn18((CBlockDecl(happy_var_1)))
        },
        _ => {
            HappyAbsSyn18((CBlockDecl(happy_var_1)))
        },
    }
}

pub fn happyReduce_47() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(19, happyReduction_47)
}

pub fn happyReduction_47(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn10(happy_var_1) => {
            HappyAbsSyn18((CNestedFunDef(happy_var_1)))
        },
        _ => {
            HappyAbsSyn18((CNestedFunDef(happy_var_1)))
        },
    }
}

pub fn happyReduce_48() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(19, happyReduction_48)
}

pub fn happyReduction_48(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn18(happy_var_2), _) => {
            HappyAbsSyn18(happy_var_2())
        },
        (_, _) => {
            HappyAbsSyn18(happy_var_2())
        },
    }
}

pub fn happyReduce_49() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 20, happyReduction_49)
}

pub fn happyReduction_49(HappyStk(HappyAbsSyn12(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((__op_rshift(leaveScope, (withNodeInfo(happy_var_1, CFunDef(happy_var_1, happy_var_2, vec![], happy_var_3)))))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_50() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 20, happyReduction_50)
}

pub fn happyReduction_50(HappyStk(HappyAbsSyn12(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((__op_rshift(leaveScope, (withNodeInfo(happy_var_1, CFunDef(happy_var_1, happy_var_2, vec![], happy_var_3)))))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_51() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 20, happyReduction_51)
}

pub fn happyReduction_51(HappyStk(HappyAbsSyn12(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn38(happy_var_1), happyRest): bool) -> bool {
    happyThen(((__op_rshift(leaveScope, (withNodeInfo(happy_var_1, CFunDef((reverse(happy_var_1)), happy_var_2, vec![], happy_var_3)))))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_52() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 20, happyReduction_52)
}

pub fn happyReduction_52(HappyStk(HappyAbsSyn12(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((__op_rshift(leaveScope, (withNodeInfo(happy_var_1, CFunDef((liftTypeQuals(happy_var_1)), happy_var_2, vec![], happy_var_3)))))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_53() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 20, happyReduction_53)
}

pub fn happyReduction_53(HappyStk(HappyAbsSyn12(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn11(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((__op_rshift(leaveScope, (withNodeInfo(happy_var_1, CFunDef((__op_addadd(liftTypeQuals(happy_var_1), liftCAttrs(happy_var_2))), happy_var_3, vec![], happy_var_4)))))), (|r| { happyReturn((HappyAbsSyn10(r))) }))
}

pub fn happyReduce_54() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(21, happyReduction_54)
}

pub fn happyReduction_54(_0: bool) -> bool {
    match (_0, _1, _2) {
        (_, HappyAbsSyn21(happy_var_2), _) => {
            HappyAbsSyn21(happy_var_2())
        },
        (_, _, _) => {
            HappyAbsSyn21(happy_var_2())
        },
    }
}

pub fn happyReduce_55() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 21, happyReduction_55)
}

pub fn happyReduction_55(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn21(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn21(happy_var_1), happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn21((rappendr(happy_var_1, happy_var_3))), happyRest)
}

pub fn happyReduce_56() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 22, happyReduction_56)
}

pub fn happyReduction_56(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CExpr(None)))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_57() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 22, happyReduction_57)
}

pub fn happyReduction_57(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CExpr((Some(happy_var_1)))))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_58() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 23, happyReduction_58)
}

pub fn happyReduction_58(HappyStk(HappyAbsSyn12(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CIf(happy_var_3, happy_var_5, None)))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_59() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(7, 23, happyReduction_59)
}

pub fn happyReduction_59(HappyStk(HappyAbsSyn12(happy_var_7), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn12(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CIf(happy_var_3, happy_var_5, (Some(happy_var_7)))))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_60() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 23, happyReduction_60)
}

pub fn happyReduction_60(HappyStk(HappyAbsSyn12(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CSwitch(happy_var_3, happy_var_5)))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_61() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 24, happyReduction_61)
}

pub fn happyReduction_61(HappyStk(HappyAbsSyn12(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CWhile(happy_var_3, happy_var_5, false)))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_62() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(7, 24, happyReduction_62)
}

pub fn happyReduction_62(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn12(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CWhile(happy_var_5, happy_var_2, true)))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_63() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(9, 24, happyReduction_63)
}

pub fn happyReduction_63(HappyStk(HappyAbsSyn12(happy_var_9), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn124(happy_var_7), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn124(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn124(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CFor((Left(happy_var_3)), happy_var_5, happy_var_7, happy_var_9)))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_64() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(10, 24, happyReduction_64)
}

pub fn happyReduction_64(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn12(happy_var_9), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn124(happy_var_7), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn124(happy_var_5), /* TODO(INFIX) */, HappyAbsSyn32(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CFor((Right(happy_var_4)), happy_var_5, happy_var_7, happy_var_9)))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_65() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 25, happyReduction_65)
}

pub fn happyReduction_65(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn131(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CGoto(happy_var_2)))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_66() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 25, happyReduction_66)
}

pub fn happyReduction_66(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CGotoPtr(happy_var_3)))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_67() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 25, happyReduction_67)
}

pub fn happyReduction_67(HappyStk(_, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CCont))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_68() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 25, happyReduction_68)
}

pub fn happyReduction_68(HappyStk(_, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBreak))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_69() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 25, happyReduction_69)
}

pub fn happyReduction_69(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn124(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CReturn(happy_var_2)))), (|r| { happyReturn((HappyAbsSyn12(r))) }))
}

pub fn happyReduce_70() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 26, happyReduction_70)
}

pub fn happyReduction_70(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn128(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn27(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAsmStmt(happy_var_2, happy_var_4, vec![], vec![], vec![])))), (|r| { happyReturn((HappyAbsSyn26(r))) }))
}

pub fn happyReduce_71() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(8, 26, happyReduction_71)
}

pub fn happyReduction_71(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn28(happy_var_6), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn128(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn27(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAsmStmt(happy_var_2, happy_var_4, happy_var_6, vec![], vec![])))), (|r| { happyReturn((HappyAbsSyn26(r))) }))
}

pub fn happyReduce_72() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(10, 26, happyReduction_72)
}

pub fn happyReduction_72(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn28(happy_var_8), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn28(happy_var_6), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn128(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn27(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAsmStmt(happy_var_2, happy_var_4, happy_var_6, happy_var_8, vec![])))), (|r| { happyReturn((HappyAbsSyn26(r))) }))
}

pub fn happyReduce_73() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(12, 26, happyReduction_73)
}

pub fn happyReduction_73(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn31(happy_var_10), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn28(happy_var_8), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn28(happy_var_6), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn128(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn27(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAsmStmt(happy_var_2, happy_var_4, happy_var_6, happy_var_8, (reverse(happy_var_10)))))), (|r| { happyReturn((HappyAbsSyn26(r))) }))
}

pub fn happyReduce_74() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_0(27, happyReduction_74)
}

pub fn happyReduction_74() -> bool {
    HappyAbsSyn27(None())
}

pub fn happyReduce_75() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(27, happyReduction_75)
}

pub fn happyReduction_75(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn64(happy_var_1) => {
            HappyAbsSyn27((Some(happy_var_1)))
        },
        _ => {
            HappyAbsSyn27((Some(happy_var_1)))
        },
    }
}

pub fn happyReduce_76() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_0(28, happyReduction_76)
}

pub fn happyReduction_76() -> bool {
    HappyAbsSyn28((vec![]))
}

pub fn happyReduce_77() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(28, happyReduction_77)
}

pub fn happyReduction_77(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn29(happy_var_1) => {
            HappyAbsSyn28((reverse(happy_var_1)))
        },
        _ => {
            HappyAbsSyn28((reverse(happy_var_1)))
        },
    }
}

pub fn happyReduce_78() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(29, happyReduction_78)
}

pub fn happyReduction_78(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn30(happy_var_1) => {
            HappyAbsSyn29((singleton(happy_var_1)))
        },
        _ => {
            HappyAbsSyn29((singleton(happy_var_1)))
        },
    }
}

pub fn happyReduce_79() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(29, happyReduction_79)
}

pub fn happyReduction_79(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn30(happy_var_3), _, HappyAbsSyn29(happy_var_1)) => {
            HappyAbsSyn29((snoc(happy_var_1, happy_var_3)))
        },
        (_, _, _) => {
            HappyAbsSyn29((snoc(happy_var_1, happy_var_3)))
        },
    }
}

pub fn happyReduce_80() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 30, happyReduction_80)
}

pub fn happyReduction_80(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn128(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAsmOperand(None, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn30(r))) }))
}

pub fn happyReduce_81() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(7, 30, happyReduction_81)
}

pub fn happyReduction_81(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_6), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn128(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(CTokIdent(_, happy_var_2)), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAsmOperand((Some(happy_var_2)), happy_var_4, happy_var_6)))), (|r| { happyReturn((HappyAbsSyn30(r))) }))
}

pub fn happyReduce_82() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(7, 30, happyReduction_82)
}

pub fn happyReduction_82(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_6), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn128(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(CTokTyIdent(_, happy_var_2)), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAsmOperand((Some(happy_var_2)), happy_var_4, happy_var_6)))), (|r| { happyReturn((HappyAbsSyn30(r))) }))
}

pub fn happyReduce_83() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(31, happyReduction_83)
}

pub fn happyReduction_83(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn128(happy_var_1) => {
            HappyAbsSyn31((singleton(happy_var_1)))
        },
        _ => {
            HappyAbsSyn31((singleton(happy_var_1)))
        },
    }
}

pub fn happyReduce_84() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(31, happyReduction_84)
}

pub fn happyReduction_84(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn128(happy_var_3), _, HappyAbsSyn31(happy_var_1)) => {
            HappyAbsSyn31((snoc(happy_var_1, happy_var_3)))
        },
        (_, _, _) => {
            HappyAbsSyn31((snoc(happy_var_1, happy_var_3)))
        },
    }
}

pub fn happyReduce_85() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 32, happyReduction_85)
}

pub fn happyReduction_85(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn38(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl((reverse(happy_var_1)), vec![])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_86() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 32, happyReduction_86)
}

pub fn happyReduction_86(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn38(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl((reverse(happy_var_1)), vec![])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_87() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 32, happyReduction_87)
}

pub fn happyReduction_87(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_1), happyRest): bool) -> bool {
    happyThen(((match happy_var_1 {
            CDecl(declspecs, dies, at) => {
                withLength(at, (CDecl(declspecs, (List::reverse(dies)))))
            },
        })), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_88() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 32, happyReduction_88)
}

pub fn happyReduction_88(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_1), happyRest): bool) -> bool {
    happyThen(((match happy_var_1 {
            CDecl(declspecs, dies, at) => {
                withLength(at, (CDecl(declspecs, (List::reverse(dies)))))
            },
        })), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_89() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(7, 32, happyReduction_89)
}

pub fn happyReduction_89(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn128(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CStaticAssert(happy_var_3, happy_var_5)))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_90() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_0(33, happyReduction_90)
}

pub fn happyReduction_90() -> bool {
    HappyAbsSyn33(empty())
}

pub fn happyReduce_91() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(33, happyReduction_91)
}

pub fn happyReduction_91(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn32(happy_var_2), HappyAbsSyn33(happy_var_1)) => {
            HappyAbsSyn33((snoc(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn33((snoc(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_92() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 34, happyReduction_92)
}

pub fn happyReduction_92(HappyStk(HappyAbsSyn94(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn35(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn38(happy_var_1), happyRest): bool) -> bool {
    happyThen((({
            let declspecs = reverse(happy_var_1);

        /*do*/ {
                let declr = withAsmNameAttrs(happy_var_3, happy_var_2);

                doDeclIdent(declspecs, declr);
                withNodeInfo(happy_var_1, CDecl(declspecs, vec![(Some((reverseDeclr(declr))), happy_var_4, None)]))
            }        })), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_93() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 34, happyReduction_93)
}

pub fn happyReduction_93(HappyStk(HappyAbsSyn94(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn35(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen((({
            let declspecs = liftTypeQuals(happy_var_1);

        /*do*/ {
                let declr = withAsmNameAttrs(happy_var_3, happy_var_2);

                doDeclIdent(declspecs, declr);
                withNodeInfo(happy_var_1, CDecl(declspecs, vec![(Some((reverseDeclr(declr))), happy_var_4, None)]))
            }        })), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_94() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 34, happyReduction_94)
}

pub fn happyReduction_94(HappyStk(HappyAbsSyn94(happy_var_5), /* TODO(INFIX) */, HappyAbsSyn35(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen((({
            let declspecs = liftTypeQuals(happy_var_1);

        /*do*/ {
                let declr = withAsmNameAttrs(happy_var_4, happy_var_3);

                doDeclIdent(declspecs, declr);
                withNodeInfo(happy_var_1, CDecl((__op_addadd(declspecs, liftCAttrs(happy_var_2))), vec![(Some((reverseDeclr(declr))), happy_var_5, None)]))
            }        })), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_95() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 34, happyReduction_95)
}

pub fn happyReduction_95(HappyStk(HappyAbsSyn94(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn35(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_1), happyRest): bool) -> bool {
    happyThen((({
            let declspecs = liftCAttrs(happy_var_1);

        /*do*/ {
                let declr = withAsmNameAttrs(happy_var_3, happy_var_2);

                doDeclIdent(declspecs, declr);
                withNodeInfo(happy_var_1, CDecl(declspecs, vec![(Some((reverseDeclr(declr))), happy_var_4, None)]))
            }        })), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_96() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 34, happyReduction_96)
}

pub fn happyReduction_96(HappyStk(HappyAbsSyn94(happy_var_6), /* TODO(INFIX) */, HappyAbsSyn35(happy_var_5), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_1), happyRest): bool) -> bool {
    happyThen(((match happy_var_1 {
            CDecl(declspecs, dies, at) => {
                /*do*/ {
                    let declr = withAsmNameAttrs((fst(happy_var_5), __op_addadd(snd(happy_var_5), happy_var_3)), happy_var_4);

                    doDeclIdent(declspecs, declr);
                    withLength(at, CDecl(declspecs, (__op_concat((Some((reverseDeclr(declr))), happy_var_6, None), dies))))
                }
            },
        })), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_97() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(35, happyReduction_97)
}

pub fn happyReduction_97(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn132(happy_var_2), HappyAbsSyn67(happy_var_1)) => {
            HappyAbsSyn35(((happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn35(((happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_98() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 36, happyReduction_98)
}

pub fn happyReduction_98(HappyStk(HappyAbsSyn94(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn35(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((/*do*/ {
            let declr = withAsmNameAttrs(happy_var_3, happy_var_2);

            doDeclIdent(happy_var_1, declr);
            withNodeInfo(happy_var_1, CDecl(happy_var_1, vec![(Some((reverseDeclr(declr))), happy_var_4, None)]))
        })), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_99() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 36, happyReduction_99)
}

pub fn happyReduction_99(HappyStk(HappyAbsSyn94(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn35(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((/*do*/ {
            let declr = withAsmNameAttrs(happy_var_3, happy_var_2);

            doDeclIdent(happy_var_1, declr);
            withNodeInfo(happy_var_1, CDecl(happy_var_1, vec![(Some((reverseDeclr(declr))), happy_var_4, None)]))
        })), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_100() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 36, happyReduction_100)
}

pub fn happyReduction_100(HappyStk(HappyAbsSyn94(happy_var_6), /* TODO(INFIX) */, HappyAbsSyn35(happy_var_5), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_1), happyRest): bool) -> bool {
    happyThen(((match happy_var_1 {
            CDecl(declspecs, dies, at) => {
                /*do*/ {
                    let declr = withAsmNameAttrs((fst(happy_var_5), __op_addadd(snd(happy_var_5), happy_var_3)), happy_var_4);

                    doDeclIdent(declspecs, declr);
                    (CDecl(declspecs, (__op_concat((Some((reverseDeclr(declr))), happy_var_6, None), dies)), at))
                }
            },
        })), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_101() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(37, happyReduction_101)
}

pub fn happyReduction_101(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn38(happy_var_1) => {
            HappyAbsSyn37((reverse(happy_var_1)))
        },
        _ => {
            HappyAbsSyn37((reverse(happy_var_1)))
        },
    }
}

pub fn happyReduce_102() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(37, happyReduction_102)
}

pub fn happyReduction_102(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn38(happy_var_1) => {
            HappyAbsSyn37((reverse(happy_var_1)))
        },
        _ => {
            HappyAbsSyn37((reverse(happy_var_1)))
        },
    }
}

pub fn happyReduce_103() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(37, happyReduction_103)
}

pub fn happyReduction_103(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn38(happy_var_1) => {
            HappyAbsSyn37((reverse(happy_var_1)))
        },
        _ => {
            HappyAbsSyn37((reverse(happy_var_1)))
        },
    }
}

pub fn happyReduce_104() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(38, happyReduction_104)
}

pub fn happyReduction_104(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn39(happy_var_1) => {
            HappyAbsSyn38((singleton(happy_var_1)))
        },
        _ => {
            HappyAbsSyn38((singleton(happy_var_1)))
        },
    }
}

pub fn happyReduce_105() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(38, happyReduction_105)
}

pub fn happyReduction_105(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn39(happy_var_2), HappyAbsSyn132(happy_var_1)) => {
            HappyAbsSyn38((snoc(reverseList((liftCAttrs(happy_var_1))), happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(reverseList((liftCAttrs(happy_var_1))), happy_var_2)))
        },
    }
}

pub fn happyReduce_106() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(38, happyReduction_106)
}

pub fn happyReduction_106(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn39(happy_var_2), HappyAbsSyn65(happy_var_1)) => {
            HappyAbsSyn38((snoc(rmap(CTypeQual, happy_var_1), happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(rmap(CTypeQual, happy_var_1), happy_var_2)))
        },
    }
}

pub fn happyReduce_107() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(38, happyReduction_107)
}

pub fn happyReduction_107(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn39(happy_var_3), HappyAbsSyn132(happy_var_2), HappyAbsSyn65(happy_var_1)) => {
            HappyAbsSyn38((snoc((rappend(rmap(CTypeQual, happy_var_1), liftCAttrs(happy_var_2))), happy_var_3)))
        },
        (_, _, _) => {
            HappyAbsSyn38((snoc((rappend(rmap(CTypeQual, happy_var_1), liftCAttrs(happy_var_2))), happy_var_3)))
        },
    }
}

pub fn happyReduce_108() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(38, happyReduction_108)
}

pub fn happyReduction_108(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn39(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((snoc(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_109() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(38, happyReduction_109)
}

pub fn happyReduction_109(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn132(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((addTrailingAttrs(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn38((addTrailingAttrs(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_110() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(39, happyReduction_110)
}

pub fn happyReduction_110(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn41(happy_var_1) => {
            HappyAbsSyn39((CStorageSpec(happy_var_1)))
        },
        _ => {
            HappyAbsSyn39((CStorageSpec(happy_var_1)))
        },
    }
}

pub fn happyReduce_111() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(39, happyReduction_111)
}

pub fn happyReduction_111(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn64(happy_var_1) => {
            HappyAbsSyn39((CTypeQual(happy_var_1)))
        },
        _ => {
            HappyAbsSyn39((CTypeQual(happy_var_1)))
        },
    }
}

pub fn happyReduce_112() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(39, happyReduction_112)
}

pub fn happyReduction_112(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn42(happy_var_1) => {
            HappyAbsSyn39((CFunSpec(happy_var_1)))
        },
        _ => {
            HappyAbsSyn39((CFunSpec(happy_var_1)))
        },
    }
}

pub fn happyReduce_113() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(39, happyReduction_113)
}

pub fn happyReduction_113(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn43(happy_var_1) => {
            HappyAbsSyn39((CAlignSpec(happy_var_1)))
        },
        _ => {
            HappyAbsSyn39((CAlignSpec(happy_var_1)))
        },
    }
}

pub fn happyReduce_114() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(40, happyReduction_114)
}

pub fn happyReduction_114(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn41(happy_var_1) => {
            HappyAbsSyn39((CStorageSpec(happy_var_1)))
        },
        _ => {
            HappyAbsSyn39((CStorageSpec(happy_var_1)))
        },
    }
}

pub fn happyReduce_115() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(40, happyReduction_115)
}

pub fn happyReduction_115(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn42(happy_var_1) => {
            HappyAbsSyn39((CFunSpec(happy_var_1)))
        },
        _ => {
            HappyAbsSyn39((CFunSpec(happy_var_1)))
        },
    }
}

pub fn happyReduce_116() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(40, happyReduction_116)
}

pub fn happyReduction_116(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn43(happy_var_1) => {
            HappyAbsSyn39((CAlignSpec(happy_var_1)))
        },
        _ => {
            HappyAbsSyn39((CAlignSpec(happy_var_1)))
        },
    }
}

pub fn happyReduce_117() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 41, happyReduction_117)
}

pub fn happyReduction_117(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CTypedef))), (|r| { happyReturn((HappyAbsSyn41(r))) }))
}

pub fn happyReduce_118() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 41, happyReduction_118)
}

pub fn happyReduction_118(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CExtern))), (|r| { happyReturn((HappyAbsSyn41(r))) }))
}

pub fn happyReduce_119() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 41, happyReduction_119)
}

pub fn happyReduction_119(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CStatic))), (|r| { happyReturn((HappyAbsSyn41(r))) }))
}

pub fn happyReduce_120() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 41, happyReduction_120)
}

pub fn happyReduction_120(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAuto))), (|r| { happyReturn((HappyAbsSyn41(r))) }))
}

pub fn happyReduce_121() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 41, happyReduction_121)
}

pub fn happyReduction_121(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CRegister))), (|r| { happyReturn((HappyAbsSyn41(r))) }))
}

pub fn happyReduce_122() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 41, happyReduction_122)
}

pub fn happyReduction_122(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CThread))), (|r| { happyReturn((HappyAbsSyn41(r))) }))
}

pub fn happyReduce_123() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 42, happyReduction_123)
}

pub fn happyReduction_123(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CInlineQual))), (|r| { happyReturn((HappyAbsSyn42(r))) }))
}

pub fn happyReduce_124() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 42, happyReduction_124)
}

pub fn happyReduction_124(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CNoreturnQual))), (|r| { happyReturn((HappyAbsSyn42(r))) }))
}

pub fn happyReduce_125() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 43, happyReduction_125)
}

pub fn happyReduction_125(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAlignAsType(happy_var_3)))), (|r| { happyReturn((HappyAbsSyn43(r))) }))
}

pub fn happyReduce_126() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 43, happyReduction_126)
}

pub fn happyReduction_126(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAlignAsExpr(happy_var_3)))), (|r| { happyReturn((HappyAbsSyn43(r))) }))
}

pub fn happyReduce_127() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(44, happyReduction_127)
}

pub fn happyReduction_127(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn38(happy_var_1) => {
            HappyAbsSyn37((reverse(happy_var_1)))
        },
        _ => {
            HappyAbsSyn37((reverse(happy_var_1)))
        },
    }
}

pub fn happyReduce_128() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(44, happyReduction_128)
}

pub fn happyReduction_128(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn38(happy_var_1) => {
            HappyAbsSyn37((reverse(happy_var_1)))
        },
        _ => {
            HappyAbsSyn37((reverse(happy_var_1)))
        },
    }
}

pub fn happyReduce_129() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(44, happyReduction_129)
}

pub fn happyReduction_129(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn38(happy_var_1) => {
            HappyAbsSyn37((reverse(happy_var_1)))
        },
        _ => {
            HappyAbsSyn37((reverse(happy_var_1)))
        },
    }
}

pub fn happyReduce_130() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 45, happyReduction_130)
}

pub fn happyReduction_130(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CVoidType))), (|r| { happyReturn((HappyAbsSyn45(r))) }))
}

pub fn happyReduce_131() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 45, happyReduction_131)
}

pub fn happyReduction_131(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CCharType))), (|r| { happyReturn((HappyAbsSyn45(r))) }))
}

pub fn happyReduce_132() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 45, happyReduction_132)
}

pub fn happyReduction_132(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CShortType))), (|r| { happyReturn((HappyAbsSyn45(r))) }))
}

pub fn happyReduce_133() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 45, happyReduction_133)
}

pub fn happyReduction_133(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CIntType))), (|r| { happyReturn((HappyAbsSyn45(r))) }))
}

pub fn happyReduce_134() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 45, happyReduction_134)
}

pub fn happyReduction_134(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CLongType))), (|r| { happyReturn((HappyAbsSyn45(r))) }))
}

pub fn happyReduce_135() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 45, happyReduction_135)
}

pub fn happyReduction_135(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CFloatType))), (|r| { happyReturn((HappyAbsSyn45(r))) }))
}

pub fn happyReduce_136() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 45, happyReduction_136)
}

pub fn happyReduction_136(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDoubleType))), (|r| { happyReturn((HappyAbsSyn45(r))) }))
}

pub fn happyReduce_137() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 45, happyReduction_137)
}

pub fn happyReduction_137(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CSignedType))), (|r| { happyReturn((HappyAbsSyn45(r))) }))
}

pub fn happyReduce_138() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 45, happyReduction_138)
}

pub fn happyReduction_138(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CUnsigType))), (|r| { happyReturn((HappyAbsSyn45(r))) }))
}

pub fn happyReduce_139() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 45, happyReduction_139)
}

pub fn happyReduction_139(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBoolType))), (|r| { happyReturn((HappyAbsSyn45(r))) }))
}

pub fn happyReduce_140() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 45, happyReduction_140)
}

pub fn happyReduction_140(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CComplexType))), (|r| { happyReturn((HappyAbsSyn45(r))) }))
}

pub fn happyReduce_141() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 45, happyReduction_141)
}

pub fn happyReduction_141(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CInt128Type))), (|r| { happyReturn((HappyAbsSyn45(r))) }))
}

pub fn happyReduce_142() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(46, happyReduction_142)
}

pub fn happyReduction_142(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn45(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((snoc(happy_var_1, CTypeSpec(happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(happy_var_1, CTypeSpec(happy_var_2))))
        },
    }
}

pub fn happyReduce_143() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(46, happyReduction_143)
}

pub fn happyReduction_143(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn41(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((snoc(happy_var_1, CStorageSpec(happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(happy_var_1, CStorageSpec(happy_var_2))))
        },
    }
}

pub fn happyReduce_144() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(46, happyReduction_144)
}

pub fn happyReduction_144(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn39(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((snoc(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_145() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(46, happyReduction_145)
}

pub fn happyReduction_145(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn45(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((snoc(happy_var_1, CTypeSpec(happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(happy_var_1, CTypeSpec(happy_var_2))))
        },
    }
}

pub fn happyReduce_146() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(46, happyReduction_146)
}

pub fn happyReduction_146(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn132(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((addTrailingAttrs(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn38((addTrailingAttrs(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_147() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(47, happyReduction_147)
}

pub fn happyReduction_147(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn45(happy_var_1) => {
            HappyAbsSyn38((singleton((CTypeSpec(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn38((singleton((CTypeSpec(happy_var_1)))))
        },
    }
}

pub fn happyReduce_148() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(47, happyReduction_148)
}

pub fn happyReduction_148(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn45(happy_var_2), HappyAbsSyn132(happy_var_1)) => {
            HappyAbsSyn38((snoc((reverseList(liftCAttrs(happy_var_1))), (CTypeSpec(happy_var_2)))))
        },
        (_, _) => {
            HappyAbsSyn38((snoc((reverseList(liftCAttrs(happy_var_1))), (CTypeSpec(happy_var_2)))))
        },
    }
}

pub fn happyReduce_149() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(47, happyReduction_149)
}

pub fn happyReduction_149(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn45(happy_var_2), HappyAbsSyn65(happy_var_1)) => {
            HappyAbsSyn38((snoc(rmap(CTypeQual, happy_var_1), CTypeSpec(happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(rmap(CTypeQual, happy_var_1), CTypeSpec(happy_var_2))))
        },
    }
}

pub fn happyReduce_150() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(47, happyReduction_150)
}

pub fn happyReduction_150(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn45(happy_var_3), HappyAbsSyn132(happy_var_2), HappyAbsSyn65(happy_var_1)) => {
            HappyAbsSyn38((rappend(rmap(CTypeQual, happy_var_1), snoc((liftCAttrs(happy_var_2)), CTypeSpec(happy_var_3)))))
        },
        (_, _, _) => {
            HappyAbsSyn38((rappend(rmap(CTypeQual, happy_var_1), snoc((liftCAttrs(happy_var_2)), CTypeSpec(happy_var_3)))))
        },
    }
}

pub fn happyReduce_151() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(47, happyReduction_151)
}

pub fn happyReduction_151(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn64(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((snoc(happy_var_1, CTypeQual(happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(happy_var_1, CTypeQual(happy_var_2))))
        },
    }
}

pub fn happyReduce_152() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(47, happyReduction_152)
}

pub fn happyReduction_152(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn45(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((snoc(happy_var_1, CTypeSpec(happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(happy_var_1, CTypeSpec(happy_var_2))))
        },
    }
}

pub fn happyReduce_153() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(47, happyReduction_153)
}

pub fn happyReduction_153(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn132(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((addTrailingAttrs(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn38((addTrailingAttrs(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_154() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(48, happyReduction_154)
}

pub fn happyReduction_154(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn45(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((snoc(happy_var_1, CTypeSpec(happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(happy_var_1, CTypeSpec(happy_var_2))))
        },
    }
}

pub fn happyReduce_155() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(48, happyReduction_155)
}

pub fn happyReduction_155(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn41(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((snoc(happy_var_1, CStorageSpec(happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(happy_var_1, CStorageSpec(happy_var_2))))
        },
    }
}

pub fn happyReduce_156() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(48, happyReduction_156)
}

pub fn happyReduction_156(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn39(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((snoc(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_157() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(48, happyReduction_157)
}

pub fn happyReduction_157(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn132(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((addTrailingAttrs(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn38((addTrailingAttrs(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_158() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(49, happyReduction_158)
}

pub fn happyReduction_158(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn45(happy_var_1) => {
            HappyAbsSyn38((singleton((CTypeSpec(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn38((singleton((CTypeSpec(happy_var_1)))))
        },
    }
}

pub fn happyReduce_159() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(49, happyReduction_159)
}

pub fn happyReduction_159(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn45(happy_var_2), HappyAbsSyn132(happy_var_1)) => {
            HappyAbsSyn38((snoc((reverseList(liftCAttrs(happy_var_1))), (CTypeSpec(happy_var_2)))))
        },
        (_, _) => {
            HappyAbsSyn38((snoc((reverseList(liftCAttrs(happy_var_1))), (CTypeSpec(happy_var_2)))))
        },
    }
}

pub fn happyReduce_160() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(49, happyReduction_160)
}

pub fn happyReduction_160(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn45(happy_var_2), HappyAbsSyn65(happy_var_1)) => {
            HappyAbsSyn38((snoc(rmap(CTypeQual, happy_var_1), CTypeSpec(happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(rmap(CTypeQual, happy_var_1), CTypeSpec(happy_var_2))))
        },
    }
}

pub fn happyReduce_161() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(49, happyReduction_161)
}

pub fn happyReduction_161(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn45(happy_var_3), HappyAbsSyn132(happy_var_2), HappyAbsSyn65(happy_var_1)) => {
            HappyAbsSyn38((rappend(rmap(CTypeQual, happy_var_1), snoc((liftCAttrs(happy_var_2)), CTypeSpec(happy_var_3)))))
        },
        (_, _, _) => {
            HappyAbsSyn38((rappend(rmap(CTypeQual, happy_var_1), snoc((liftCAttrs(happy_var_2)), CTypeSpec(happy_var_3)))))
        },
    }
}

pub fn happyReduce_162() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(49, happyReduction_162)
}

pub fn happyReduction_162(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn64(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((snoc(happy_var_1, CTypeQual(happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(happy_var_1, CTypeQual(happy_var_2))))
        },
    }
}

pub fn happyReduce_163() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(49, happyReduction_163)
}

pub fn happyReduction_163(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn132(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((addTrailingAttrs(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn38((addTrailingAttrs(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_164() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(50, happyReduction_164)
}

pub fn happyReduction_164(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn41(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((snoc(happy_var_1, CStorageSpec(happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(happy_var_1, CStorageSpec(happy_var_2))))
        },
    }
}

pub fn happyReduce_165() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 50, happyReduction_165)
}

pub fn happyReduction_165(HappyStk(HappyTerminal(CTokTyIdent(_, happy_var_2)), /* TODO(INFIX) */, HappyAbsSyn38(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_2, |at| { snoc(happy_var_1, CTypeSpec((CTypeDef(happy_var_2, at)))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_166() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 50, happyReduction_166)
}

pub fn happyReduction_166(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn38(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_2, |at| { snoc(happy_var_1, CTypeSpec((CTypeOfExpr(happy_var_4, at)))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_167() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 50, happyReduction_167)
}

pub fn happyReduction_167(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn38(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_2, |at| { snoc(happy_var_1, CTypeSpec((CTypeOfType(happy_var_4, at)))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_168() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(50, happyReduction_168)
}

pub fn happyReduction_168(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn39(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((snoc(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_169() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(50, happyReduction_169)
}

pub fn happyReduction_169(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn132(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((addTrailingAttrs(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn38((addTrailingAttrs(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_170() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 51, happyReduction_170)
}

pub fn happyReduction_170(HappyStk(HappyTerminal(CTokTyIdent(_, happy_var_1)), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, |at| { singleton((CTypeSpec((CTypeDef(happy_var_1, at))))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_171() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 51, happyReduction_171)
}

pub fn happyReduction_171(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, |at| { singleton((CTypeSpec((CTypeOfExpr(happy_var_3, at))))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_172() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 51, happyReduction_172)
}

pub fn happyReduction_172(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, |at| { singleton((CTypeSpec((CTypeOfType(happy_var_3, at))))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_173() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 51, happyReduction_173)
}

pub fn happyReduction_173(HappyStk(HappyTerminal(CTokTyIdent(_, happy_var_2)), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_2, |at| { snoc(rmap(CTypeQual, happy_var_1), CTypeSpec((CTypeDef(happy_var_2, at)))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_174() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 51, happyReduction_174)
}

pub fn happyReduction_174(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_2, |at| { snoc(rmap(CTypeQual, happy_var_1), CTypeSpec((CTypeOfExpr(happy_var_4, at)))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_175() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 51, happyReduction_175)
}

pub fn happyReduction_175(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_2, |at| { snoc(rmap(CTypeQual, happy_var_1), CTypeSpec((CTypeOfType(happy_var_4, at)))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_176() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 51, happyReduction_176)
}

pub fn happyReduction_176(HappyStk(HappyTerminal(CTokTyIdent(_, happy_var_2)), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_2, |at| { snoc(reverseList((liftCAttrs(happy_var_1))), (CTypeSpec((CTypeDef(happy_var_2, at))))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_177() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 51, happyReduction_177)
}

pub fn happyReduction_177(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn132(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, |at| { snoc(reverseList((liftCAttrs(happy_var_1))), (CTypeSpec((CTypeOfExpr(happy_var_4, at))))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_178() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 51, happyReduction_178)
}

pub fn happyReduction_178(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_2, |at| { snoc(reverseList((liftCAttrs(happy_var_1))), (CTypeSpec((CTypeOfType(happy_var_4, at))))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_179() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 51, happyReduction_179)
}

pub fn happyReduction_179(HappyStk(HappyTerminal(CTokTyIdent(_, happy_var_3)), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_3, |at| { rappend(rmap(CTypeQual, happy_var_1), snoc((liftCAttrs(happy_var_2)), CTypeSpec((CTypeDef(happy_var_3, at))))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_180() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 51, happyReduction_180)
}

pub fn happyReduction_180(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_3, |at| { rappend(rmap(CTypeQual, happy_var_1), snoc((liftCAttrs(happy_var_2)), CTypeSpec((CTypeOfExpr(happy_var_5, at))))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_181() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 51, happyReduction_181)
}

pub fn happyReduction_181(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_3, |at| { rappend(rmap(CTypeQual, happy_var_1), snoc((liftCAttrs(happy_var_2)), CTypeSpec((CTypeOfType(happy_var_5, at))))) }))), (|r| { happyReturn((HappyAbsSyn38(r))) }))
}

pub fn happyReduce_182() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(51, happyReduction_182)
}

pub fn happyReduction_182(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn64(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((snoc(happy_var_1, CTypeQual(happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn38((snoc(happy_var_1, CTypeQual(happy_var_2))))
        },
    }
}

pub fn happyReduce_183() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(51, happyReduction_183)
}

pub fn happyReduction_183(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn132(happy_var_2), HappyAbsSyn38(happy_var_1)) => {
            HappyAbsSyn38((addTrailingAttrs(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn38((addTrailingAttrs(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_184() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 52, happyReduction_184)
}

pub fn happyReduction_184(HappyStk(HappyAbsSyn53(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CSUType(happy_var_1)))), (|r| { happyReturn((HappyAbsSyn45(r))) }))
}

pub fn happyReduce_185() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 52, happyReduction_185)
}

pub fn happyReduction_185(HappyStk(HappyAbsSyn61(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CEnumType(happy_var_1)))), (|r| { happyReturn((HappyAbsSyn45(r))) }))
}

pub fn happyReduce_186() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 53, happyReduction_186)
}

pub fn happyReduction_186(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn33(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn131(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn54(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CStruct((unL(happy_var_1)), (Some(happy_var_3)), (Some(reverse(happy_var_5))), happy_var_2)))), (|r| { happyReturn((HappyAbsSyn53(r))) }))
}

pub fn happyReduce_187() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 53, happyReduction_187)
}

pub fn happyReduction_187(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn33(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn54(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CStruct((unL(happy_var_1)), None, (Some(reverse(happy_var_4))), happy_var_2)))), (|r| { happyReturn((HappyAbsSyn53(r))) }))
}

pub fn happyReduce_188() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 53, happyReduction_188)
}

pub fn happyReduction_188(HappyStk(HappyAbsSyn131(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn54(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CStruct((unL(happy_var_1)), (Some(happy_var_3)), None, happy_var_2)))), (|r| { happyReturn((HappyAbsSyn53(r))) }))
}

pub fn happyReduce_189() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(54, happyReduction_189)
}

pub fn happyReduction_189(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn54((L(CStructTag, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn54((L(CStructTag, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_190() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(54, happyReduction_190)
}

pub fn happyReduction_190(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn54((L(CUnionTag, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn54((L(CUnionTag, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_191() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_0(55, happyReduction_191)
}

pub fn happyReduction_191() -> bool {
    HappyAbsSyn33(empty())
}

pub fn happyReduce_192() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(55, happyReduction_192)
}

pub fn happyReduction_192(_0: bool) -> bool {
    match (_0, _1) {
        (_, HappyAbsSyn33(happy_var_1)) => {
            HappyAbsSyn33(happy_var_1())
        },
        (_, _) => {
            HappyAbsSyn33(happy_var_1())
        },
    }
}

pub fn happyReduce_193() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(55, happyReduction_193)
}

pub fn happyReduction_193(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn32(happy_var_2), HappyAbsSyn33(happy_var_1)) => {
            HappyAbsSyn33((snoc(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn33((snoc(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_194() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(56, happyReduction_194)
}

pub fn happyReduction_194(_0: bool) -> bool {
    match (_0, _1) {
        (_, HappyAbsSyn32(happy_var_1)) => {
            HappyAbsSyn32((match happy_var_1 {
                    CDecl(declspecs, dies, at) => {
                        CDecl(declspecs, (List::reverse(dies)), at)
                    },
                }))
        },
        (_, _) => {
            HappyAbsSyn32((match happy_var_1 {
                    CDecl(declspecs, dies, at) => {
                        CDecl(declspecs, (List::reverse(dies)), at)
                    },
                }))
        },
    }
}

pub fn happyReduce_195() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(56, happyReduction_195)
}

pub fn happyReduction_195(_0: bool) -> bool {
    match (_0, _1) {
        (_, HappyAbsSyn32(happy_var_1)) => {
            HappyAbsSyn32((match happy_var_1 {
                    CDecl(declspecs, dies, at) => {
                        CDecl(declspecs, (List::reverse(dies)), at)
                    },
                }))
        },
        (_, _) => {
            HappyAbsSyn32((match happy_var_1 {
                    CDecl(declspecs, dies, at) => {
                        CDecl(declspecs, (List::reverse(dies)), at)
                    },
                }))
        },
    }
}

pub fn happyReduce_196() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(56, happyReduction_196)
}

pub fn happyReduction_196(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn32(happy_var_2), _) => {
            HappyAbsSyn32(happy_var_2())
        },
        (_, _) => {
            HappyAbsSyn32(happy_var_2())
        },
    }
}

pub fn happyReduce_197() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 57, happyReduction_197)
}

pub fn happyReduction_197(HappyStk(HappyAbsSyn59(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, match happy_var_3 {
                (d, s) => {
                    CDecl((__op_addadd(liftTypeQuals(happy_var_1), liftCAttrs(happy_var_2))), vec![(d, None, s)])
                },
            }))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_198() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 57, happyReduction_198)
}

pub fn happyReduction_198(HappyStk(HappyAbsSyn59(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, match happy_var_2 {
                (d, s) => {
                    CDecl((liftCAttrs(happy_var_1)), vec![(d, None, s)])
                },
            }))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_199() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 57, happyReduction_199)
}

pub fn happyReduction_199(HappyStk(HappyAbsSyn59(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_1), happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn32((match happy_var_1 {
            CDecl(declspecs, dies, at) => {
                match happy_var_4 {
                    (Some(d), s) => {
                        CDecl(declspecs, (__op_concat((Some(appendObjAttrs(happy_var_3, d)), None, s), dies)), at)
                    },
                    (None, s) => {
                        CDecl(declspecs, (__op_concat((None, None, s), dies)), at)
                    },
                }
            },
        })), happyRest)
}

pub fn happyReduce_200() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 58, happyReduction_200)
}

pub fn happyReduction_200(HappyStk(HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn59(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, match happy_var_2 {
                (Some(d), s) => {
                    CDecl(happy_var_1, vec![(__op_TODO_dollarnot(Some, appendObjAttrs(happy_var_3, d)), None, s)])
                },
                (None, s) => {
                    CDecl(happy_var_1, vec![(None, None, s)])
                },
            }))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_201() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(5, 58, happyReduction_201)
}

pub fn happyReduction_201(HappyStk(HappyAbsSyn132(happy_var_5), /* TODO(INFIX) */, HappyAbsSyn59(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_1), happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn32((match happy_var_1 {
            CDecl(declspecs, dies, attr) => {
                match happy_var_4 {
                    (Some(d), s) => {
                        CDecl(declspecs, (__op_concat((Some(appendObjAttrs((__op_addadd(happy_var_3, happy_var_5)), d)), None, s), dies)), attr)
                    },
                    (None, s) => {
                        CDecl(declspecs, (__op_concat((None, None, s), dies)), attr)
                    },
                }
            },
        })), happyRest)
}

pub fn happyReduce_202() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 58, happyReduction_202)
}

pub fn happyReduction_202(HappyStk(HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl(happy_var_1, vec![])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_203() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(59, happyReduction_203)
}

pub fn happyReduction_203(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn59(((Some((reverseDeclr(happy_var_1))), None)))
        },
        _ => {
            HappyAbsSyn59(((Some((reverseDeclr(happy_var_1))), None)))
        },
    }
}

pub fn happyReduce_204() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(59, happyReduction_204)
}

pub fn happyReduction_204(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn100(happy_var_2), _) => {
            HappyAbsSyn59(((None, Some(happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn59(((None, Some(happy_var_2))))
        },
    }
}

pub fn happyReduce_205() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(59, happyReduction_205)
}

pub fn happyReduction_205(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn100(happy_var_3), _, HappyAbsSyn66(happy_var_1)) => {
            HappyAbsSyn59(((Some((reverseDeclr(happy_var_1))), Some(happy_var_3))))
        },
        (_, _, _) => {
            HappyAbsSyn59(((Some((reverseDeclr(happy_var_1))), Some(happy_var_3))))
        },
    }
}

pub fn happyReduce_206() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(60, happyReduction_206)
}

pub fn happyReduction_206(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn59(((Some((reverseDeclr(happy_var_1))), None)))
        },
        _ => {
            HappyAbsSyn59(((Some((reverseDeclr(happy_var_1))), None)))
        },
    }
}

pub fn happyReduce_207() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(60, happyReduction_207)
}

pub fn happyReduction_207(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn100(happy_var_2), _) => {
            HappyAbsSyn59(((None, Some(happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn59(((None, Some(happy_var_2))))
        },
    }
}

pub fn happyReduce_208() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(60, happyReduction_208)
}

pub fn happyReduction_208(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn100(happy_var_3), _, HappyAbsSyn66(happy_var_1)) => {
            HappyAbsSyn59(((Some((reverseDeclr(happy_var_1))), Some(happy_var_3))))
        },
        (_, _, _) => {
            HappyAbsSyn59(((Some((reverseDeclr(happy_var_1))), Some(happy_var_3))))
        },
    }
}

pub fn happyReduce_209() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(60, happyReduction_209)
}

pub fn happyReduction_209(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn132(happy_var_2), HappyAbsSyn59(happy_var_1)) => {
            HappyAbsSyn59((match happy_var_1 {
                    (None, expr) => {
                        (None, expr)
                    },
                    (Some(CDeclr(name, derived, asmname, attrs, node)), bsz) => {
                        (Some((CDeclr(name, derived, asmname, (__op_addadd(attrs, happy_var_2)), node))), bsz)
                    },
                }))
        },
        (_, _) => {
            HappyAbsSyn59((match happy_var_1 {
                    (None, expr) => {
                        (None, expr)
                    },
                    (Some(CDeclr(name, derived, asmname, attrs, node)), bsz) => {
                        (Some((CDeclr(name, derived, asmname, (__op_addadd(attrs, happy_var_2)), node))), bsz)
                    },
                }))
        },
    }
}

pub fn happyReduce_210() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 61, happyReduction_210)
}

pub fn happyReduction_210(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn62(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CEnum(None, (Some(reverse(happy_var_4))), happy_var_2)))), (|r| { happyReturn((HappyAbsSyn61(r))) }))
}

pub fn happyReduce_211() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 61, happyReduction_211)
}

pub fn happyReduction_211(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn62(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CEnum(None, (Some(reverse(happy_var_4))), happy_var_2)))), (|r| { happyReturn((HappyAbsSyn61(r))) }))
}

pub fn happyReduce_212() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 61, happyReduction_212)
}

pub fn happyReduction_212(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn62(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn131(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CEnum((Some(happy_var_3)), (Some(reverse(happy_var_5))), happy_var_2)))), (|r| { happyReturn((HappyAbsSyn61(r))) }))
}

pub fn happyReduce_213() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(7, 61, happyReduction_213)
}

pub fn happyReduction_213(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn62(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn131(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CEnum((Some(happy_var_3)), (Some(reverse(happy_var_5))), happy_var_2)))), (|r| { happyReturn((HappyAbsSyn61(r))) }))
}

pub fn happyReduce_214() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 61, happyReduction_214)
}

pub fn happyReduction_214(HappyStk(HappyAbsSyn131(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CEnum((Some(happy_var_3)), None, happy_var_2)))), (|r| { happyReturn((HappyAbsSyn61(r))) }))
}

pub fn happyReduce_215() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(62, happyReduction_215)
}

pub fn happyReduction_215(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn63(happy_var_1) => {
            HappyAbsSyn62((singleton(happy_var_1)))
        },
        _ => {
            HappyAbsSyn62((singleton(happy_var_1)))
        },
    }
}

pub fn happyReduce_216() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(62, happyReduction_216)
}

pub fn happyReduction_216(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn63(happy_var_3), _, HappyAbsSyn62(happy_var_1)) => {
            HappyAbsSyn62((snoc(happy_var_1, happy_var_3)))
        },
        (_, _, _) => {
            HappyAbsSyn62((snoc(happy_var_1, happy_var_3)))
        },
    }
}

pub fn happyReduce_217() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(63, happyReduction_217)
}

pub fn happyReduction_217(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn131(happy_var_1) => {
            HappyAbsSyn63(((happy_var_1, None)))
        },
        _ => {
            HappyAbsSyn63(((happy_var_1, None)))
        },
    }
}

pub fn happyReduce_218() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(63, happyReduction_218)
}

pub fn happyReduction_218(_0: bool) -> bool {
    match (_0, _1) {
        (_, HappyAbsSyn131(happy_var_1)) => {
            HappyAbsSyn63(((happy_var_1, None)))
        },
        (_, _) => {
            HappyAbsSyn63(((happy_var_1, None)))
        },
    }
}

pub fn happyReduce_219() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 63, happyReduction_219)
}

pub fn happyReduction_219(HappyStk(HappyAbsSyn100(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn131(happy_var_1), happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn63(((happy_var_1, Some(happy_var_4)))), happyRest)
}

pub fn happyReduce_220() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(63, happyReduction_220)
}

pub fn happyReduction_220(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn100(happy_var_3), _, HappyAbsSyn131(happy_var_1)) => {
            HappyAbsSyn63(((happy_var_1, Some(happy_var_3))))
        },
        (_, _, _) => {
            HappyAbsSyn63(((happy_var_1, Some(happy_var_3))))
        },
    }
}

pub fn happyReduce_221() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 64, happyReduction_221)
}

pub fn happyReduction_221(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CConstQual))), (|r| { happyReturn((HappyAbsSyn64(r))) }))
}

pub fn happyReduce_222() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 64, happyReduction_222)
}

pub fn happyReduction_222(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CVolatQual))), (|r| { happyReturn((HappyAbsSyn64(r))) }))
}

pub fn happyReduce_223() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 64, happyReduction_223)
}

pub fn happyReduction_223(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CRestrQual))), (|r| { happyReturn((HappyAbsSyn64(r))) }))
}

pub fn happyReduce_224() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 64, happyReduction_224)
}

pub fn happyReduction_224(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CNullableQual))), (|r| { happyReturn((HappyAbsSyn64(r))) }))
}

pub fn happyReduce_225() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 64, happyReduction_225)
}

pub fn happyReduction_225(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CNonnullQual))), (|r| { happyReturn((HappyAbsSyn64(r))) }))
}

pub fn happyReduce_226() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 64, happyReduction_226)
}

pub fn happyReduction_226(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAtomicQual))), (|r| { happyReturn((HappyAbsSyn64(r))) }))
}

pub fn happyReduce_227() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(65, happyReduction_227)
}

pub fn happyReduction_227(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn64(happy_var_2), HappyAbsSyn132(happy_var_1)) => {
            HappyAbsSyn65((snoc(reverseList((__map!(CAttrQual, happy_var_1))), happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn65((snoc(reverseList((__map!(CAttrQual, happy_var_1))), happy_var_2)))
        },
    }
}

pub fn happyReduce_228() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(65, happyReduction_228)
}

pub fn happyReduction_228(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn64(happy_var_2), HappyAbsSyn65(happy_var_1)) => {
            HappyAbsSyn65((snoc(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn65((snoc(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_229() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(65, happyReduction_229)
}

pub fn happyReduction_229(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn64(happy_var_3), HappyAbsSyn132(happy_var_2), HappyAbsSyn65(happy_var_1)) => {
            HappyAbsSyn65((snoc((rappend(happy_var_1, __map!(CAttrQual, happy_var_2))), happy_var_3)))
        },
        (_, _, _) => {
            HappyAbsSyn65((snoc((rappend(happy_var_1, __map!(CAttrQual, happy_var_2))), happy_var_3)))
        },
    }
}

pub fn happyReduce_230() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(66, happyReduction_230)
}

pub fn happyReduction_230(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn66(happy_var_1())
        },
        _ => {
            HappyAbsSyn66(happy_var_1())
        },
    }
}

pub fn happyReduce_231() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(66, happyReduction_231)
}

pub fn happyReduction_231(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn66(happy_var_1())
        },
        _ => {
            HappyAbsSyn66(happy_var_1())
        },
    }
}

pub fn happyReduce_232() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_0(67, happyReduction_232)
}

pub fn happyReduction_232() -> bool {
    HappyAbsSyn67(None())
}

pub fn happyReduce_233() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 67, happyReduction_233)
}

pub fn happyReduction_233(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn128(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn67((Some(happy_var_3))), happyRest)
}

pub fn happyReduce_234() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(68, happyReduction_234)
}

pub fn happyReduction_234(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn66(happy_var_1())
        },
        _ => {
            HappyAbsSyn66(happy_var_1())
        },
    }
}

pub fn happyReduce_235() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(68, happyReduction_235)
}

pub fn happyReduction_235(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn66(happy_var_1())
        },
        _ => {
            HappyAbsSyn66(happy_var_1())
        },
    }
}

pub fn happyReduce_236() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 69, happyReduction_236)
}

pub fn happyReduction_236(HappyStk(HappyTerminal(CTokTyIdent(_, happy_var_1)), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, mkVarDeclr(happy_var_1)))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_237() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 69, happyReduction_237)
}

pub fn happyReduction_237(HappyStk(HappyAbsSyn88(happy_var_2), /* TODO(INFIX) */, HappyTerminal(CTokTyIdent(_, happy_var_1)), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, |at| { happy_var_2((mkVarDeclr(happy_var_1, at))) }))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_238() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(69, happyReduction_238)
}

pub fn happyReduction_238(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn66(happy_var_1())
        },
        _ => {
            HappyAbsSyn66(happy_var_1())
        },
    }
}

pub fn happyReduce_239() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(70, happyReduction_239)
}

pub fn happyReduction_239(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn66(happy_var_1())
        },
        _ => {
            HappyAbsSyn66(happy_var_1())
        },
    }
}

pub fn happyReduce_240() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 70, happyReduction_240)
}

pub fn happyReduction_240(HappyStk(HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, ptrDeclr(happy_var_2, vec![])))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_241() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 70, happyReduction_241)
}

pub fn happyReduction_241(HappyStk(HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttribute(happy_var_1, happy_var_2, ptrDeclr(happy_var_3, vec![])))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_242() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 70, happyReduction_242)
}

pub fn happyReduction_242(HappyStk(HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, ptrDeclr(happy_var_3, (reverse(happy_var_2)))))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_243() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 70, happyReduction_243)
}

pub fn happyReduction_243(HappyStk(HappyAbsSyn66(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttribute(happy_var_1, happy_var_3, ptrDeclr(happy_var_4, (reverse(happy_var_2)))))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_244() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(71, happyReduction_244)
}

pub fn happyReduction_244(_0: bool) -> bool {
    match (_0, _1, _2) {
        (_, HappyAbsSyn66(happy_var_2), _) => {
            HappyAbsSyn66(happy_var_2())
        },
        (_, _, _) => {
            HappyAbsSyn66(happy_var_2())
        },
    }
}

pub fn happyReduce_245() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 71, happyReduction_245)
}

pub fn happyReduction_245(HappyStk(HappyAbsSyn88(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((happy_var_4(happy_var_2))), happyRest)
}

pub fn happyReduce_246() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 71, happyReduction_246)
}

pub fn happyReduction_246(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((appendDeclrAttrs(happy_var_2, happy_var_3))), happyRest)
}

pub fn happyReduce_247() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(5, 71, happyReduction_247)
}

pub fn happyReduction_247(HappyStk(HappyAbsSyn88(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((appendDeclrAttrs(happy_var_2, (happy_var_5(happy_var_3))))), happyRest)
}

pub fn happyReduce_248() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(72, happyReduction_248)
}

pub fn happyReduction_248(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn66(happy_var_1())
        },
        _ => {
            HappyAbsSyn66(happy_var_1())
        },
    }
}

pub fn happyReduce_249() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 72, happyReduction_249)
}

pub fn happyReduction_249(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, ptrDeclr(happy_var_3, vec![])))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_250() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 72, happyReduction_250)
}

pub fn happyReduction_250(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, ptrDeclr(happy_var_4, (reverse(happy_var_2)))))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_251() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 72, happyReduction_251)
}

pub fn happyReduction_251(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttribute(happy_var_1, happy_var_3, ptrDeclr(happy_var_5, (reverse(happy_var_2)))))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_252() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 72, happyReduction_252)
}

pub fn happyReduction_252(HappyStk(HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, ptrDeclr(happy_var_2, vec![])))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_253() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 72, happyReduction_253)
}

pub fn happyReduction_253(HappyStk(HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, ptrDeclr(happy_var_3, (reverse(happy_var_2)))))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_254() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 72, happyReduction_254)
}

pub fn happyReduction_254(HappyStk(HappyAbsSyn66(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttribute(happy_var_1, happy_var_3, ptrDeclr(happy_var_4, (reverse(happy_var_2)))))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_255() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(73, happyReduction_255)
}

pub fn happyReduction_255(_0: bool) -> bool {
    match (_0, _1, _2) {
        (_, HappyAbsSyn66(happy_var_2), _) => {
            HappyAbsSyn66(happy_var_2())
        },
        (_, _, _) => {
            HappyAbsSyn66(happy_var_2())
        },
    }
}

pub fn happyReduce_256() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 73, happyReduction_256)
}

pub fn happyReduction_256(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn88(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((happy_var_3(happy_var_2))), happyRest)
}

pub fn happyReduce_257() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 73, happyReduction_257)
}

pub fn happyReduction_257(HappyStk(HappyAbsSyn88(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((happy_var_4(happy_var_2))), happyRest)
}

pub fn happyReduce_258() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 74, happyReduction_258)
}

pub fn happyReduction_258(HappyStk(HappyTerminal(CTokTyIdent(_, happy_var_1)), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, mkVarDeclr(happy_var_1)))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_259() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(74, happyReduction_259)
}

pub fn happyReduction_259(_0: bool) -> bool {
    match (_0, _1, _2) {
        (_, HappyAbsSyn66(happy_var_2), _) => {
            HappyAbsSyn66(happy_var_2())
        },
        (_, _, _) => {
            HappyAbsSyn66(happy_var_2())
        },
    }
}

pub fn happyReduce_260() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(75, happyReduction_260)
}

pub fn happyReduction_260(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn66(happy_var_1())
        },
        _ => {
            HappyAbsSyn66(happy_var_1())
        },
    }
}

pub fn happyReduce_261() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(75, happyReduction_261)
}

pub fn happyReduction_261(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn66(happy_var_1())
        },
        _ => {
            HappyAbsSyn66(happy_var_1())
        },
    }
}

pub fn happyReduce_262() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(76, happyReduction_262)
}

pub fn happyReduction_262(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn66(happy_var_1())
        },
        _ => {
            HappyAbsSyn66(happy_var_1())
        },
    }
}

pub fn happyReduce_263() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 76, happyReduction_263)
}

pub fn happyReduction_263(HappyStk(HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, ptrDeclr(happy_var_2, vec![])))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_264() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 76, happyReduction_264)
}

pub fn happyReduction_264(HappyStk(HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttribute(happy_var_1, happy_var_2, ptrDeclr(happy_var_3, vec![])))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_265() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 76, happyReduction_265)
}

pub fn happyReduction_265(HappyStk(HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, ptrDeclr(happy_var_3, (reverse(happy_var_2)))))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_266() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 76, happyReduction_266)
}

pub fn happyReduction_266(HappyStk(HappyAbsSyn66(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttribute(happy_var_1, happy_var_3, ptrDeclr(happy_var_4, (reverse(happy_var_2)))))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_267() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(77, happyReduction_267)
}

pub fn happyReduction_267(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn88(happy_var_2), HappyAbsSyn66(happy_var_1)) => {
            HappyAbsSyn66((happy_var_2(happy_var_1)))
        },
        (_, _) => {
            HappyAbsSyn66((happy_var_2(happy_var_1)))
        },
    }
}

pub fn happyReduce_268() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(77, happyReduction_268)
}

pub fn happyReduction_268(_0: bool) -> bool {
    match (_0, _1, _2) {
        (_, HappyAbsSyn66(happy_var_2), _) => {
            HappyAbsSyn66(happy_var_2())
        },
        (_, _, _) => {
            HappyAbsSyn66(happy_var_2())
        },
    }
}

pub fn happyReduce_269() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 77, happyReduction_269)
}

pub fn happyReduction_269(HappyStk(HappyAbsSyn88(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((happy_var_4(happy_var_2))), happyRest)
}

pub fn happyReduce_270() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 77, happyReduction_270)
}

pub fn happyReduction_270(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((appendDeclrAttrs(happy_var_2, happy_var_3))), happyRest)
}

pub fn happyReduce_271() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(5, 77, happyReduction_271)
}

pub fn happyReduction_271(HappyStk(HappyAbsSyn88(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((appendDeclrAttrs(happy_var_2, (happy_var_5(happy_var_3))))), happyRest)
}

pub fn happyReduce_272() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 78, happyReduction_272)
}

pub fn happyReduction_272(HappyStk(HappyTerminal(CTokIdent(_, happy_var_1)), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, mkVarDeclr(happy_var_1)))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_273() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(78, happyReduction_273)
}

pub fn happyReduction_273(_0: bool) -> bool {
    match (_0, _1, _2) {
        (_, HappyAbsSyn66(happy_var_2), _) => {
            HappyAbsSyn66(happy_var_2())
        },
        (_, _, _) => {
            HappyAbsSyn66(happy_var_2())
        },
    }
}

pub fn happyReduce_274() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 78, happyReduction_274)
}

pub fn happyReduction_274(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((appendDeclrAttrs(happy_var_2, happy_var_3))), happyRest)
}

pub fn happyReduce_275() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(79, happyReduction_275)
}

pub fn happyReduction_275(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn11((reverseDeclr(happy_var_1)))
        },
        _ => {
            HappyAbsSyn11((reverseDeclr(happy_var_1)))
        },
    }
}

pub fn happyReduce_276() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(80, happyReduction_276)
}

pub fn happyReduction_276(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn66(happy_var_1())
        },
        _ => {
            HappyAbsSyn66(happy_var_1())
        },
    }
}

pub fn happyReduce_277() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 80, happyReduction_277)
}

pub fn happyReduction_277(HappyStk(HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, ptrDeclr(happy_var_2, vec![])))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_278() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 80, happyReduction_278)
}

pub fn happyReduction_278(HappyStk(HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, ptrDeclr(happy_var_3, (reverse(happy_var_2)))))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_279() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 81, happyReduction_279)
}

pub fn happyReduction_279(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn21(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, funDeclr(happy_var_1, (Left(reverse(happy_var_3))), vec![])))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_280() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(81, happyReduction_280)
}

pub fn happyReduction_280(_0: bool) -> bool {
    match (_0, _1, _2) {
        (_, HappyAbsSyn66(happy_var_2), _) => {
            HappyAbsSyn66(happy_var_2())
        },
        (_, _, _) => {
            HappyAbsSyn66(happy_var_2())
        },
    }
}

pub fn happyReduce_281() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 81, happyReduction_281)
}

pub fn happyReduction_281(HappyStk(HappyAbsSyn88(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((happy_var_4(happy_var_2))), happyRest)
}

pub fn happyReduce_282() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_0(82, happyReduction_282)
}

pub fn happyReduction_282() -> bool {
    HappyAbsSyn82(((vec![], false)))
}

pub fn happyReduce_283() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(82, happyReduction_283)
}

pub fn happyReduction_283(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn33(happy_var_1) => {
            HappyAbsSyn82(((reverse(happy_var_1), false)))
        },
        _ => {
            HappyAbsSyn82(((reverse(happy_var_1), false)))
        },
    }
}

pub fn happyReduce_284() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(82, happyReduction_284)
}

pub fn happyReduction_284(_0: bool) -> bool {
    match (_0, _1, _2) {
        (_, _, HappyAbsSyn33(happy_var_1)) => {
            HappyAbsSyn82(((reverse(happy_var_1), true)))
        },
        (_, _, _) => {
            HappyAbsSyn82(((reverse(happy_var_1), true)))
        },
    }
}

pub fn happyReduce_285() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(83, happyReduction_285)
}

pub fn happyReduction_285(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn32(happy_var_1) => {
            HappyAbsSyn33((singleton(happy_var_1)))
        },
        _ => {
            HappyAbsSyn33((singleton(happy_var_1)))
        },
    }
}

pub fn happyReduce_286() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(83, happyReduction_286)
}

pub fn happyReduction_286(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn32(happy_var_3), _, HappyAbsSyn33(happy_var_1)) => {
            HappyAbsSyn33((snoc(happy_var_1, happy_var_3)))
        },
        (_, _, _) => {
            HappyAbsSyn33((snoc(happy_var_1, happy_var_3)))
        },
    }
}

pub fn happyReduce_287() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 84, happyReduction_287)
}

pub fn happyReduction_287(HappyStk(HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl(happy_var_1, vec![])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_288() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 84, happyReduction_288)
}

pub fn happyReduction_288(HappyStk(HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl(happy_var_1, vec![(Some((reverseDeclr(happy_var_2))), None, None)])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_289() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 84, happyReduction_289)
}

pub fn happyReduction_289(HappyStk(HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl(happy_var_1, vec![
                    (Some((__op_TODO_dollarnot(reverseDeclr, appendDeclrAttrs(happy_var_3, happy_var_2)))), None, None),
                ])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_290() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 84, happyReduction_290)
}

pub fn happyReduction_290(HappyStk(HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl(happy_var_1, vec![
                    (Some((__op_TODO_dollarnot(reverseDeclr, appendDeclrAttrs(happy_var_3, happy_var_2)))), None, None),
                ])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_291() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 84, happyReduction_291)
}

pub fn happyReduction_291(HappyStk(HappyAbsSyn38(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl((reverse(happy_var_1)), vec![])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_292() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 84, happyReduction_292)
}

pub fn happyReduction_292(HappyStk(HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn38(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl((reverse(happy_var_1)), vec![(Some((reverseDeclr(happy_var_2))), None, None)])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_293() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 84, happyReduction_293)
}

pub fn happyReduction_293(HappyStk(HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn38(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl((reverse(happy_var_1)), vec![
                    (Some((__op_TODO_dollarnot(reverseDeclr, appendDeclrAttrs(happy_var_3, happy_var_2)))), None, None),
                ])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_294() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 84, happyReduction_294)
}

pub fn happyReduction_294(HappyStk(HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl(happy_var_1, vec![])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_295() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 84, happyReduction_295)
}

pub fn happyReduction_295(HappyStk(HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl(happy_var_1, vec![(Some((reverseDeclr(happy_var_2))), None, None)])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_296() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 84, happyReduction_296)
}

pub fn happyReduction_296(HappyStk(HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl(happy_var_1, vec![
                    (Some((__op_TODO_dollarnot(reverseDeclr, appendDeclrAttrs(happy_var_3, happy_var_2)))), None, None),
                ])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_297() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 84, happyReduction_297)
}

pub fn happyReduction_297(HappyStk(HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl(happy_var_1, vec![
                    (Some((__op_TODO_dollarnot(reverseDeclr, appendDeclrAttrs(happy_var_3, happy_var_2)))), None, None),
                ])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_298() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 84, happyReduction_298)
}

pub fn happyReduction_298(HappyStk(HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl((liftTypeQuals(happy_var_1)), vec![])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_299() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 84, happyReduction_299)
}

pub fn happyReduction_299(HappyStk(HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl((__op_addadd(liftTypeQuals(happy_var_1), liftCAttrs(happy_var_2))), vec![])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_300() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 84, happyReduction_300)
}

pub fn happyReduction_300(HappyStk(HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl((liftTypeQuals(happy_var_1)), vec![(Some((reverseDeclr(happy_var_2))), None, None)])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_301() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 84, happyReduction_301)
}

pub fn happyReduction_301(HappyStk(HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl((liftTypeQuals(happy_var_1)), vec![(Some((reverseDeclr(appendDeclrAttrs(happy_var_3, happy_var_2)))), None, None)])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_302() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(85, happyReduction_302)
}

pub fn happyReduction_302(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(CTokIdent(_, happy_var_1)) => {
            HappyAbsSyn21((singleton(happy_var_1)))
        },
        _ => {
            HappyAbsSyn21((singleton(happy_var_1)))
        },
    }
}

pub fn happyReduce_303() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(85, happyReduction_303)
}

pub fn happyReduction_303(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyTerminal(CTokIdent(_, happy_var_3)), _, HappyAbsSyn21(happy_var_1)) => {
            HappyAbsSyn21((snoc(happy_var_1, happy_var_3)))
        },
        (_, _, _) => {
            HappyAbsSyn21((snoc(happy_var_1, happy_var_3)))
        },
    }
}

pub fn happyReduce_304() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 86, happyReduction_304)
}

pub fn happyReduction_304(HappyStk(HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl(happy_var_1, vec![])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_305() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 86, happyReduction_305)
}

pub fn happyReduction_305(HappyStk(HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn37(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl(happy_var_1, vec![(Some((reverseDeclr(happy_var_2))), None, None)])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_306() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 86, happyReduction_306)
}

pub fn happyReduction_306(HappyStk(HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl((__op_addadd(liftTypeQuals(happy_var_1), liftCAttrs(happy_var_2))), vec![])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_307() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 86, happyReduction_307)
}

pub fn happyReduction_307(HappyStk(HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CDecl((liftTypeQuals(happy_var_1)), vec![(Some((reverseDeclr(happy_var_2))), None, None)])))), (|r| { happyReturn((HappyAbsSyn32(r))) }))
}

pub fn happyReduce_308() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(87, happyReduction_308)
}

pub fn happyReduction_308(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn66(happy_var_1())
        },
        _ => {
            HappyAbsSyn66(happy_var_1())
        },
    }
}

pub fn happyReduce_309() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(87, happyReduction_309)
}

pub fn happyReduction_309(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn66(happy_var_1) => {
            HappyAbsSyn66(happy_var_1())
        },
        _ => {
            HappyAbsSyn66(happy_var_1())
        },
    }
}

pub fn happyReduce_310() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(87, happyReduction_310)
}

pub fn happyReduction_310(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn88(happy_var_1) => {
            HappyAbsSyn66((happy_var_1(emptyDeclr)))
        },
        _ => {
            HappyAbsSyn66((happy_var_1(emptyDeclr)))
        },
    }
}

pub fn happyReduce_311() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(88, happyReduction_311)
}

pub fn happyReduction_311(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn88(happy_var_1) => {
            HappyAbsSyn88(happy_var_1())
        },
        _ => {
            HappyAbsSyn88(happy_var_1())
        },
    }
}

pub fn happyReduce_312() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 88, happyReduction_312)
}

pub fn happyReduction_312(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn82(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, |at, declr| { match happy_var_2 {
                    (params, variadic) => {
                        funDeclr(declr, (Right((params, variadic))), vec![], at)
                    },
                } }))), (|r| { happyReturn((HappyAbsSyn88(r))) }))
}

pub fn happyReduce_313() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(89, happyReduction_313)
}

pub fn happyReduction_313(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn88(happy_var_1) => {
            HappyAbsSyn88(happy_var_1())
        },
        _ => {
            HappyAbsSyn88(happy_var_1())
        },
    }
}

pub fn happyReduce_314() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(89, happyReduction_314)
}

pub fn happyReduction_314(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn88(happy_var_2), HappyAbsSyn88(happy_var_1)) => {
            HappyAbsSyn88((|decl| { happy_var_2((happy_var_1(decl))) }))
        },
        (_, _) => {
            HappyAbsSyn88((|decl| { happy_var_2((happy_var_1(decl))) }))
        },
    }
}

pub fn happyReduce_315() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 90, happyReduction_315)
}

pub fn happyReduction_315(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn124(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, |at, declr| { arrDeclr(declr, vec![], false, false, happy_var_2, at) }))), (|r| { happyReturn((HappyAbsSyn88(r))) }))
}

pub fn happyReduce_316() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 90, happyReduction_316)
}

pub fn happyReduction_316(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn124(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttributePF(happy_var_1, happy_var_2, |at, declr| { arrDeclr(declr, vec![], false, false, happy_var_3, at) }))), (|r| { happyReturn((HappyAbsSyn88(r))) }))
}

pub fn happyReduce_317() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 90, happyReduction_317)
}

pub fn happyReduction_317(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn124(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, |at, declr| { arrDeclr(declr, (reverse(happy_var_2)), false, false, happy_var_3, at) }))), (|r| { happyReturn((HappyAbsSyn88(r))) }))
}

pub fn happyReduce_318() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 90, happyReduction_318)
}

pub fn happyReduction_318(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn124(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttributePF(happy_var_1, happy_var_3, |at, declr| { arrDeclr(declr, (reverse(happy_var_2)), false, false, happy_var_4, at) }))), (|r| { happyReturn((HappyAbsSyn88(r))) }))
}

pub fn happyReduce_319() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 90, happyReduction_319)
}

pub fn happyReduction_319(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttributePF(happy_var_1, happy_var_3, |at, declr| { arrDeclr(declr, vec![], false, true, (Some(happy_var_4)), at) }))), (|r| { happyReturn((HappyAbsSyn88(r))) }))
}

pub fn happyReduce_320() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 90, happyReduction_320)
}

pub fn happyReduction_320(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_5), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttributePF(happy_var_1, happy_var_4, |at, declr| { arrDeclr(declr, (reverse(happy_var_3)), false, true, (Some(happy_var_5)), at) }))), (|r| { happyReturn((HappyAbsSyn88(r))) }))
}

pub fn happyReduce_321() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(7, 90, happyReduction_321)
}

pub fn happyReduction_321(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_6), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttributePF(happy_var_1, (__op_addadd(happy_var_3, happy_var_5)), |at, declr| { arrDeclr(declr, (reverse(happy_var_2)), false, true, (Some(happy_var_6)), at) }))), (|r| { happyReturn((HappyAbsSyn88(r))) }))
}

pub fn happyReduce_322() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 90, happyReduction_322)
}

pub fn happyReduction_322(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttributePF(happy_var_1, happy_var_3, |at, declr| { arrDeclr(declr, vec![], true, false, None, at) }))), (|r| { happyReturn((HappyAbsSyn88(r))) }))
}

pub fn happyReduce_323() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 90, happyReduction_323)
}

pub fn happyReduction_323(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn132(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttributePF(happy_var_1, (__op_addadd(happy_var_2, happy_var_4)), |at, declr| { arrDeclr(declr, vec![], true, false, None, at) }))), (|r| { happyReturn((HappyAbsSyn88(r))) }))
}

pub fn happyReduce_324() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 90, happyReduction_324)
}

pub fn happyReduction_324(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn132(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttributePF(happy_var_1, happy_var_4, |at, declr| { arrDeclr(declr, (reverse(happy_var_2)), true, false, None, at) }))), (|r| { happyReturn((HappyAbsSyn88(r))) }))
}

pub fn happyReduce_325() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 90, happyReduction_325)
}

pub fn happyReduction_325(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn132(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttributePF(happy_var_1, (__op_addadd(happy_var_3, happy_var_5)), |at, declr| { arrDeclr(declr, (reverse(happy_var_2)), true, false, None, at) }))), (|r| { happyReturn((HappyAbsSyn88(r))) }))
}

pub fn happyReduce_326() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 91, happyReduction_326)
}

pub fn happyReduction_326(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, ptrDeclr(emptyDeclr, vec![])))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_327() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 91, happyReduction_327)
}

pub fn happyReduction_327(HappyStk(HappyAbsSyn132(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttribute(happy_var_1, happy_var_3, ptrDeclr(emptyDeclr, (reverse(happy_var_2)))))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_328() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 91, happyReduction_328)
}

pub fn happyReduction_328(HappyStk(HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, ptrDeclr(happy_var_2, vec![])))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_329() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 91, happyReduction_329)
}

pub fn happyReduction_329(HappyStk(HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn65(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, ptrDeclr(happy_var_3, (reverse(happy_var_2)))))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_330() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 91, happyReduction_330)
}

pub fn happyReduction_330(HappyStk(HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttribute(happy_var_1, happy_var_2, ptrDeclr(emptyDeclr, vec![])))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_331() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 91, happyReduction_331)
}

pub fn happyReduction_331(HappyStk(HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withAttribute(happy_var_1, happy_var_2, ptrDeclr(happy_var_3, vec![])))), (|r| { happyReturn((HappyAbsSyn66(r))) }))
}

pub fn happyReduce_332() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(92, happyReduction_332)
}

pub fn happyReduction_332(_0: bool) -> bool {
    match (_0, _1, _2) {
        (_, HappyAbsSyn66(happy_var_2), _) => {
            HappyAbsSyn66(happy_var_2())
        },
        (_, _, _) => {
            HappyAbsSyn66(happy_var_2())
        },
    }
}

pub fn happyReduce_333() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(92, happyReduction_333)
}

pub fn happyReduction_333(_0: bool) -> bool {
    match (_0, _1, _2) {
        (_, HappyAbsSyn66(happy_var_2), _) => {
            HappyAbsSyn66(happy_var_2())
        },
        (_, _, _) => {
            HappyAbsSyn66(happy_var_2())
        },
    }
}

pub fn happyReduce_334() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(92, happyReduction_334)
}

pub fn happyReduction_334(_0: bool) -> bool {
    match (_0, _1, _2) {
        (_, HappyAbsSyn88(happy_var_2), _) => {
            HappyAbsSyn66((happy_var_2(emptyDeclr)))
        },
        (_, _, _) => {
            HappyAbsSyn66((happy_var_2(emptyDeclr)))
        },
    }
}

pub fn happyReduce_335() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 92, happyReduction_335)
}

pub fn happyReduction_335(HappyStk(HappyAbsSyn88(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((happy_var_4(happy_var_2))), happyRest)
}

pub fn happyReduce_336() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 92, happyReduction_336)
}

pub fn happyReduction_336(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((appendDeclrAttrs(happy_var_2, happy_var_3))), happyRest)
}

pub fn happyReduce_337() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 92, happyReduction_337)
}

pub fn happyReduction_337(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((appendDeclrAttrs(happy_var_2, happy_var_3))), happyRest)
}

pub fn happyReduce_338() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 92, happyReduction_338)
}

pub fn happyReduction_338(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn88(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((appendDeclrAttrs(happy_var_2, (happy_var_3(emptyDeclr))))), happyRest)
}

pub fn happyReduce_339() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(5, 92, happyReduction_339)
}

pub fn happyReduction_339(HappyStk(HappyAbsSyn88(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn66(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn132(happy_var_2), /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn66((appendDeclrAttrs(happy_var_2, (happy_var_5(happy_var_3))))), happyRest)
}

pub fn happyReduce_340() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(92, happyReduction_340)
}

pub fn happyReduction_340(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn132(happy_var_2), HappyAbsSyn66(happy_var_1)) => {
            HappyAbsSyn66((appendDeclrAttrs(happy_var_2, happy_var_1)))
        },
        (_, _) => {
            HappyAbsSyn66((appendDeclrAttrs(happy_var_2, happy_var_1)))
        },
    }
}

pub fn happyReduce_341() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 93, happyReduction_341)
}

pub fn happyReduction_341(HappyStk(HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CInitExpr(happy_var_1)))), (|r| { happyReturn((HappyAbsSyn93(r))) }))
}

pub fn happyReduce_342() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 93, happyReduction_342)
}

pub fn happyReduction_342(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn95(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CInitList((reverse(happy_var_2)))))), (|r| { happyReturn((HappyAbsSyn93(r))) }))
}

pub fn happyReduce_343() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 93, happyReduction_343)
}

pub fn happyReduction_343(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn95(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CInitList((reverse(happy_var_2)))))), (|r| { happyReturn((HappyAbsSyn93(r))) }))
}

pub fn happyReduce_344() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_0(94, happyReduction_344)
}

pub fn happyReduction_344() -> bool {
    HappyAbsSyn94(None())
}

pub fn happyReduce_345() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(94, happyReduction_345)
}

pub fn happyReduction_345(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn93(happy_var_2), _) => {
            HappyAbsSyn94((Some(happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn94((Some(happy_var_2)))
        },
    }
}

pub fn happyReduce_346() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_0(95, happyReduction_346)
}

pub fn happyReduction_346() -> bool {
    HappyAbsSyn95(empty())
}

pub fn happyReduce_347() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(95, happyReduction_347)
}

pub fn happyReduction_347(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn93(happy_var_1) => {
            HappyAbsSyn95((singleton((vec![], happy_var_1))))
        },
        _ => {
            HappyAbsSyn95((singleton((vec![], happy_var_1))))
        },
    }
}

pub fn happyReduce_348() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(95, happyReduction_348)
}

pub fn happyReduction_348(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn93(happy_var_2), HappyAbsSyn96(happy_var_1)) => {
            HappyAbsSyn95((singleton((happy_var_1, happy_var_2))))
        },
        (_, _) => {
            HappyAbsSyn95((singleton((happy_var_1, happy_var_2))))
        },
    }
}

pub fn happyReduce_349() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(95, happyReduction_349)
}

pub fn happyReduction_349(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn93(happy_var_3), _, HappyAbsSyn95(happy_var_1)) => {
            HappyAbsSyn95((snoc(happy_var_1, (vec![], happy_var_3))))
        },
        (_, _, _) => {
            HappyAbsSyn95((snoc(happy_var_1, (vec![], happy_var_3))))
        },
    }
}

pub fn happyReduce_350() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(4, 95, happyReduction_350)
}

pub fn happyReduction_350(HappyStk(HappyAbsSyn93(happy_var_4), /* TODO(INFIX) */, HappyAbsSyn96(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn95(happy_var_1), happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn95((snoc(happy_var_1, (happy_var_3, happy_var_4)))), happyRest)
}

pub fn happyReduce_351() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(96, happyReduction_351)
}

pub fn happyReduction_351(_0: bool) -> bool {
    match (_0, _1) {
        (_, HappyAbsSyn97(happy_var_1)) => {
            HappyAbsSyn96((reverse(happy_var_1)))
        },
        (_, _) => {
            HappyAbsSyn96((reverse(happy_var_1)))
        },
    }
}

pub fn happyReduce_352() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 96, happyReduction_352)
}

pub fn happyReduction_352(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn131(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, |at| { vec![CMemberDesig(happy_var_1, at)] }))), (|r| { happyReturn((HappyAbsSyn96(r))) }))
}

pub fn happyReduce_353() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(96, happyReduction_353)
}

pub fn happyReduction_353(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn98(happy_var_1) => {
            HappyAbsSyn96((vec![happy_var_1]))
        },
        _ => {
            HappyAbsSyn96((vec![happy_var_1]))
        },
    }
}

pub fn happyReduce_354() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(97, happyReduction_354)
}

pub fn happyReduction_354(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn98(happy_var_1) => {
            HappyAbsSyn97((singleton(happy_var_1)))
        },
        _ => {
            HappyAbsSyn97((singleton(happy_var_1)))
        },
    }
}

pub fn happyReduce_355() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(97, happyReduction_355)
}

pub fn happyReduction_355(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn98(happy_var_2), HappyAbsSyn97(happy_var_1)) => {
            HappyAbsSyn97((snoc(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn97((snoc(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_356() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 98, happyReduction_356)
}

pub fn happyReduction_356(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CArrDesig(happy_var_2)))), (|r| { happyReturn((HappyAbsSyn98(r))) }))
}

pub fn happyReduce_357() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 98, happyReduction_357)
}

pub fn happyReduction_357(HappyStk(HappyAbsSyn131(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CMemberDesig(happy_var_2)))), (|r| { happyReturn((HappyAbsSyn98(r))) }))
}

pub fn happyReduce_358() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(98, happyReduction_358)
}

pub fn happyReduction_358(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn98(happy_var_1) => {
            HappyAbsSyn98(happy_var_1())
        },
        _ => {
            HappyAbsSyn98(happy_var_1())
        },
    }
}

pub fn happyReduce_359() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 99, happyReduction_359)
}

pub fn happyReduction_359(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CRangeDesig(happy_var_2, happy_var_4)))), (|r| { happyReturn((HappyAbsSyn98(r))) }))
}

pub fn happyReduce_360() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 100, happyReduction_360)
}

pub fn happyReduction_360(HappyStk(HappyTerminal(CTokIdent(_, happy_var_1)), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CVar(happy_var_1)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_361() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(100, happyReduction_361)
}

pub fn happyReduction_361(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn127(happy_var_1) => {
            HappyAbsSyn100((CConst(happy_var_1)))
        },
        _ => {
            HappyAbsSyn100((CConst(happy_var_1)))
        },
    }
}

pub fn happyReduce_362() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(100, happyReduction_362)
}

pub fn happyReduction_362(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn128(happy_var_1) => {
            HappyAbsSyn100((CConst((liftStrLit(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn100((CConst((liftStrLit(happy_var_1)))))
        },
    }
}

pub fn happyReduce_363() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(100, happyReduction_363)
}

pub fn happyReduction_363(_0: bool) -> bool {
    match (_0, _1, _2) {
        (_, HappyAbsSyn100(happy_var_2), _) => {
            HappyAbsSyn100(happy_var_2())
        },
        (_, _, _) => {
            HappyAbsSyn100(happy_var_2())
        },
    }
}

pub fn happyReduce_364() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 100, happyReduction_364)
}

pub fn happyReduction_364(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn101(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CGenericSelection(happy_var_3, (reverse(happy_var_5)))))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_365() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 100, happyReduction_365)
}

pub fn happyReduction_365(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn12(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CStatExpr(happy_var_2)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_366() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 100, happyReduction_366)
}

pub fn happyReduction_366(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBuiltinExpr(CBuiltinVaArg(happy_var_3, happy_var_5))))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_367() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 100, happyReduction_367)
}

pub fn happyReduction_367(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn97(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBuiltinExpr(CBuiltinOffsetOf(happy_var_3, (reverse(happy_var_5))))))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_368() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 100, happyReduction_368)
}

pub fn happyReduction_368(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBuiltinExpr(CBuiltinTypesCompatible(happy_var_3, happy_var_5))))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_369() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(101, happyReduction_369)
}

pub fn happyReduction_369(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn102(happy_var_3), _, HappyAbsSyn101(happy_var_1)) => {
            HappyAbsSyn101((snoc(happy_var_1, happy_var_3)))
        },
        (_, _, _) => {
            HappyAbsSyn101((snoc(happy_var_1, happy_var_3)))
        },
    }
}

pub fn happyReduce_370() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(101, happyReduction_370)
}

pub fn happyReduction_370(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn102(happy_var_1) => {
            HappyAbsSyn101((singleton(happy_var_1)))
        },
        _ => {
            HappyAbsSyn101((singleton(happy_var_1)))
        },
    }
}

pub fn happyReduce_371() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(102, happyReduction_371)
}

pub fn happyReduction_371(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn100(happy_var_3), _, HappyAbsSyn32(happy_var_1)) => {
            HappyAbsSyn102(((Some(happy_var_1), happy_var_3)))
        },
        (_, _, _) => {
            HappyAbsSyn102(((Some(happy_var_1), happy_var_3)))
        },
    }
}

pub fn happyReduce_372() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(102, happyReduction_372)
}

pub fn happyReduction_372(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn100(happy_var_3), _, _) => {
            HappyAbsSyn102(((None, happy_var_3)))
        },
        (_, _, _) => {
            HappyAbsSyn102(((None, happy_var_3)))
        },
    }
}

pub fn happyReduce_373() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 103, happyReduction_373)
}

pub fn happyReduction_373(HappyStk(HappyAbsSyn131(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, singleton(CMemberDesig(happy_var_1))))), (|r| { happyReturn((HappyAbsSyn97(r))) }))
}

pub fn happyReduce_374() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 103, happyReduction_374)
}

pub fn happyReduction_374(HappyStk(HappyAbsSyn131(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn97(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_3, (snoc(happy_var_1, CMemberDesig(happy_var_3)))))), (|r| { happyReturn((HappyAbsSyn97(r))) }))
}

pub fn happyReduce_375() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 103, happyReduction_375)
}

pub fn happyReduction_375(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn97(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_3, (snoc(happy_var_1, CArrDesig(happy_var_3)))))), (|r| { happyReturn((HappyAbsSyn97(r))) }))
}

pub fn happyReduce_376() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(104, happyReduction_376)
}

pub fn happyReduction_376(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_377() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 104, happyReduction_377)
}

pub fn happyReduction_377(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CIndex(happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_378() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 104, happyReduction_378)
}

pub fn happyReduction_378(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CCall(happy_var_1, vec![])))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_379() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 104, happyReduction_379)
}

pub fn happyReduction_379(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn105(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CCall(happy_var_1, (reverse(happy_var_3)))))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_380() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 104, happyReduction_380)
}

pub fn happyReduction_380(HappyStk(HappyAbsSyn131(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CMember(happy_var_1, happy_var_3, false)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_381() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 104, happyReduction_381)
}

pub fn happyReduction_381(HappyStk(HappyAbsSyn131(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CMember(happy_var_1, happy_var_3, true)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_382() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 104, happyReduction_382)
}

pub fn happyReduction_382(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CUnary(CPostIncOp, happy_var_1)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_383() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 104, happyReduction_383)
}

pub fn happyReduction_383(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CUnary(CPostDecOp, happy_var_1)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_384() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(6, 104, happyReduction_384)
}

pub fn happyReduction_384(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn95(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CCompoundLit(happy_var_2, (reverse(happy_var_5)))))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_385() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(7, 104, happyReduction_385)
}

pub fn happyReduction_385(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn95(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CCompoundLit(happy_var_2, (reverse(happy_var_5)))))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_386() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(105, happyReduction_386)
}

pub fn happyReduction_386(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn105((singleton(happy_var_1)))
        },
        _ => {
            HappyAbsSyn105((singleton(happy_var_1)))
        },
    }
}

pub fn happyReduce_387() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(105, happyReduction_387)
}

pub fn happyReduction_387(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn100(happy_var_3), _, HappyAbsSyn105(happy_var_1)) => {
            HappyAbsSyn105((snoc(happy_var_1, happy_var_3)))
        },
        (_, _, _) => {
            HappyAbsSyn105((snoc(happy_var_1, happy_var_3)))
        },
    }
}

pub fn happyReduce_388() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(106, happyReduction_388)
}

pub fn happyReduction_388(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_389() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 106, happyReduction_389)
}

pub fn happyReduction_389(HappyStk(HappyAbsSyn100(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CUnary(CPreIncOp, happy_var_2)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_390() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 106, happyReduction_390)
}

pub fn happyReduction_390(HappyStk(HappyAbsSyn100(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CUnary(CPreDecOp, happy_var_2)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_391() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(106, happyReduction_391)
}

pub fn happyReduction_391(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn100(happy_var_2), _) => {
            HappyAbsSyn100(happy_var_2())
        },
        (_, _) => {
            HappyAbsSyn100(happy_var_2())
        },
    }
}

pub fn happyReduce_392() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 106, happyReduction_392)
}

pub fn happyReduction_392(HappyStk(HappyAbsSyn100(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn107(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CUnary((unL(happy_var_1)), happy_var_2)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_393() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 106, happyReduction_393)
}

pub fn happyReduction_393(HappyStk(HappyAbsSyn100(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CSizeofExpr(happy_var_2)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_394() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 106, happyReduction_394)
}

pub fn happyReduction_394(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CSizeofType(happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_395() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 106, happyReduction_395)
}

pub fn happyReduction_395(HappyStk(HappyAbsSyn100(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAlignofExpr(happy_var_2)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_396() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 106, happyReduction_396)
}

pub fn happyReduction_396(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAlignofType(happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_397() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 106, happyReduction_397)
}

pub fn happyReduction_397(HappyStk(HappyAbsSyn100(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CComplexReal(happy_var_2)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_398() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 106, happyReduction_398)
}

pub fn happyReduction_398(HappyStk(HappyAbsSyn100(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CComplexImag(happy_var_2)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_399() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 106, happyReduction_399)
}

pub fn happyReduction_399(HappyStk(HappyAbsSyn131(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CLabAddrExpr(happy_var_2)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_400() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(107, happyReduction_400)
}

pub fn happyReduction_400(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn107((L(CAdrOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn107((L(CAdrOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_401() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(107, happyReduction_401)
}

pub fn happyReduction_401(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn107((L(CIndOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn107((L(CIndOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_402() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(107, happyReduction_402)
}

pub fn happyReduction_402(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn107((L(CPlusOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn107((L(CPlusOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_403() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(107, happyReduction_403)
}

pub fn happyReduction_403(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn107((L(CMinOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn107((L(CMinOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_404() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(107, happyReduction_404)
}

pub fn happyReduction_404(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn107((L(CCompOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn107((L(CCompOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_405() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(107, happyReduction_405)
}

pub fn happyReduction_405(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn107((L(CNegOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn107((L(CNegOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_406() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(108, happyReduction_406)
}

pub fn happyReduction_406(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_407() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 108, happyReduction_407)
}

pub fn happyReduction_407(HappyStk(HappyAbsSyn100(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn32(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CCast(happy_var_2, happy_var_4)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_408() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(109, happyReduction_408)
}

pub fn happyReduction_408(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_409() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 109, happyReduction_409)
}

pub fn happyReduction_409(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CMulOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_410() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 109, happyReduction_410)
}

pub fn happyReduction_410(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CDivOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_411() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 109, happyReduction_411)
}

pub fn happyReduction_411(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CRmdOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_412() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(110, happyReduction_412)
}

pub fn happyReduction_412(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_413() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 110, happyReduction_413)
}

pub fn happyReduction_413(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CAddOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_414() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 110, happyReduction_414)
}

pub fn happyReduction_414(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CSubOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_415() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(111, happyReduction_415)
}

pub fn happyReduction_415(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_416() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 111, happyReduction_416)
}

pub fn happyReduction_416(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CShlOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_417() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 111, happyReduction_417)
}

pub fn happyReduction_417(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CShrOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_418() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(112, happyReduction_418)
}

pub fn happyReduction_418(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_419() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 112, happyReduction_419)
}

pub fn happyReduction_419(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CLeOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_420() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 112, happyReduction_420)
}

pub fn happyReduction_420(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CGrOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_421() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 112, happyReduction_421)
}

pub fn happyReduction_421(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CLeqOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_422() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 112, happyReduction_422)
}

pub fn happyReduction_422(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CGeqOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_423() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(113, happyReduction_423)
}

pub fn happyReduction_423(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_424() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 113, happyReduction_424)
}

pub fn happyReduction_424(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CEqOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_425() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 113, happyReduction_425)
}

pub fn happyReduction_425(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CNeqOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_426() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(114, happyReduction_426)
}

pub fn happyReduction_426(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_427() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 114, happyReduction_427)
}

pub fn happyReduction_427(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CAndOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_428() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(115, happyReduction_428)
}

pub fn happyReduction_428(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_429() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 115, happyReduction_429)
}

pub fn happyReduction_429(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CXorOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_430() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(116, happyReduction_430)
}

pub fn happyReduction_430(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_431() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 116, happyReduction_431)
}

pub fn happyReduction_431(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(COrOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_432() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(117, happyReduction_432)
}

pub fn happyReduction_432(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_433() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 117, happyReduction_433)
}

pub fn happyReduction_433(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CLndOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_434() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(118, happyReduction_434)
}

pub fn happyReduction_434(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_435() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 118, happyReduction_435)
}

pub fn happyReduction_435(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CBinary(CLorOp, happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_436() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(119, happyReduction_436)
}

pub fn happyReduction_436(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_437() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(5, 119, happyReduction_437)
}

pub fn happyReduction_437(HappyStk(HappyAbsSyn100(happy_var_5), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CCond(happy_var_1, (Some(happy_var_3)), happy_var_5)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_438() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 119, happyReduction_438)
}

pub fn happyReduction_438(HappyStk(HappyAbsSyn100(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CCond(happy_var_1, None, happy_var_4)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_439() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(120, happyReduction_439)
}

pub fn happyReduction_439(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_440() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 120, happyReduction_440)
}

pub fn happyReduction_440(HappyStk(HappyAbsSyn100(happy_var_3), /* TODO(INFIX) */, HappyAbsSyn121(happy_var_2), /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, CAssign((unL(happy_var_2)), happy_var_1, happy_var_3)))), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_441() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(121, happyReduction_441)
}

pub fn happyReduction_441(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn121((L(CAssignOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn121((L(CAssignOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_442() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(121, happyReduction_442)
}

pub fn happyReduction_442(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn121((L(CMulAssOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn121((L(CMulAssOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_443() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(121, happyReduction_443)
}

pub fn happyReduction_443(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn121((L(CDivAssOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn121((L(CDivAssOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_444() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(121, happyReduction_444)
}

pub fn happyReduction_444(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn121((L(CRmdAssOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn121((L(CRmdAssOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_445() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(121, happyReduction_445)
}

pub fn happyReduction_445(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn121((L(CAddAssOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn121((L(CAddAssOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_446() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(121, happyReduction_446)
}

pub fn happyReduction_446(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn121((L(CSubAssOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn121((L(CSubAssOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_447() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(121, happyReduction_447)
}

pub fn happyReduction_447(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn121((L(CShlAssOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn121((L(CShlAssOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_448() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(121, happyReduction_448)
}

pub fn happyReduction_448(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn121((L(CShrAssOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn121((L(CShrAssOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_449() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(121, happyReduction_449)
}

pub fn happyReduction_449(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn121((L(CAndAssOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn121((L(CAndAssOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_450() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(121, happyReduction_450)
}

pub fn happyReduction_450(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn121((L(CXorAssOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn121((L(CXorAssOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_451() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(121, happyReduction_451)
}

pub fn happyReduction_451(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn121((L(COrAssOp, (posOf(happy_var_1)))))
        },
        _ => {
            HappyAbsSyn121((L(COrAssOp, (posOf(happy_var_1)))))
        },
    }
}

pub fn happyReduce_452() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(122, happyReduction_452)
}

pub fn happyReduction_452(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_453() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 122, happyReduction_453)
}

pub fn happyReduction_453(HappyStk(HappyAbsSyn105(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn100(happy_var_1), happyRest): bool) -> bool {
    happyThen((({
            let es = reverse(happy_var_3);

        withNodeInfo(es, CComma((__op_concat(happy_var_1, es))))        })), (|r| { happyReturn((HappyAbsSyn100(r))) }))
}

pub fn happyReduce_454() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(123, happyReduction_454)
}

pub fn happyReduction_454(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn105((singleton(happy_var_1)))
        },
        _ => {
            HappyAbsSyn105((singleton(happy_var_1)))
        },
    }
}

pub fn happyReduce_455() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(123, happyReduction_455)
}

pub fn happyReduction_455(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn100(happy_var_3), _, HappyAbsSyn105(happy_var_1)) => {
            HappyAbsSyn105((snoc(happy_var_1, happy_var_3)))
        },
        (_, _, _) => {
            HappyAbsSyn105((snoc(happy_var_1, happy_var_3)))
        },
    }
}

pub fn happyReduce_456() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_0(124, happyReduction_456)
}

pub fn happyReduction_456() -> bool {
    HappyAbsSyn124(None())
}

pub fn happyReduce_457() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(124, happyReduction_457)
}

pub fn happyReduction_457(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn124((Some(happy_var_1)))
        },
        _ => {
            HappyAbsSyn124((Some(happy_var_1)))
        },
    }
}

pub fn happyReduce_458() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_0(125, happyReduction_458)
}

pub fn happyReduction_458() -> bool {
    HappyAbsSyn124(None())
}

pub fn happyReduce_459() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(125, happyReduction_459)
}

pub fn happyReduction_459(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn124((Some(happy_var_1)))
        },
        _ => {
            HappyAbsSyn124((Some(happy_var_1)))
        },
    }
}

pub fn happyReduce_460() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(126, happyReduction_460)
}

pub fn happyReduction_460(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn100(happy_var_1())
        },
        _ => {
            HappyAbsSyn100(happy_var_1())
        },
    }
}

pub fn happyReduce_461() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 127, happyReduction_461)
}

pub fn happyReduction_461(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, match happy_var_1 {
                CTokILit(_, i) => {
                    CIntConst(i)
                },
            }))), (|r| { happyReturn((HappyAbsSyn127(r))) }))
}

pub fn happyReduce_462() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 127, happyReduction_462)
}

pub fn happyReduction_462(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, match happy_var_1 {
                CTokCLit(_, c) => {
                    CCharConst(c)
                },
            }))), (|r| { happyReturn((HappyAbsSyn127(r))) }))
}

pub fn happyReduce_463() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 127, happyReduction_463)
}

pub fn happyReduction_463(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, match happy_var_1 {
                CTokFLit(_, f) => {
                    CFloatConst(f)
                },
            }))), (|r| { happyReturn((HappyAbsSyn127(r))) }))
}

pub fn happyReduce_464() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 128, happyReduction_464)
}

pub fn happyReduction_464(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, match happy_var_1 {
                CTokSLit(_, s) => {
                    CStrLit(s)
                },
            }))), (|r| { happyReturn((HappyAbsSyn128(r))) }))
}

pub fn happyReduce_465() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(2, 128, happyReduction_465)
}

pub fn happyReduction_465(HappyStk(HappyAbsSyn129(happy_var_2), /* TODO(INFIX) */, HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, match happy_var_1 {
                CTokSLit(_, s) => {
                    CStrLit((concatCStrings((__op_concat(s, reverse(happy_var_2))))))
                },
            }))), (|r| { happyReturn((HappyAbsSyn128(r))) }))
}

pub fn happyReduce_466() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(129, happyReduction_466)
}

pub fn happyReduction_466(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(happy_var_1) => {
            HappyAbsSyn129((match happy_var_1 {
                    CTokSLit(_, s) => {
                        singleton(s)
                    },
                }))
        },
        _ => {
            HappyAbsSyn129((match happy_var_1 {
                    CTokSLit(_, s) => {
                        singleton(s)
                    },
                }))
        },
    }
}

pub fn happyReduce_467() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(129, happyReduction_467)
}

pub fn happyReduction_467(_0: bool) -> bool {
    match (_0, _1) {
        (HappyTerminal(happy_var_2), HappyAbsSyn129(happy_var_1)) => {
            HappyAbsSyn129((match happy_var_2 {
                    CTokSLit(_, s) => {
                        snoc(happy_var_1, s)
                    },
                }))
        },
        (_, _) => {
            HappyAbsSyn129((match happy_var_2 {
                    CTokSLit(_, s) => {
                        snoc(happy_var_1, s)
                    },
                }))
        },
    }
}

pub fn happyReduce_468() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(130, happyReduction_468)
}

pub fn happyReduction_468(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(CTokClangC(_, ClangCVersionTok(happy_var_1))) => {
            HappyAbsSyn130(happy_var_1())
        },
        _ => {
            HappyAbsSyn130(happy_var_1())
        },
    }
}

pub fn happyReduce_469() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(131, happyReduction_469)
}

pub fn happyReduction_469(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(CTokIdent(_, happy_var_1)) => {
            HappyAbsSyn131(happy_var_1())
        },
        _ => {
            HappyAbsSyn131(happy_var_1())
        },
    }
}

pub fn happyReduce_470() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(131, happyReduction_470)
}

pub fn happyReduction_470(_0: bool) -> bool {
    match (_0) {
        HappyTerminal(CTokTyIdent(_, happy_var_1)) => {
            HappyAbsSyn131(happy_var_1())
        },
        _ => {
            HappyAbsSyn131(happy_var_1())
        },
    }
}

pub fn happyReduce_471() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_0(132, happyReduction_471)
}

pub fn happyReduction_471() -> bool {
    HappyAbsSyn132((vec![]))
}

pub fn happyReduce_472() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(132, happyReduction_472)
}

pub fn happyReduction_472(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn132(happy_var_1) => {
            HappyAbsSyn132(happy_var_1())
        },
        _ => {
            HappyAbsSyn132(happy_var_1())
        },
    }
}

pub fn happyReduce_473() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(133, happyReduction_473)
}

pub fn happyReduction_473(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn132(happy_var_1) => {
            HappyAbsSyn132(happy_var_1())
        },
        _ => {
            HappyAbsSyn132(happy_var_1())
        },
    }
}

pub fn happyReduce_474() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_2(133, happyReduction_474)
}

pub fn happyReduction_474(_0: bool) -> bool {
    match (_0, _1) {
        (HappyAbsSyn132(happy_var_2), HappyAbsSyn132(happy_var_1)) => {
            HappyAbsSyn132((__op_addadd(happy_var_1, happy_var_2)))
        },
        (_, _) => {
            HappyAbsSyn132((__op_addadd(happy_var_1, happy_var_2)))
        },
    }
}

pub fn happyReduce_475() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(6, 134, happyReduction_475)
}

pub fn happyReduction_475(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn135(happy_var_4), /* TODO(INFIX) */, _, /* TODO(INFIX) */, _, /* TODO(INFIX) */, _, happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn132((reverse(happy_var_4))), happyRest)
}

pub fn happyReduce_476() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(135, happyReduction_476)
}

pub fn happyReduction_476(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn136(happy_var_1) => {
            HappyAbsSyn135((match happy_var_1 {
                    None => {
                        empty
                    },
                    Some(attr) => {
                        singleton(attr)
                    },
                }))
        },
        _ => {
            HappyAbsSyn135((match happy_var_1 {
                    None => {
                        empty
                    },
                    Some(attr) => {
                        singleton(attr)
                    },
                }))
        },
    }
}

pub fn happyReduce_477() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(135, happyReduction_477)
}

pub fn happyReduction_477(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn136(happy_var_3), _, HappyAbsSyn135(happy_var_1)) => {
            HappyAbsSyn135(((maybe(id, (flip(snoc)), happy_var_3))(happy_var_1)))
        },
        (_, _, _) => {
            HappyAbsSyn135(((maybe(id, (flip(snoc)), happy_var_3))(happy_var_1)))
        },
    }
}

pub fn happyReduce_478() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_0(136, happyReduction_478)
}

pub fn happyReduction_478() -> bool {
    HappyAbsSyn136(None())
}

pub fn happyReduce_479() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 136, happyReduction_479)
}

pub fn happyReduction_479(HappyStk(HappyTerminal(CTokIdent(_, happy_var_1)), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, Some(CAttr(happy_var_1, vec![]))))), (|r| { happyReturn((HappyAbsSyn136(r))) }))
}

pub fn happyReduce_480() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(1, 136, happyReduction_480)
}

pub fn happyReduction_480(HappyStk(HappyTerminal(happy_var_1), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, Some(CAttr((internalIdent("const".to_string())), vec![]))))), (|r| { happyReturn((HappyAbsSyn136(r))) }))
}

pub fn happyReduce_481() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(4, 136, happyReduction_481)
}

pub fn happyReduction_481(HappyStk(_, /* TODO(INFIX) */, HappyAbsSyn105(happy_var_3), /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(CTokIdent(_, happy_var_1)), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, Some(CAttr(happy_var_1, (reverse(happy_var_3))))))), (|r| { happyReturn((HappyAbsSyn136(r))) }))
}

pub fn happyReduce_482() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyMonadReduce(3, 136, happyReduction_482)
}

pub fn happyReduction_482(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyTerminal(CTokIdent(_, happy_var_1)), happyRest): bool) -> bool {
    happyThen(((withNodeInfo(happy_var_1, Some(CAttr(happy_var_1, vec![]))))), (|r| { happyReturn((HappyAbsSyn136(r))) }))
}

pub fn happyReduce_483() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_1(137, happyReduction_483)
}

pub fn happyReduction_483(_0: bool) -> bool {
    match (_0) {
        HappyAbsSyn100(happy_var_1) => {
            HappyAbsSyn105((singleton(happy_var_1)))
        },
        _ => {
            HappyAbsSyn105((singleton(happy_var_1)))
        },
    }
}

pub fn happyReduce_484() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(137, happyReduction_484)
}

pub fn happyReduction_484(_: bool) -> bool {
    HappyAbsSyn105((Reversed(vec![])))
}

pub fn happyReduce_485() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(137, happyReduction_485)
}

pub fn happyReduction_485(_: bool) -> bool {
    HappyAbsSyn105((Reversed(vec![])))
}

pub fn happyReduce_486() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happySpecReduce_3(137, happyReduction_486)
}

pub fn happyReduction_486(_0: bool) -> bool {
    match (_0, _1, _2) {
        (HappyAbsSyn100(happy_var_3), _, HappyAbsSyn105(happy_var_1)) => {
            HappyAbsSyn105((snoc(happy_var_1, happy_var_3)))
        },
        (_, _, _) => {
            HappyAbsSyn105((snoc(happy_var_1, happy_var_3)))
        },
    }
}

pub fn happyReduce_487() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(5, 137, happyReduction_487)
}

pub fn happyReduction_487(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, _, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn105(happy_var_1), happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn105(happy_var_1()), happyRest)
}

pub fn happyReduce_488() -> fn(isize) -> fn(CToken) -> fn(HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>) -> fn(Vec<HappyState<CToken, fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn>>>) -> fn(HappyStk<HappyAbsSyn>) -> P<HappyAbsSyn> {
    happyReduce(5, 137, happyReduction_488)
}

pub fn happyReduction_488(HappyStk(_, /* TODO(INFIX) */, _, /* TODO(INFIX) */, _, /* TODO(INFIX) */, _, /* TODO(INFIX) */, HappyAbsSyn105(happy_var_1), happyRest): bool) -> bool {
    HappyStk(HappyAbsSyn105(happy_var_1()), happyRest)
}

pub fn happyNewToken(action: bool) -> bool {
    lexC((|tk| { () }({
                let cont = |i| {
                    action(i, i, tk, (HappyState(action)), sts, stk)
                };

            match tk {
                    CTokEof => {
                        action(247, 247, tk, (HappyState(action)), sts, stk)
                    },
                    CTokLParen(_) => {
                        cont(138)
                    },
                    CTokRParen(_) => {
                        cont(139)
                    },
                    CTokLBracket(_) => {
                        cont(140)
                    },
                    CTokRBracket(_) => {
                        cont(141)
                    },
                    CTokArrow(_) => {
                        cont(142)
                    },
                    CTokDot(_) => {
                        cont(143)
                    },
                    CTokExclam(_) => {
                        cont(144)
                    },
                    CTokTilde(_) => {
                        cont(145)
                    },
                    CTokInc(_) => {
                        cont(146)
                    },
                    CTokDec(_) => {
                        cont(147)
                    },
                    CTokPlus(_) => {
                        cont(148)
                    },
                    CTokMinus(_) => {
                        cont(149)
                    },
                    CTokStar(_) => {
                        cont(150)
                    },
                    CTokSlash(_) => {
                        cont(151)
                    },
                    CTokPercent(_) => {
                        cont(152)
                    },
                    CTokAmper(_) => {
                        cont(153)
                    },
                    CTokShiftL(_) => {
                        cont(154)
                    },
                    CTokShiftR(_) => {
                        cont(155)
                    },
                    CTokLess(_) => {
                        cont(156)
                    },
                    CTokLessEq(_) => {
                        cont(157)
                    },
                    CTokHigh(_) => {
                        cont(158)
                    },
                    CTokHighEq(_) => {
                        cont(159)
                    },
                    CTokEqual(_) => {
                        cont(160)
                    },
                    CTokUnequal(_) => {
                        cont(161)
                    },
                    CTokHat(_) => {
                        cont(162)
                    },
                    CTokBar(_) => {
                        cont(163)
                    },
                    CTokAnd(_) => {
                        cont(164)
                    },
                    CTokOr(_) => {
                        cont(165)
                    },
                    CTokQuest(_) => {
                        cont(166)
                    },
                    CTokColon(_) => {
                        cont(167)
                    },
                    CTokAssign(_) => {
                        cont(168)
                    },
                    CTokPlusAss(_) => {
                        cont(169)
                    },
                    CTokMinusAss(_) => {
                        cont(170)
                    },
                    CTokStarAss(_) => {
                        cont(171)
                    },
                    CTokSlashAss(_) => {
                        cont(172)
                    },
                    CTokPercAss(_) => {
                        cont(173)
                    },
                    CTokAmpAss(_) => {
                        cont(174)
                    },
                    CTokHatAss(_) => {
                        cont(175)
                    },
                    CTokBarAss(_) => {
                        cont(176)
                    },
                    CTokSLAss(_) => {
                        cont(177)
                    },
                    CTokSRAss(_) => {
                        cont(178)
                    },
                    CTokComma(_) => {
                        cont(179)
                    },
                    CTokSemic(_) => {
                        cont(180)
                    },
                    CTokLBrace(_) => {
                        cont(181)
                    },
                    CTokRBrace(_) => {
                        cont(182)
                    },
                    CTokEllipsis(_) => {
                        cont(183)
                    },
                    CTokAlignof(_) => {
                        cont(184)
                    },
                    CTokAlignas(_) => {
                        cont(185)
                    },
                    CTokAtomic(_) => {
                        cont(186)
                    },
                    CTokAsm(_) => {
                        cont(187)
                    },
                    CTokAuto(_) => {
                        cont(188)
                    },
                    CTokBreak(_) => {
                        cont(189)
                    },
                    CTokBool(_) => {
                        cont(190)
                    },
                    CTokCase(_) => {
                        cont(191)
                    },
                    CTokChar(_) => {
                        cont(192)
                    },
                    CTokConst(_) => {
                        cont(193)
                    },
                    CTokContinue(_) => {
                        cont(194)
                    },
                    CTokComplex(_) => {
                        cont(195)
                    },
                    CTokDefault(_) => {
                        cont(196)
                    },
                    CTokDo(_) => {
                        cont(197)
                    },
                    CTokDouble(_) => {
                        cont(198)
                    },
                    CTokElse(_) => {
                        cont(199)
                    },
                    CTokEnum(_) => {
                        cont(200)
                    },
                    CTokExtern(_) => {
                        cont(201)
                    },
                    CTokFloat(_) => {
                        cont(202)
                    },
                    CTokFor(_) => {
                        cont(203)
                    },
                    CTokGeneric(_) => {
                        cont(204)
                    },
                    CTokGoto(_) => {
                        cont(205)
                    },
                    CTokIf(_) => {
                        cont(206)
                    },
                    CTokInline(_) => {
                        cont(207)
                    },
                    CTokInt(_) => {
                        cont(208)
                    },
                    CTokInt128(_) => {
                        cont(209)
                    },
                    CTokLong(_) => {
                        cont(210)
                    },
                    CTokLabel(_) => {
                        cont(211)
                    },
                    CTokNoreturn(_) => {
                        cont(212)
                    },
                    CTokNullable(_) => {
                        cont(213)
                    },
                    CTokNonnull(_) => {
                        cont(214)
                    },
                    CTokRegister(_) => {
                        cont(215)
                    },
                    CTokRestrict(_) => {
                        cont(216)
                    },
                    CTokReturn(_) => {
                        cont(217)
                    },
                    CTokShort(_) => {
                        cont(218)
                    },
                    CTokSigned(_) => {
                        cont(219)
                    },
                    CTokSizeof(_) => {
                        cont(220)
                    },
                    CTokStatic(_) => {
                        cont(221)
                    },
                    CTokStaticAssert(_) => {
                        cont(222)
                    },
                    CTokStruct(_) => {
                        cont(223)
                    },
                    CTokSwitch(_) => {
                        cont(224)
                    },
                    CTokTypedef(_) => {
                        cont(225)
                    },
                    CTokTypeof(_) => {
                        cont(226)
                    },
                    CTokThread(_) => {
                        cont(227)
                    },
                    CTokUnion(_) => {
                        cont(228)
                    },
                    CTokUnsigned(_) => {
                        cont(229)
                    },
                    CTokVoid(_) => {
                        cont(230)
                    },
                    CTokVolatile(_) => {
                        cont(231)
                    },
                    CTokWhile(_) => {
                        cont(232)
                    },
                    CTokCLit(_, _) => {
                        cont(233)
                    },
                    CTokILit(_, _) => {
                        cont(234)
                    },
                    CTokFLit(_, _) => {
                        cont(235)
                    },
                    CTokSLit(_, _) => {
                        cont(236)
                    },
                    CTokIdent(_, happy_dollar_dollar) => {
                        cont(237)
                    },
                    CTokTyIdent(_, happy_dollar_dollar) => {
                        cont(238)
                    },
                    CTokGnuC(GnuCAttrTok, _) => {
                        cont(239)
                    },
                    CTokGnuC(GnuCExtTok, _) => {
                        cont(240)
                    },
                    CTokGnuC(GnuCComplexReal, _) => {
                        cont(241)
                    },
                    CTokGnuC(GnuCComplexImag, _) => {
                        cont(242)
                    },
                    CTokGnuC(GnuCVaArg, _) => {
                        cont(243)
                    },
                    CTokGnuC(GnuCOffsetof, _) => {
                        cont(244)
                    },
                    CTokGnuC(GnuCTyCompat, _) => {
                        cont(245)
                    },
                    CTokClangC(_, ClangCVersionTok(happy_dollar_dollar)) => {
                        cont(246)
                    },
                    _ => {
                        happyError_q(tk)
                    },
                }            })))
}

pub fn happyError_(_0: bool) -> bool {
    match (_0, _1) {
        (247, tk) => {
            happyError_q(tk)
        },
        (_, tk) => {
            happyError_q(tk)
        },
    }
}

pub fn happyThen<b>() -> P<b> {
    (__op_bind)
}

pub fn happyReturn<a>() -> P<a> {
    return()
}

pub fn happyThen1() -> bool {
    happyThen
}

pub fn happyReturn1<a>() -> P<a> {
    happyReturn
}

pub fn happyError_q<a>(tk: CToken) -> P<a> {
    (|token| { happyError })(tk)
}

pub fn translation_unit() -> bool {

    let happySomeParser = happyThen((happyParse(action_0)), (|x| { match x {
                    HappyAbsSyn7(z) => {
                        happyReturn(z)
                    },
                    _other => {
                        notHappyAtAll
                    },
                } }));

    happySomeParser
}

pub fn external_declaration() -> bool {

    let happySomeParser = happyThen((happyParse(action_1)), (|x| { match x {
                    HappyAbsSyn9(z) => {
                        happyReturn(z)
                    },
                    _other => {
                        notHappyAtAll
                    },
                } }));

    happySomeParser
}

pub fn statement() -> bool {

    let happySomeParser = happyThen((happyParse(action_2)), (|x| { match x {
                    HappyAbsSyn12(z) => {
                        happyReturn(z)
                    },
                    _other => {
                        notHappyAtAll
                    },
                } }));

    happySomeParser
}

pub fn expression() -> bool {

    let happySomeParser = happyThen((happyParse(action_3)), (|x| { match x {
                    HappyAbsSyn100(z) => {
                        happyReturn(z)
                    },
                    _other => {
                        notHappyAtAll
                    },
                } }));

    happySomeParser
}

pub fn happySeq() -> bool {
    happyDontSeq
}

pub fn reverseList<a>() -> Reversed<Vec<a>> {
    Reversed(List::reverse)
}

pub struct Located<a>(a, Position);


pub fn unL<a>(L(a, pos): Located<a>) -> a {
    a
}

pub fn withNodeInfo<a>(node: node, mkAttrNode: fn(NodeInfo) -> a) -> P<a> {
    /*do*/ {
        let name = getNewName;

        let lastTok = getSavedToken;

        let firstPos = posOf(node);

        let attrs = mkNodeInfo_q(firstPos, (__op_TODO_dollarnot(posLenOfTok, lastTok)), name);

        seq(attrs, (mkAttrNode(attrs)))
    }
}

pub fn withLength<a>(nodeinfo: NodeInfo, mkAttrNode: fn(NodeInfo) -> a) -> P<a> {
    /*do*/ {
        let lastTok = getSavedToken;

        let firstPos = posOfNode(nodeinfo);

        let attrs = mkNodeInfo_q(firstPos, (__op_TODO_dollarnot(posLenOfTok, lastTok)), (maybe((__error!("nameOfNode".to_string())), id, (nameOfNode(nodeinfo)))));

        seq(attrs, (mkAttrNode(attrs)))
    }
}

pub struct CDeclrR(Option<Ident>, Reversed<Vec<CDerivedDeclr>>, Option<CStrLit>, Vec<CAttr>, NodeInfo);


pub fn reverseDeclr(CDeclrR(ide, reversedDDs, asmname, cattrs, at): CDeclrR) -> CDeclr {
    CDeclr(ide, (reverse(reversedDDs)), asmname, cattrs, at)
}

pub fn withAttribute(node: node, cattrs: Vec<CAttr>, mkDeclrNode: fn(NodeInfo) -> CDeclrR) -> P<CDeclrR> {
    /*do*/ {
        let name = getNewName;

        let attrs = mkNodeInfo((posOf(node)), name);

        let newDeclr = appendDeclrAttrs(cattrs, mkDeclrNode(attrs));

        seq(attrs, seq(newDeclr, newDeclr))
    }
}

pub fn withAttributePF(node: node, cattrs: Vec<CAttr>, mkDeclrCtor: fn(NodeInfo) -> fn(CDeclrR) -> CDeclrR) -> P<fn(CDeclrR) -> CDeclrR> {
    /*do*/ {
        let name = getNewName;

        let attrs = mkNodeInfo((posOf(node)), name);

        let newDeclr = appendDeclrAttrs(cattrs, mkDeclrCtor(attrs));

        seq(attrs, seq(newDeclr, newDeclr))
    }
}

pub fn appendObjAttrs(newAttrs: Vec<CAttr>, CDeclr(ident, indirections, asmname, cAttrs, at): CDeclr) -> CDeclr {
    CDeclr(ident, indirections, asmname, (__op_addadd(cAttrs, newAttrs)), at)
}

pub fn appendObjAttrsR(newAttrs: Vec<CAttr>, CDeclrR(ident, indirections, asmname, cAttrs, at): CDeclrR) -> CDeclrR {
    CDeclrR(ident, indirections, asmname, (__op_addadd(cAttrs, newAttrs)), at)
}

pub fn setAsmName(mAsmName: Option<CStrLit>, CDeclrR(ident, indirections, oldName, cattrs, at): CDeclrR) -> P<CDeclrR> {

    let combineName = |_0, _1| {
        match (_0, _1) {
            (None, None) => {
                Right(None)
            },
            (None, oldname, __OP__, Some(_)) => {
                Right(None)
            },
            (newname, __OP__, Some(_), None) => {
                Right(None)
            },
            (Some(n1), Some(n2)) => {
                Right(None)
            },
        }
    };

    let showName = |CStrLit(cstr, _)| {
        show(cstr)
    };

    match combineName(mAsmName, oldName) {
        Left((n1, n2)) => {
            failP((posOf(n2)), vec!["Duplicate assembler name: ".to_string(), showName(n1), showName(n2)])
        },
        Right(newName) => {
            CDeclrR(ident, indirections, newName, cattrs, at)
        },
    }
}

pub fn withAsmNameAttrs((mAsmName, newAttrs): (Option<CStrLit>, Vec<CAttr>), declr: CDeclrR) -> P<CDeclrR> {
    setAsmName(mAsmName, (appendObjAttrsR(newAttrs, declr)))
}

pub fn appendDeclrAttrs(_0: Vec<CAttr>, _1: CDeclrR) -> CDeclrR {
    match (_0, _1) {
        (newAttrs, CDeclrR(ident, Reversed([]), asmname, cattrs, at)) => {
            CDeclrR(ident, empty, asmname, (__op_addadd(cattrs, newAttrs)), at)
        },
        (newAttrs, CDeclrR(ident, Reversed([x, xs]), asmname, cattrs, at)) => {
            CDeclrR(ident, empty, asmname, (__op_addadd(cattrs, newAttrs)), at)
        },
    }
}

pub fn ptrDeclr(CDeclrR(ident, derivedDeclrs, asmname, cattrs, dat): CDeclrR, tyquals: Vec<CTypeQual>, at: NodeInfo) -> CDeclrR {
    CDeclrR(ident, (snoc(derivedDeclrs, CPtrDeclr(tyquals, at))), asmname, cattrs, dat)
}

pub fn funDeclr(CDeclrR(ident, derivedDeclrs, asmname, dcattrs, dat): CDeclrR, params: Either<Vec<Ident>, (Vec<CDecl>, bool)>, cattrs: Vec<CAttr>, at: NodeInfo) -> CDeclrR {
    CDeclrR(ident, (snoc(derivedDeclrs, CFunDeclr(params, cattrs, at))), asmname, dcattrs, dat)
}

pub fn arrDeclr(CDeclrR(ident, derivedDeclrs, asmname, cattrs, dat): CDeclrR, tyquals: Vec<CTypeQual>, var_sized: bool, static_size: bool, size_expr_opt: Option<CExpr>, at: NodeInfo) -> CDeclrR {

    let arr_sz = match size_expr_opt {
            Some(e) => {
                CArrSize(static_size, e)
            },
            None => {
                CNoArrSize(var_sized)
            },
        };

    seq(arr_sz, (CDeclrR(ident, (snoc(derivedDeclrs, CArrDeclr(tyquals, arr_sz, at))), asmname, cattrs, dat)))
}

pub fn liftTypeQuals() -> Vec<CDeclSpec> {
    __map!(CTypeQual, reverse)
}

pub fn liftCAttrs() -> Vec<CDeclSpec> {
    __map!((CTypeQual(CAttrQual)))
}

pub fn addTrailingAttrs(declspecs: Reversed<Vec<CDeclSpec>>, new_attrs: Vec<CAttr>) -> Reversed<Vec<CDeclSpec>> {
    match viewr(declspecs) {
        (specs_init, CTypeSpec(CSUType(CStruct(tag, name, Some(def), def_attrs, su_node), node))) => {
            (snoc(specs_init, CTypeSpec((CSUType((CStruct(tag, name, (Some(def)), (__op_addadd(def_attrs, new_attrs)), su_node)), node)))))
        },
        (specs_init, CTypeSpec(CEnumType(CEnum(name, Some(def), def_attrs, e_node), node))) => {
            (snoc(specs_init, CTypeSpec((CEnumType((CEnum(name, (Some(def)), (__op_addadd(def_attrs, new_attrs)), e_node)), node)))))
        },
        _ => {
            rappend(declspecs, (liftCAttrs(new_attrs)))
        },
    }
}

pub fn emptyDeclr() -> CDeclrR {
    CDeclrR(None, empty, None, vec![], undefNode)
}

pub fn mkVarDeclr(ident: Ident) -> CDeclrR {
    CDeclrR((Some(ident)), empty, None, vec![])
}

pub fn doDeclIdent(declspecs: Vec<CDeclSpec>, CDeclrR(mIdent, _, _, _, _): CDeclrR) -> P<()> {

    let iypedef = |_0| {
        match (_0) {
            CStorageSpec(CTypedef(_)) => {
                true
            },
            _ => {
                true
            },
        }
    };

    match mIdent {
        None => {
            ()
        },
        Some(ident) if any(iypedef, declspecs) => { addTypedef(ident) }
        Some(ident) => { shadowTypedef(ident) }
    }
}

pub fn doFuncParamDeclIdent(_0: CDeclr) -> P<()> {
    match (_0) {
        CDeclr(_, [CFunDeclr(params, _, _), _], _, _, _) => {
            sequence_(/* Expr::Generator */ Generator)
        },
        _ => {
            sequence_(/* Expr::Generator */ Generator)
        },
    }
}

pub fn getCDeclrIdent(CDeclr(mIdent, _, _, _, _): CDeclr) -> Option<Ident> {
    mIdent
}

pub fn happyError<a>() -> P<a> {
    parseError
}

pub fn parseC(input: InputStream, initialPosition: Position) -> Either<ParseError, CTranslUnit> {
    fmap(fst, execParser(translUnitP, input, initialPosition, builtinTypeNames, (namesStartingFrom(0))))
}

pub fn translUnitP() -> P<CTranslUnit> {
    translation_unit
}

pub fn extDeclP() -> P<CExtDecl> {
    external_declaration
}

pub fn statementP() -> P<CStat> {
    statement
}

pub fn expressionP() -> P<CExpr> {
    expression
}

pub struct HappyStk<a>(a, HappyStk<a>);


pub fn happyParse(start_state: bool) -> bool {
    happyNewToken(start_state, notHappyAtAll, notHappyAtAll)
}

pub fn happyAccept(_0: bool) -> bool {
    match (_0, _1, _2, _3, _4) {
        (1, tk, st, sts, HappyStk(_, /* TODO(INFIX) */, ans, _)) => {
            happyReturn1(ans)
        },
        (j, tk, st, sts, HappyStk(ans, _)) => {
            happyReturn1(ans)
        },
    }
}

pub struct HappyState<b, c>(fn(isize) -> fn(isize) -> fn(b) -> fn(HappyState<b, c>) -> fn(Vec<HappyState<b, c>>) -> c);


pub fn happyShift(_0: bool) -> bool {
    match (_0, _1, _2, _3, _4, _5, _6, _7) {
        (new_state, 1, tk, st, sts, stk, __OP__, HappyStk(x, _)) => {
            {
                let i = (match x {
                        HappyErrorToken(i) => {
                            i
                        },
                    });

            new_state(i, i, tk, (HappyState(new_state())), (__op_concat(st(), sts())), stk())            }
        },
        (new_state, i, tk, st, sts, stk) => {
            {
                let i = (match x {
                        HappyErrorToken(i) => {
                            i
                        },
                    });

            new_state(i, i, tk, (HappyState(new_state())), (__op_concat(st(), sts())), stk())            }
        },
    }
}

pub fn happySpecReduce_0(_0: bool) -> bool {
    match (_0, _1, _2, _3, _4, _5, _6) {
        (i, __fn, 1, tk, st, sts, stk) => {
            happyFail((1), tk, st, sts, stk)
        },
        (nt, __fn, j, tk, st, __OP__, HappyState(action), sts, stk) => {
            happyFail((1), tk, st, sts, stk)
        },
    }
}

pub fn happySpecReduce_1(_0: bool) -> bool {
    match (_0, _1, _2, _3, _4, _5, _6) {
        (i, __fn, 1, tk, st, sts, stk) => {
            happyFail((1), tk, st, sts, stk)
        },
        (nt, __fn, j, tk, _, sts, __OP__, [st(__OP__, HappyState(action)), _], HappyStk(v1, stk_q)) => {
            happyFail((1), tk, st, sts, stk)
        },
    }
}

pub fn happySpecReduce_2(_0: bool) -> bool {
    match (_0, _1, _2, _3, _4, _5, _6) {
        (i, __fn, 1, tk, st, sts, stk) => {
            happyFail((1), tk, st, sts, stk)
        },
        (nt, __fn, j, tk, _, [_, sts(__OP__, [st(__OP__, HappyState(action)), _])], HappyStk(v1, /* TODO(INFIX) */, v2, stk_q)) => {
            happyFail((1), tk, st, sts, stk)
        },
    }
}

pub fn happySpecReduce_3(_0: bool) -> bool {
    match (_0, _1, _2, _3, _4, _5, _6) {
        (i, __fn, 1, tk, st, sts, stk) => {
            happyFail((1), tk, st, sts, stk)
        },
        (nt, __fn, j, tk, _, [_, [_, sts(__OP__, [st(__OP__, HappyState(action)), _])]], HappyStk(v1, /* TODO(INFIX) */, v2, /* TODO(INFIX) */, v3, stk_q)) => {
            happyFail((1), tk, st, sts, stk)
        },
    }
}

pub fn happyReduce(_0: bool) -> bool {
    match (_0, _1, _2, _3, _4, _5, _6, _7) {
        (k, i, __fn, 1, tk, st, sts, stk) => {
            happyFail((1), tk, st, sts, stk)
        },
        (k, nt, __fn, j, tk, st, sts, stk) => {
            happyFail((1), tk, st, sts, stk)
        },
    }
}

pub fn happyMonadReduce(_0: bool) -> bool {
    match (_0, _1, _2, _3, _4, _5, _6, _7) {
        (k, nt, __fn, 1, tk, st, sts, stk) => {
            happyFail((1), tk, st, sts, stk)
        },
        (k, nt, __fn, j, tk, st, sts, stk) => {
            happyFail((1), tk, st, sts, stk)
        },
    }
}

pub fn happyMonad2Reduce(_0: bool) -> bool {
    match (_0, _1, _2, _3, _4, _5, _6, _7) {
        (k, nt, __fn, 1, tk, st, sts, stk) => {
            happyFail((1), tk, st, sts, stk)
        },
        (k, nt, __fn, j, tk, st, sts, stk) => {
            happyFail((1), tk, st, sts, stk)
        },
    }
}

pub fn happyDrop(_0: bool) -> bool {
    match (_0, _1) {
        (0, l) => {
            l
        },
        (n, [_, t]) => {
            l
        },
    }
}

pub fn happyDropStk(_0: bool) -> bool {
    match (_0, _1) {
        (0, l) => {
            l
        },
        (n, HappyStk(x, xs)) => {
            l
        },
    }
}

pub fn happyGoto(action: bool) -> bool {
    action(j, j, tk, (HappyState(action)))
}

pub fn happyFail(_0: bool) -> bool {
    match (_0, _1, _2, _3, _4, _5, _6) {
        (1, tk, old_st, _, stk, __OP__, HappyStk(x, _)) => {
            {
                let i = (match x {
                        HappyErrorToken(i) => {
                            i
                        },
                    });

            happyError_(i, tk)            }
        },
        (i, tk, HappyState(action), sts, stk) => {
            {
                let i = (match x {
                        HappyErrorToken(i) => {
                            i
                        },
                    });

            happyError_(i, tk)            }
        },
    }
}

pub fn notHappyAtAll<a>() -> a {
    __error!("Internal Happy error\n".to_string())
}

pub fn happyDoSeq<a, b>(a: a, b: b) -> b {
    seq(a, b)
}

pub fn happyDontSeq<a, b>(a: a, b: b) -> b {
    b
}



