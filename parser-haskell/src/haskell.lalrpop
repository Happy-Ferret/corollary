use std::str::FromStr;
use ast::*;
use lalrpop_util::ErrorRecovery;
use decode_literal;
use conv::expr_to_pat;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, (usize, &'input str), ()>>);

pub Exprs = Comma<Expr>;

// A bunch of macros.

Dot<T>: Vec<T> = {
    <v:(<T> ".")+> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

Semi<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Commaish<T>: Vec<T> = {
    <(<T> ","?)+> => <>,
};

CommaDef<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    },
};

Pipe<T>: Vec<T> = {
    <v:(<T> "|")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// Common patterns.

Quote: String = {
    r#""[^"]*""# => {
      let a = <>;
      a[1..a.len()-1].to_string()
    }
};

SingleQuote: String = {
    r"'[^']*'" => {
      let a = <>;
      a[1..a.len()-1].to_string()
    }
};

Num: isize = {
    r"[0-9]+" => isize::from_str(<>).unwrap()
};

Ident: Ident = {
  r"[a-zA-Z_.][.a-zA-Z_0-9']*(\.:[.+/*=-]+)?" => Ident((<>).to_string()),
};

Ctor: Ident = {
    r":[!#$%&*+./<=>?@^|~:\\-]+" => Ident(<>.to_string()),
};

Operator: String = {
    r"[!#$%&*+/=>?@^~][!#$%&*+./<=>?@^|~\\-]*" => <>.to_string(),
    ":" => <>.to_string(),
    "." => <>.to_string(),
    ".." => <>.to_string(),
    ".|." => <>.to_string(),
    ".&." => <>.to_string(),
    "-" => <>.to_string(),
    "||" => <>.to_string(),
    "<" => <>.to_string(),
    "<=" => <>.to_string(),
    "<>" => <>.to_string(),
    "<+>" => <>.to_string(),
    "<*>" => <>.to_string(),
};

// Code structures

Assignment: Assignment = {
    <pats:PatList> ("|" <CommaDef<(<ExprSpan> ("<-" ExprSpan)?)>> "=" <ExprSpan>)+ => Assignment { pats, expr: Expr::Dummy },
    <pats:PatList> "=" <expr:ExprSpan> => Assignment { pats, expr },
};

Case: CaseCond = {
    // TODO commas can be used in expr spans, see AST.hs
    <d:PatList> <v:("|" <CommaDef<(<ExprSpan> ("<-" ExprSpan)?)>>  "->" <ExprSpan>)*> => CaseCond::Matching(d, v),
    // TODO use pipe groups here:
    <d:PatList> "->" <v:CommaDef<ExprSpan>> <w:Where> => CaseCond::Direct(d, v),
};

ExprSpan: Expr = {
    <span:Expr*> "let" "{" <a:Semi<Assignment>> "}" "in" <e:ExprSpan> => {
        let mut span = span;
        span.push(Expr::Let(a, Box::new(e)));
        Expr::Span(span)
    },
    <Expr+> => Expr::Span(<>),
};

Expr: Expr = {
    Quote => Expr::Str(decode_literal(&<>)),
    SingleQuote => Expr::Char(decode_literal(&<>)),
    Num => Expr::Number(<>),

    <Ident> => Expr::Ref(<>),
    <Ctor> => Expr::Operator(<>.0),
    <Operator> => Expr::Operator(<>),

    r"\\" <i:Ident> <e:PatList?> "->" <body:Expr> => Expr::Lambda({
      let mut a = vec![Pat::Ref(i)];
      a.extend(e.unwrap_or(vec![]));
      a
    }, Box::new(body)),
    r"\\" "(" <e:CommaDef<PatSpan>> ")" "->" <body:Expr>
      => Expr::Lambda(vec![Pat::Tuple(e)], Box::new(body)),

    "[" <CommaDef<ExprSpan>> "|" CommaDef<ListGenerator> "]" => Expr::Dummy,
    "[" <CommaDef<ExprSpan>> ("::" TypeGroup)? "]" => Expr::Vector(<>),
    "[" "]" => Expr::Vector(vec![]),
    "(" <CommaDef<(<ExprSpan> ("::" TypeGroup)?)>>  ")" => Expr::Parens(<>),
    "(" ")" => Expr::Parens(vec![]),
    "(" "," ")" => Expr::Dummy,
    "(" Ident "->" PatList ")" => Expr::Dummy,

    "`" <Ident> "`" => Expr::Operator(<>.0),
    "!" => Expr::Operator(<>.to_string()),
    r"\\\\" => Expr::Operator(<>.to_string()),

    "case" <e:ExprSpan> "of" "{" <s:Semi<Case>> "}" => Expr::Case(Box::new(e), s),
    "do" "{" <Semi<DoItem>> Where "}" => Expr::Do(<>),
    "{" "}" => Expr::Record(vec![]),
    "{" <r:CommaDef<(<Ident> "=" <ExprSpan>)>> ";"? "}" => Expr::Record(r),
};

ListGenerator: () = {
    "let" "{" <Assignment> "}" => (),
    <pat:Expr+> "<-" <expr:ExprSpan> => (), // expr_to_pat
    <Expr+> => (),
};

SContext: () = {
  Ident+ "=>" => (),
  "(" CommaDef<Ident+> ")" "=>" => (),
};

Item: Item = {
  "import" ImportList+ => Item::Import,

  "type" <d:Ident> <args:TypeGroup?> "=" TypeGroup
    //("where" "{" Semi<Item> "}")?
    => Item::Dummy,
  "data" <id:Ident> =>
    Item::Data(id, vec![], vec![], None),
  "data" <id:Ident> <args:TypeGroup?> "=" <p:Pipe<TypeGroup>>
    <derives:("deriving" <ImportList>)?> =>
      Item::Data(id, p, derives.unwrap_or(vec![]), args),
  "newtype" SContext? <id:Ident+> "=" <p:Type>
    <derives:("deriving" <ImportList>)?> =>
      Item::Newtype(id[0].clone(), p, derives.unwrap_or(vec![])),
  "class" SContext? Ident+
    "where" "{" Semi<Item> "}" => Item::Class,
  "instance" TypeGroup
    "where" "{" Semi<Item> "}" => Item::Instance,
  "infixr" <n:Num> "`" <i:Ident> "`" => Item::Infixr(n, i),

  <id:CommaDef<Ident>> <t:("::" <TypeGroup>)> => Item::Prototype(id[0].clone(), t),
  <a:Assignment> <wh:Where> => Item::Assign(Box::new(a), wh),
};

DoItem: DoItem = {
    "let" "{" <Semi<Assignment>> "}" => DoItem::Let(<>),
    <expats:Expr+> "<-" <expr:ExprSpan> => {
        let pats = expats.iter().map(expr_to_pat).collect();
        DoItem::Bind(pats, Box::new(expr))
    },
    <Expr+> => DoItem::Expression(Box::new(Expr::Span(<>))),
};

Where: Where = {
    "where" "{" <Semi<Item>> "}" => <>,
    () => vec![],
};

TypeRecord: (Ident, Ty) = {
  <a:Ident> "::" <b:TypeGroupInner> => (a, b),
};

TypeSub: Ty = {
    "!" <TypeSub> => Ty::Not(Box::new(<>)),
    "[" <Type> "]" => Ty::Brackets(Box::new(<>)),
    "(" <CommaDef<Type>> ")" => Ty::Tuple(<>),
    "(" ")" => Ty::EmptyParen,
    "{" "}" => Ty::Record(vec![]),
    "{" <CommaDef<TypeRecord>> "}" => Ty::Record(<>),
    <Ident> => Ty::Ref(<>),
    <Ctor> => Ty::Ref(<>),
    ".." => Ty::Dummy,
};

TypeSpan: Ty = {
    <TypeSub+> => Ty::Span(<>),
};

Type: Ty = {
    <a:TypeSpan> "->" <b:Type> => Ty::Pair(Box::new(a), Box::new(b)),
    <TypeSpan> => <>,
};

TypeGroupInner: Ty = {
  <a:TypeSpan> "=>" <b:TypeGroupInner> => b,
  <a:Type> => a,
};

TypeGroup: Vec<Ty> = {
    <TypeGroupInner> => vec![<>],
};

PatSub: Pat = {
    "!" <PatSub> => Pat::Not(Box::new(<>)),
    "[" <CommaDef<PatSpan>> "]" => Pat::Brackets(<>),
    "[" "]" => Pat::Brackets(vec![]),
    "(" <PatSpan> ")" => <>,
    "(" <h:PatSpan> "," <t:CommaDef<PatSpan>> ")" => {
        let mut vec = vec![h];
        vec.extend_from_slice(&t);
        Pat::Tuple(vec)
    },
    "(" <i:Ident> "->" <s: PatSpan> ")" => Pat::Arrow(i, Box::new(s)),
    "(" ")" => Pat::EmptyParen,
    "{" "}" => Pat::Record(vec![]),
    "{" <CommaDef<PatRecord>> "}" => Pat::Record(vec![]), //TODO attach this

    <Ident> => Pat::Ref(<>),
    <Ctor> => Pat::Ref(<>),
    <Operator> => Pat::Operator(<>),
    "`" <Ident> "`" => Pat::Infix(<>),

    <Quote> => Pat::Str(decode_literal(&<>)),
    <SingleQuote> => Pat::Char(decode_literal(&<>)),
    <Num> => Pat::Num(<>),
};

PatRecord: () = {
  <Ident> "=" <PatSpan> => (),
  ".." => (), // RecordWildCards
};

// for matching (Ctor arg arg ...)
PatSpan: Pat = {
    <PatList> => Pat::Span(<>),
};

// for matching e.g. multiple function args
PatList: Vec<Pat> = {
    <PatSub+> => rearrange_infix_pat(<>),
};

ImportName: () = {
  Ident => (),
  ".." => (),
};

ImportList: Vec<Ident> = {
    "(" <a:Commaish<(<Ident> ("(" ImportName ")")?)>> ")" => a,
    "(" ")" => vec![],
    <Ident> => vec![<>],

    "(" "(<|>)" ")" => vec![], // ??? see DefTable.hs
};

Section: () = {
    Ident ("(" ".." ")")? => (),
    Ident "(" Ident* ")" => (),
    "module" Ident ("(" CommaDef<Section> ")")? => (),
};

pub Module: Module = {
  "module" <n:Ident> ("(" Comma<Section> ")")?
    "where" "{" <s:Semi<Item>> "}" => Module {
      name: n,
      items: s,
    },
};
